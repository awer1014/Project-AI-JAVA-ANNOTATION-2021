<?xml version="1.0" encoding="UTF-8" standalone="no"?><ErrorList id="783">
	
<SourceCode_List><SourceCode lines="11" name="Evaluation.java"><![CDATA[public class Evaluation { 
protected String day , cover ; 
public Evaluation ( String sday , String scover ) { 
day = sday ; 
cover = scover ; 
} 
public void print ( ) { 
} 
} 

]]></SourceCode><SourceCode lines="11" name="Exam.java"><![CDATA[public class Exam extends Evaluation { 
public Exam ( String day , String cover ) { 
super ( day , cover ) ; 
} 
void print ( ) { 
System . out . println ( "考試日期：" + day ) ; 
System . out . println ( "考試範圍：" + cover ) ; 
} 
} 

]]></SourceCode><SourceCode lines="11" name="Homework.java"><![CDATA[public class Homework extends Evaluation { 
public Homework ( String day , String cover ) { 
super ( day , cover ) ; 
} 
void print ( ) { 
System . out . println ( "截止日期：" + day ) ; 
System . out . println ( "作業描述：" + cover ) ; 
} 
} 

]]></SourceCode><SourceCode lines="11" name="Report.java"><![CDATA[public class Report extends Evaluation { 
public Report ( String day , String cover ) { 
super ( day , cover ) ; 
} 
void print ( ) { 
System . out . println ( "報告內容：" + day ) ; 
System . out . println ( "參考文獻：" + cover ) ; 
} 
} 

]]></SourceCode><SourceCode lines="19" name="Student.java"><![CDATA[public class Student { 
private String evaluation , stid , stname , stnumber , stnumberc ; 
Student ( String sevaluation , String sstid , String sstname , String sstnumber , String sstnumberc ) { 
evaluation = sevaluation ; 
stid = sstid ; 
stname = sstname ; 
stnumber = sstnumber ; 
stnumberc = sstnumberc ; 
} 
void print ( ) { 
System . out . println ( "種類：" + evaluation ) ; 
System . out . println ( "學生學號：" + stid ) ; 
System . out . println ( "學生姓名：" + stname ) ; 
System . out . println ( "成績：" + stnumber ) ; 
System . out . println ( "成績比重：" + stnumberc ) ; 
} 
} 

]]></SourceCode><SourceCode lines="54" name="test.java"><![CDATA[import java . util . Scanner ; 
public class test { 
static String evaluation , stid , stname , stnumber , stnumberc , day , cover ; 
static Student st ; 
static Evaluation setEvaluation ( String evaluation ) { 
Evaluation ev = null ; 
switch ( evaluation ) { 
case "1" : ev = new Exam ( day , cover ) ; 
case "2" : ev = new Homework ( day , cover ) ; 
case "3" : ev = new Report ( day , cover ) ; 
} 
return ev ; 
} 
public static void main ( String [ ] args ) { 
Scanner sc = new Scanner ( System . in ) ; 
System . out . print ( "請輸入種類1(測驗),2(作業),3(心得報告)" ) ; 
evaluation = sc . nextLine ( ) ; 
System . out . print ( "請輸入學生學號：" ) ; 
stid = sc . nextLine ( ) ; 
System . out . print ( "請輸入學生姓名：" ) ; 
stname = sc . nextLine ( ) ; 
System . out . print ( "請輸入成績：" ) ; 
stnumber = sc . nextLine ( ) ; 
System . out . print ( "請輸入成績比重" ) ; 
stnumberc = sc . nextLine ( ) ; 
st = new Student ( evaluation , stid , stname , stnumber , stnumberc ) ; 
while ( true ) 
{ 
String day , cover ; 
if ( evaluation . equals ( "1" ) ) { 
System . out . print ( "請輸入考試日期" ) ; 
day = sc . nextLine ( ) ; 
System . out . print ( "請輸入考試範圍" ) ; 
cover = sc . nextLine ( ) ; 
} 
if ( evaluation . equals ( "2" ) ) { 
System . out . print ( "請輸入截止日期" ) ; 
day = sc . nextLine ( ) ; 
System . out . print ( "請輸入作業描述" ) ; 
cover = sc . nextLine ( ) ; 
} 
if ( evaluation . equals ( "3" ) ) { 
System . out . print ( "請輸入報告內容" ) ; 
day = sc . nextLine ( ) ; 
System . out . print ( "請輸入參考文獻" ) ; 
cover = sc . nextLine ( ) ; 
} 
} 
Evaluation eva = setEvaluation ( evaluation ) ; 
eva . print ( ) ; 
} 
} 

]]></SourceCode></SourceCode_List><Errors><Error tpye="抽象:不會分離變跟不變的部分"><Message><![CDATA[Evaluation:2~6,
此為父類別因此須將重複項設為此物件之物件資料，宣告變數並更改建構子。
protected String id , name , score , prop ;
public Evaluation ( String i , String n , String s , String p ) {
id = i ;
name = n ;
score = s ;
prop = p ;
}

Exam:2~4,
此為子類別因此須將此類別特有之物件資料進行宣告並更改建構子，依此類別為 date , range 。
將重複類型資料藉由super從父類別進行獲取。
protected String date , range ;
public Exam ( String i , String n , String s , String p , String date , String range ) {
super ( String i , String n , String s , String p ) ;
this . date = date ;
this . range = range ;
}

Homework:2~4,
此為子類別因此須將此類別特有之物件資料進行宣告並更改建構子，依此類別為 deadline , description 。
將重複類型資料藉由super從父類別進行獲取。
protected String deadline , description ;
public Exam ( String i , String n , String s , String p , String deadline , String description ) {
super ( String i , String n , String s , String p ) ;
this . deadline = deadline ;
this . description = description ;
}

Report:2~4
此為子類別因此須將此類別特有之物件資料進行宣告並更改建構子，依此類別為 content , literature 。
將重複類型資料藉由super從父類別進行獲取。
protected String content , literature ;
public Exam ( String i , String n , String s , String p , String content , String literature ) {
super ( String i , String n , String s , String p ) ;
this . content = content ;
this . literature = literature ;
}
]]></Message><Linelist><line Begin="2" End="6" src="Evaluation"/><line Begin="2" End="4" src="Exam"/><line Begin="2" End="4" src="Homework"/><line Begin="2" End="4" src="Report"/></Linelist></Error><Error tpye="抽象:抽象動作"><Message><![CDATA[Evaluation:7~8
此動作應隨不同的子類別有不同的輸出，因此應為抽象動作。
public abstract void print ( ) ;]]></Message><Linelist><line Begin="7" End="8" src="Evaluation"/></Linelist></Error><Error tpye="抽象:覆寫抽象動作"><Message><![CDATA[Exam:5~5,
覆寫抽象動作層級必須相同。
public void print ( ) ;

Homework:5~5,
覆寫抽象動作層級必須相同。
public void print ( ) ;


Report:5~5
覆寫抽象動作層級必須相同。
public void print ( ) ;
]]></Message><Linelist><line Begin="5" End="5" src="Exam"/><line Begin="5" End="5" src="Homework"/><line Begin="5" End="5" src="Report"/></Linelist></Error></Errors></ErrorList>