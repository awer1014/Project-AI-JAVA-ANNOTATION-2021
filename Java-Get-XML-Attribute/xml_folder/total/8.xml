<?xml version="1.0" encoding="UTF-8" standalone="no"?><ErrorList id="C:\Users\USER\Desktop\手機待儲存\專研程式碼標記錯誤\XML_Error\1.12\JavaAnnotationXMLProgram\code(正規化)\期末考題三\8\8.xml">
	
<SourceCode_List><SourceCode lines="12" name="ChineseLetter.java"><![CDATA[public class ChineseLetter extends Letter { 
public ChineseLetter ( String t , String r , String c , String s , String d ) { 
super ( t , r , c , s , d ) ; 
} 
public void display ( ) { 
System . out . println ( receiver + title + ", 您好" ) ; 
System . out . println ( content ) ; 
System . out . println ( sender ) ; 
System . out . println ( date ) ; 
} 
} 
]]></SourceCode><SourceCode lines="13" name="EnglishLetter.java"><![CDATA[public class EnglishLetter extends Letter { 
public EnglishLetter ( String r , String t , String c , String s , String d ) { 
super ( r , t , c , s , d ) ; 
} 
public void display ( ) { 
System . out . println ( "Dear " + title + receiver + "," ) ; 
System . out . println ( content ) ; 
System . out . println ( "Sincerely" ) ; 
System . out . println ( sender ) ; 
System . out . println ( date ) ; 
} 
} 
]]></SourceCode><SourceCode lines="15" name="Envelop.java"><![CDATA[public class Envelop { 
String senderAddr , receiverAddr , sender , receiver , title ; 
Letter letter ; 
public Envelop ( String sAddr , String rAddr , Letter lt ) { 
senderAddr = sAddr ; 
receiverAddr = rAddr ; 
letter = lt ; 
} 
public void Envelopdisplay ( ) { 
System . out . println ( "From: " + senderAddr + sender ) ; 
System . out . println ( "To: " + receiverAddr + receiver ) ; 
System . out . println ( "信件內容:" ) ; 
} 
} 
]]></SourceCode><SourceCode lines="18" name="Letter.java"><![CDATA[abstract public class Letter { 
protected String title , receiver , content , sender , date ; 
public Letter ( String t , String r , String c , String s , String d ) { 
title = t ; 
receiver = r ; 
content = c ; 
sender = s ; 
date = d ; 
} 
public void display ( ) { 
System . out . println ( "Dear " + title + receiver + "," ) ; 
System . out . println ( content ) ; 
System . out . println ( "Sincerely" ) ; 
System . out . println ( sender ) ; 
System . out . println ( date ) ; 
} 
} 
]]></SourceCode><SourceCode lines="16" name="main.java"><![CDATA[public class main { 
public static void main ( String [ ] args ) { 
Letter itChinese , itEnglish ; 
itChinese = new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) ; 
itEnglish = new EnglishLetter ( "Professor " , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) ; 
Envelop env = new Envelop ( "Taipei" , "Kaohsiung" , itChinese ) ; 
System . out . println ( "==================以下為第三題和第一題" ) ; 
env . Envelopdisplay ( ) ; 
itChinese . display ( ) ; 
System . out . println ( "==================以下為第二題" ) ; 
itChinese . display ( ) ; 
System . out . println ( "" ) ; 
itEnglish . display ( ) ; 
} 
} 
]]></SourceCode></SourceCode_List><Errors><Error tpye="抽象:抽象動作"><Message><![CDATA[在Letter宣告抽象動作,讓子類別去做覆寫
public abstract class Letter
{
public abstract void display();
}
另一方面,將共同物件寫在父類別,
宣告成public供所有類別做使用,
子類別就不用再宣告一次物件動作
public abstract class Letter 
{
public String getTitle()
{
return title;
}
public String getReceiver()
{
return receiver;
}
public String getContent()
{
return content;
}
public String getSender()
{
return sender;
}
public String getDate()
{
return date;
}
}
則ChineseLetter/EnglishLetter
在覆寫display()抽象動作的時候即可使用共同物件
public class ChineseLetter extends Letter
{
void display(){
System.out.print(getReceiver() + " " + getTitle() +",您好");
System.out.print(getContent());
System.out.print(getSender() +" 敬上");
System.out.print(getDate());
}
}
public class EnglishLetter extends Letter
{
void display(){
System.out.print("Dear "+getTitle()+getReceiver()+",");
System.out.print(getContent());
System.out.print("Sincerely");
System.out.print(getSender());
System.out.print(getDate());
}
}]]></Message><Linelist><line Begin="5" End="10" src="ChineseLetter"/><line Begin="5" End="11" src="EnglishLetter"/><line Begin="10" End="16" src="Letter"/></Linelist></Error><Error tpye="物件:不會使用物件之間的關係"><Message><![CDATA[因為Envelope擁有Letter的letter物件資料
所以不用宣告letter物件中的String sender , receiver , title;
而在呼叫letter的物件動作的時候應加上
System.out.println( "From: "+ senderAddr +", "+ letter.getSender());
System.out.println( "To: "+ receiverAddr +", "+ letter.getReceiver() +" " + letter.getTitle());]]></Message><Linelist><line Begin="2" End="2" src="Envelop"/><line Begin="10" End="11" src="Envelop"/></Linelist></Error><Error tpye="物件:物件動作概念(建構子)"><Message><![CDATA[利用this的函式來讓Envelop的建構子中的變數,
參照Envelop類別中所宣告的變數
public Envelop ( String sAddr , String rAddr , Letter lt ) { 
this . sAddr =  senderAddr; 
this . rAddr = receiverAddr ; 
this . lt = letter ; 
} 
需注意參照的之間的關係,切勿搞混]]></Message><Linelist><line Begin="5" End="7" src="Envelop"/></Linelist></Error><Error tpye="變數:不了解局部變數的概念"><Message><![CDATA[按照資料封裝的原則,
在程式第3行應加上private
表示資料是被保護在類別裡面的
例:private Letter letter;
而senderAddr,receiverAddr是Envelop類別自己所擁有的
應在變數前面加上private
例:private String senderAddr , receiverAddr , sender , receiver , title ;]]></Message><Linelist><line Begin="2" End="3" src="Envelop"/></Linelist></Error></Errors></ErrorList>