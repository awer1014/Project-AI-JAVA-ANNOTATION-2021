<?xml version="1.0" encoding="UTF-8" standalone="no"?><ErrorList id="C:\Users\USER\Desktop\手機待儲存\專研程式碼標記錯誤\XML_Error\1.12\JavaAnnotationXMLProgram\code(正規化)\期末考題四\30\30.xml">
	
<SourceCode_List><SourceCode lines="30" name="ChineseLetter.java"><![CDATA[public class ChineseLetter { 
String title ; 
String receiver ; 
String content ; 
String sender ; 
String date ; 
ChineseLetter ( String title , String receiver , String content , String sender , String date ) { 
this . title = title ; 
this . receiver = receiver ; 
this . content = content ; 
this . sender = sender ; 
this . date = date ; 
} 
public String getSender ( ) { 
return sender ; 
} 
public String getReceiver ( ) { 
return receiver ; 
} 
public String getDate ( ) { 
return date ; 
} 
void display ( ) { 
System . out . println ( receiver + ' ' + title + ",您好" ) ; 
System . out . println ( content ) ; 
System . out . println ( sender + " 敬上" ) ; 
System . out . println ( date ) ; 
} 
} 
]]></SourceCode><SourceCode lines="31" name="EnglishLetter.java"><![CDATA[public class EnglishLetter { 
String title ; 
String receiver ; 
String content ; 
String sender ; 
String date ; 
EnglishLetter ( String title , String receiver , String content , String sender , String date ) { 
this . title = title ; 
this . receiver = receiver ; 
this . content = content ; 
this . sender = sender ; 
this . date = date ; 
} 
public String getSender ( ) { 
return sender ; 
} 
public String getReceiver ( ) { 
return receiver ; 
} 
public String getDate ( ) { 
return date ; 
} 
void display ( ) { 
System . out . println ( "Dear " + title + " " + receiver + ',' ) ; 
System . out . println ( content ) ; 
System . out . println ( "Sincerely" ) ; 
System . out . println ( sender ) ; 
System . out . println ( date ) ; 
} 
} 
]]></SourceCode><SourceCode lines="6" name="Letter.java"><![CDATA[public class Letter implements Comparable { 
Letter [ ] list = { 
new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } 
; 
} 
]]></SourceCode><SourceCode lines="8" name="Test.java"><![CDATA[public class Test implements Comparable { 
public static void main ( String [ ] args ) { 
Letter l1 = new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) ; 
Letter l2 = new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) ; 
Letter l3 = new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) ; 
} 
} 
]]></SourceCode></SourceCode_List><Errors><Error tpye="介面:Comparable介面"><Message><![CDATA[Comparable介面可以實做在Letter類別內
若要在Test類別呼叫Letter的compareTo的動作
不需要將Test也宣告為Comparable介面
abstract public class Letter implements Comparable

因為物件資料都在Letter類別裡
而且需要用到comparable介面時
做的也只有一個物件動作
@Override public int compareTo (Object other){
Letter o = (Letter)other;
return date.compareTo(o.getDate());
}
先將原本宣告成Object的o強制轉換成Letter類別型態
這樣o就可以使用跟Letter有關的相關訊息。
如:Letter的物件資料、Letter的物件動作

因為Java的String類別也是有實作Comparable介面
也是依照原則return 1;return 0;return -1]]></Message><Linelist><line Begin="1" End="1" src="Test"/></Linelist></Error><Error tpye="抽象:不會分離變跟不變的部分"><Message><![CDATA[先將Letter類別宣告為抽象類別
物件資料是可以被子類別繼承的,只需在Letter宣告一次即可
public abstract class Letter 
{
public String title,receiver,content,sender,date;
Letter(String title, String receiver, String content, String sender, String date)
{
this.title= title;
this.receiver=receiver;
this.content=content;
this.sender=sender;
this.date=date;
}
}
子類別的建構子再利用super做資料傳遞給上一層
public class EnglishLetter extends Letter
{
public EnglishLetter(String title, String receiver, String content, String sender, String date)
{
super(title,receiver,content,sender,date);
}
}

public class ChineseLetter extends Letter
{
public ChineseLetter(String title, String receiver, String content, String sender, String date)
{
super(title,receiver,content,sender,date);
}
}
另一方面,將共同物件寫在父類別,
宣告成public供所有類別做使用,
子類別就不用再宣告一次物件動作
public abstract class Letter 
{
public String getTitle()
{
return title;
}
public String getReceiver()
{
return receiver;
}
public String getContent()
{
return content;
}
public String getSender()
{
return sender;
}
public String getDate()
{
return date;
}
}]]></Message><Linelist><line Begin="2" End="6" src="ChineseLetter"/><line Begin="7" End="13" src="ChineseLetter"/><line Begin="14" End="22" src="ChineseLetter"/><line Begin="2" End="6" src="EnglishLetter"/><line Begin="7" End="13" src="EnglishLetter"/><line Begin="14" End="22" src="EnglishLetter"/></Linelist></Error><Error tpye="抽象:抽象動作"><Message><![CDATA[在Letter抽象類別宣告抽象動作,讓子類別去做覆寫
public abstract class Letter
{
public abstract void display();
}
public class ChineseLetter extends Letter
{
void display(){
System.out.print(getReceiver() + " " + getTitle() +",您好");
System.out.print(getContent());
System.out.print(getSender() +" 敬上");
System.out.print(getDate());
}
}
public class EnglishLetter extends Letter
{
void display(){
System.out.print("Dear "+getTitle()+getReceiver()+",");
System.out.print(getContent());
System.out.print("Sincerely");
System.out.print(getSender());
System.out.print(getDate());
}
}]]></Message><Linelist><line Begin="23" End="28" src="ChineseLetter"/><line Begin="23" End="29" src="EnglishLetter"/></Linelist></Error></Errors></ErrorList>