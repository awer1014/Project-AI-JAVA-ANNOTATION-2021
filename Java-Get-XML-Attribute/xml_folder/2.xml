<?xml version="1.0" encoding="UTF-8" standalone="no"?><ErrorList id="C:\Users\USER\Desktop\手機待儲存\專研程式碼標記錯誤\XML_Error\1.12\JavaAnnotationXMLProgram\code(正規化)\期末考題二\2\2.xml">
	
<SourceCode_List><SourceCode lines="33" name="ChineseLetter.java"><![CDATA[public class ChineseLetter { 
String title ; 
String receiver ; 
String content ; 
String sender ; 
String date ; 
ChineseLetter ( String title , String receiver , String content , String sender , String date ) { 
this . title = title ; 
this . receiver = receiver ; 
this . content = content ; 
this . sender = sender ; 
this . date = date ; 
} 
void display ( ) { 
System . out . println ( receiver + " " + title + ", " + "您好" ) ; 
System . out . println ( content ) ; 
System . out . println ( sender + "敬上" ) ; 
System . out . println ( date ) ; 
} 
public String getSender ( ) { 
return this . sender ; 
} 
public String getTitle ( ) { 
return this . title ; 
} 
public String getReceiver ( ) { 
return this . receiver ; 
} 
public String getDate ( ) { 
return this . date ; 
} 
} 
]]></SourceCode><SourceCode lines="22" name="EnglishLetter.java"><![CDATA[public class EnglishLetter { 
String title ; 
String receiver ; 
String content ; 
String sender ; 
String date ; 
EnglishLetter ( String title , String receiver , String content , String sender , String date ) { 
this . title = title ; 
this . receiver = receiver ; 
this . content = content ; 
this . sender = sender ; 
this . date = date ; 
} 
void display ( ) { 
System . out . print ( "Dear " + title + receiver + "," ) ; 
System . out . print ( content ) ; 
System . out . print ( "Sincerely" ) ; 
System . out . print ( sender ) ; 
System . out . print ( date ) ; 
} 
} 
]]></SourceCode><SourceCode lines="5" name="Letter.java"><![CDATA[abstract public class Letter { 
Letter ( ) { 
} 
} 
]]></SourceCode></SourceCode_List><Errors><Error tpye="抽象:不會分離變跟不變的部分"><Message><![CDATA[物件資料是可以被子類別繼承的,只需在letter宣告一次即可
public abstract class Letter 
{
public String title,receiver,content,sender,date;
Letter(String title, String receiver, String content, String sender, String date)
{
this.title= title;
this.receiver=receiver;
this.content=content;
this.sender=sender;
this.date=date;
}
}
子類別的建構子再利用super做資料傳遞給上一層
public class EnglishLetter extends Letter
{
public EnglishLetter(String title, String receiver, String content, String sender, String date)
{
super(title,receiver,content,sender,date);
}
}

public class ChineseLetter extends Letter
{
public ChineseLetter(String title, String receiver, String content, String sender, String date)
{
super(title,receiver,content,sender,date);
}
}
另一方面,將共同物件寫在父類別,
宣告成public供所有類別做使用,
子類別就不用再宣告一次物件動作
public abstract class Letter 
{
public String getTitle()
{
return title;
}
public String getReceiver()
{
return receiver;
}
public String getContent()
{
return content;
}
public String getSender()
{
return sender;
}
public String getDate()
{
return date;
}
}]]></Message><Linelist><line Begin="2" End="13" src="ChineseLetter"/><line Begin="20" End="31" src="ChineseLetter"/><line Begin="2" End="13" src="EnglishLetter"/></Linelist></Error><Error tpye="繼承:使用繼承"><Message><![CDATA[ChineseLetter與EnglishLetter屬於子類別,
需繼承Letter
public class ChineseLetter extends Letter

public class EnglishLetter extends Letter]]></Message><Linelist><line Begin="1" End="1" src="ChineseLetter"/><line Begin="1" End="1" src="EnglishLetter"/></Linelist></Error></Errors></ErrorList>