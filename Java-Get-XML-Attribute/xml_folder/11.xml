<?xml version="1.0" encoding="UTF-8" standalone="no"?><ErrorList id="C:\Users\USER\Desktop\手機待儲存\專研程式碼標記錯誤\XML_Error\1.12\JavaAnnotationXMLProgram\code(正規化)\期末考題二\11\11.xml">
	
<SourceCode_List><SourceCode lines="26" name="ChineseLetter.java"><![CDATA[public class ChineseLetter extends Letter { 
String title , receiver , content , sender , date ; 
ChineseLetter ( String title , String receiver , String content , String sender , String date ) { 
this . title = title ; 
this . receiver = receiver ; 
this . content = content ; 
this . sender = sender ; 
this . date = date ; 
} 
public void display ( ) { 
System . out . println ( receiver + title + ",您好" ) ; 
System . out . println ( content ) ; 
System . out . println ( sender + " 敬上" ) ; 
System . out . println ( date ) ; 
} 
public String getSender ( ) { 
return this . sender ; 
} 
public String getReceiver ( ) { 
return this . receiver ; 
} 
public String getDate ( ) { 
return this . date ; 
} 
} 
]]></SourceCode><SourceCode lines="27" name="EnglishLetter.java"><![CDATA[public class EnglishLetter extends Letter { 
String title , receiver , content , sender , date ; 
EnglishLetter ( String title , String receiver , String content , String sender , String date ) { 
this . title = title ; 
this . receiver = receiver ; 
this . content = content ; 
this . sender = sender ; 
this . date = date ; 
} 
public void display ( ) { 
System . out . println ( "Dear " + title + " " + receiver ) ; 
System . out . println ( content ) ; 
System . out . println ( "Sincerely" ) ; 
System . out . println ( sender ) ; 
System . out . println ( date ) ; 
} 
public String getSender ( ) { 
return this . sender ; 
} 
public String getReceiver ( ) { 
return this . receiver ; 
} 
public String getDate ( ) { 
return this . date ; 
} 
} 
]]></SourceCode><SourceCode lines="7" name="Letter.java"><![CDATA[abstract public class Letter { 
abstract protected void display ( ) ; 
abstract protected String getSender ( ) ; 
abstract protected String getReceiver ( ) ; 
abstract protected String getDate ( ) ; 
} 
]]></SourceCode><SourceCode lines="9" name="test.java"><![CDATA[public class test { 
public static void main ( String [ ] args ) { 
Letter lt = new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) ; 
lt . display ( ) ; 
Letter lt2 = new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) ; 
lt2 . display ( ) ; 
} 
} 
]]></SourceCode></SourceCode_List><Errors><Error tpye="抽象:不會分離變跟不變的部分"><Message><![CDATA[物件資料是可以被子類別繼承的,只需在letter宣告一次即可
public abstract class Letter 
{
public String title,receiver,content,sender,date;
Letter(String title, String receiver, String content, String sender, String date)
{
this.title= title;
this.receiver=receiver;
this.content=content;
this.sender=sender;
this.date=date;
}
}
子類別的建構子再利用super做資料傳遞給上一層
public class EnglishLetter extends Letter
{
public EnglishLetter(String title, String receiver, String content, String sender, String date)
{
super(title,receiver,content,sender,date);
}
}

public class ChineseLetter extends Letter
{
public ChineseLetter(String title, String receiver, String content, String sender, String date)
{
super(title,receiver,content,sender,date);
}
}
另一方面,將共同物件寫在父類別,
宣告成public供所有類別做使用,
子類別就不用再宣告一次物件動作
public abstract class Letter 
{
public String getTitle()
{
return title;
}
public String getReceiver()
{
return receiver;
}
public String getContent()
{
return content;
}
public String getSender()
{
return sender;
}
public String getDate()
{
return date;
}
}]]></Message><Linelist><line Begin="2" End="9" src="ChineseLetter"/><line Begin="16" End="24" src="ChineseLetter"/><line Begin="2" End="9" src="EnglishLetter"/><line Begin="17" End="25" src="EnglishLetter"/><line Begin="3" End="5" src="Letter"/></Linelist></Error><Error tpye="物件:不會使用物件之間的關係"><Message><![CDATA[呼叫函式去取得回傳值
public class EnglishLetter extends Letter
{
@Override public void display(){
System.out.print("Dear "+getTitle()+getReceiver()+",");
System.out.print(getContent());
System.out.print("Sincerely");
System.out.print(getSender());
 System.out.print(getDate());
}
}

public class ChineseLetter extends Letter
{
@Override public void display(){
System.out.print(getReceiver() + " " + getTitle() +",您好");
System.out.print(getContent());
System.out.print(getSender() +" 敬上");
 System.out.print(getDate());
}
}]]></Message><Linelist><line Begin="10" End="15" src="ChineseLetter"/><line Begin="10" End="16" src="ChineseLetter"/></Linelist></Error></Errors></ErrorList>