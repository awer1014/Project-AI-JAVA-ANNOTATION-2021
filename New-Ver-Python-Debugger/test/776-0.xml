<ErrorList id="C:\Users\a2744\Desktop\專研\專研JAVA\工具\標註程式 NI99A Extreme Version\NormalizedCODES\776\776.xml">
	
<SourceCode_List><SourceCode lines="39" name="Evaluation.java">public class Evaluation { 
int flag ; 
protected String id ; 
protected String name ; 
protected Double score ; 
protected Double p ; 
protected String s1 ; 
protected String s2 ; 
Evaluation ( int f , String ID , String n , Double sc , Double P , String S1 , String S2 ) { 
flag = f ; 
id = ID ; 
name = n ; 
score = sc ; 
p = P ; 
s1 = S1 ; 
s2 = S2 ; 
} 
void print ( ) { 
System . out . println ( "您輸入的是:" ) ; 
System . out . println ( "種類:" + flag ) ; 
System . out . println ( "學生學號:" + id ) ; 
System . out . println ( "學生姓名:" + name ) ; 
System . out . println ( "成績:" + score ) ; 
System . out . println ( "成績比重:" + p ) ; 
if ( flag == 1 ) { 
System . out . println ( "考試日期:" + s1 ) ; 
System . out . println ( "考試範圍:" + s2 ) ; 
} 
else if ( flag == 2 ) { 
System . out . println ( "截止日期:" + s1 ) ; 
System . out . println ( "作業描述:" + s2 ) ; 
} 
else { 
System . out . println ( "報告內容:" + s1 ) ; 
System . out . println ( "參考文獻:" + s2 ) ; 
} 
} 
} 
</SourceCode><SourceCode lines="6" name="Exam.java">public class Exam extends Evaluation { 
public Exam ( int f , String ID , String n , Double sc , Double P , String date , String ran ) { 
super ( f , ID , n , sc , P , date , ran ) ; 
} 
} 
</SourceCode><SourceCode lines="6" name="HomeWork.java">public class HomeWork extends Evaluation { 
public HomeWork ( int f , String ID , String n , Double sc , Double P , String date , String describe ) { 
super ( f , ID , n , sc , P , date , describe ) ; 
} 
} 
</SourceCode><SourceCode lines="6" name="Report.java">public class Report extends Evaluation { 
public Report ( int f , String ID , String n , Double sc , Double P , String text , String ref ) { 
super ( f , ID , n , sc , P , text , ref ) ; 
} 
} 
</SourceCode><SourceCode lines="47" name="test.java">import java . util . Scanner ; 
public class test { 
public static void main ( String [ ] args ) { 
Scanner kb = new Scanner ( System . in ) ; 
while ( true ) { 
System . out . println ( "請輸入種類 1(測驗) 2(作業) 3(心得報告)" ) ; 
int flag = kb . nextInt ( ) ; 
if ( flag == 0 ) break ; 
kb . nextLine ( ) ; 
System . out . println ( "請輸入學生學號 :" ) ; 
String id = kb . nextLine ( ) ; 
System . out . println ( "請輸入學生姓名 :" ) ; 
String n = kb . nextLine ( ) ; 
System . out . println ( "請輸入成績 :" ) ; 
Double sc = kb . nextDouble ( ) ; 
System . out . println ( "請輸入成績比重:" ) ; 
Double p = kb . nextDouble ( ) ; 
kb . nextLine ( ) ; 
Evaluation eva = null ; 
if ( flag == 1 ) { 
System . out . println ( "請輸入考試日期:" ) ; 
String date = kb . nextLine ( ) ; 
System . out . println ( "請輸入考試範圍:" ) ; 
String range = kb . nextLine ( ) ; 
eva = new Exam ( flag , id , n , sc , p , date , range ) ; 
eva . print ( ) ; 
} 
else if ( flag == 2 ) { 
System . out . println ( "請輸入截止日期:" ) ; 
String date = kb . nextLine ( ) ; 
System . out . println ( "請輸入作業描述:" ) ; 
String describe = kb . nextLine ( ) ; 
eva = new HomeWork ( flag , id , n , sc , p , date , describe ) ; 
eva . print ( ) ; 
} 
else { 
System . out . println ( "請輸入報告內容:" ) ; 
String text = kb . nextLine ( ) ; 
System . out . println ( "請輸入參考文獻:" ) ; 
String ref = kb . nextLine ( ) ; 
eva = new Report ( flag , id , n , sc , p , text , ref ) ; 
eva . print ( ) ; 
} 
} 
} 
} 
</SourceCode></SourceCode_List><Errors><Error tpye="抽象:繼承資料或動作"><Message>抽象類別須加上abstract關鍵字宣告類別。
就像一般的父類別，其資料與動作可以由子類別繼承。
抽象類別也扮演物件導向多型的重要角色，抽象類別變數可以承接不同的子類別物件，展現不同的行為。
例如，
public abstract class Evaluation {...}</Message><Linelist><line Begin="1" End="1" src="Evaluation" /></Linelist></Error></Errors></ErrorList>