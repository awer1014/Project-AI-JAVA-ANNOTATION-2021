<ErrorList id="C:\Users\sae4a\OneDrive\桌面\java\錯誤(已正規化)\524\524.xml">
	
<SourceCode_List><SourceCode lines="11" name="Exam.java">public class Exam extends type { 
String grade , range ; 
public Exam ( String grade , String range ) { 
grade = this . grade ; 
range = this . range ; 
} 
public String getExam ( ) { 
return grade ; 
} 
} 
</SourceCode><SourceCode lines="10" name="Homework.java">public class Homework extends type { 
String data ; 
String discribe ; 
public Homework ( String data , String discribe ) { 
} 
public String getHomework ( ) { 
return data ; 
} 
} 
</SourceCode><SourceCode lines="9" name="Student.java">public class Student extends type { 
String name ; 
String id ; 
public String Sudent ( String name , String id ) { 
name = this . name ; 
id = this . id ; 
} 
} 
</SourceCode><SourceCode lines="35" name="Test.java">import java . util . * ; 
public class Test { 
public static void main ( String [ ] args ) { 
String s , type , id , name , grade , per , data , range ; 
Scanner scan = new Scanner ( System . in ) ; 
System . out . print ( "請輸入種類:1(測驗), 2(作業), 3(心得報告)" ) ; 
type = scan . nextLine ( ) ; 
System . out . print ( "請輸入學生學號:" ) ; 
id = scan . nextLine ( ) ; 
System . out . print ( "請輸入學生姓名:" ) ; 
name = scan . nextLine ( ) ; 
System . out . print ( "請輸入成績" ) ; 
grade = scan . nextLine ( ) ; 
System . out . print ( "請輸入成績比重" ) ; 
per = scan . nextLine ( ) ; 
System . out . print ( "請輸入考試日期" ) ; 
data = scan . nextLine ( ) ; 
System . out . print ( "請輸入考試範圍" ) ; 
range = scan . nextLine ( ) ; 
int num = 0 ; 
while ( true ) { 
s = scan . nextLine ( ) ; 
break ; 
} 
System . out . println ( "您輸入的是:" ) ; 
System . out . println ( "種類:" + type ) ; 
System . out . println ( "學生學號:" + id ) ; 
System . out . println ( "學生姓名:" + name ) ; 
System . out . println ( "成績:" + grade ) ; 
System . out . println ( "成績比重:" + per ) ; 
System . out . println ( "考試日期:" + data ) ; 
System . out . println ( "考試範圍" + range ) ; 
} 
} 
</SourceCode><SourceCode lines="5" name="type.java">abstract public class type { 
public type ( ) { 
} 
} 
</SourceCode></SourceCode_List><Errors><Error tpye="抽象:繼承資料或動作"><Message>抽象類別須加上abstract關鍵字宣告類別。就像一般的父類別，其資料與動作可以由子類別繼承。抽象類別也扮演物件導向多型的重要角色，抽象類別變數可以承接不同的子類別物件，展現不同的行為。
例如，本程式Student類別，public String Sudent 不需要 String</Message><Linelist><line Begin="2" End="2" src="Student" /></Linelist></Error></Errors></ErrorList>