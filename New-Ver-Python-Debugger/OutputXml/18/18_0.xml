<ErrorList id="D:\Users\楊子霆\Desktop\Lesson\專題\擴增 修改版\正規化\18\18.xml">
	
<SourceCode_List><SourceCode lines="6" name="ChineseLetter.java">public class ChineseLetter extends Letter { 
ChineseLetter ( String title , String receiver , String content , String sender , String date ) { 
super ( title , receiver , content , sender , date ) ; 
} 
} 
</SourceCode><SourceCode lines="6" name="EnglishLetter.java">public class EnglishLetter extends Letter { 
EnglishLetter ( String title , String receiver , String content , String sender , String date ) { 
super ( title , receiver , content , sender , date ) ; 
} 
} 
</SourceCode><SourceCode lines="14" name="Envelop.java">public class Envelop { 
String senderAddr , receiverAddr ; 
Letter letter ; 
Envelop ( String senderAddr , String receiverAddr , Letter letter ) { 
this . senderAddr = senderAddr ; 
this . receiverAddr = receiverAddr ; 
this . letter = letter ; 
} 
void display ( ) { 
System . out . println ( "From: " + senderAddr + ", " + letter . sender ) ; 
System . out . println ( "To: " + receiverAddr + ", " + letter . receiver + " " + letter . title ) ; 
} 
} 
</SourceCode><SourceCode lines="35" name="Letter.java">abstract public class Letter { 
String title , receiver , content , sender , date ; 
Letter ( String title , String receiver , String content , String sender , String date ) { 
this . title = title ; 
this . receiver = receiver ; 
this . content = content ; 
this . sender = sender ; 
this . date = date ; 
} 
String getSender ( ) { 
return sender ; 
} 
String getReceiver ( ) { 
return receiver ; 
} 
String getDate ( ) { 
return date ; 
} 
void display ( int flage ) { 
if ( flage == 1 ) { 
System . out . println ( receiver + " " + title + ", 您好" ) ; 
System . out . println ( content ) ; 
System . out . println ( sender + " 敬上" ) ; 
System . out . println ( date ) ; 
} 
else { 
System . out . println ( "Dear " + receiver + " " + title ) ; 
System . out . println ( content ) ; 
System . out . println ( "Sincerely" ) ; 
System . out . println ( sender ) ; 
System . out . println ( date ) ; 
} 
} 
} 
</SourceCode><SourceCode lines="9" name="Test.java">public class Test { 
public static void main ( String [ ] args ) { 
Letter lt = new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) ; 
Envelop env = new Envelop ( "Taipei" , "Kaohsiung" , lt ) ; 
env . display ( ) ; 
lt . display ( 1 ) ; 
} 
} 
</SourceCode></SourceCode_List><Errors><Error tpye="抽象:不會分離變跟不變的部分"><Message>抽象動作是抽象類別裡面的物件動作，只宣告函式名稱以及參數列型態，沒有實質的函式內容。實際的函式內容則由子類別來實踐並加以覆寫，進而完成物件動作的多型功能。
使用抽象動作的覆寫機制，不需使用旗標方式來判斷以呼叫不同的動作。</Message><Linelist><line Begin="13" End="27" src="Letter" /><line Begin="6" End="6" src="Test" /></Linelist></Error><Error tpye="抽象:抽象動作"><Message>抽象動作是抽象類別裡面的物件動作，只宣告函式名稱以及參數列型態，沒有實質的函式內容。實際的函式內容則由子類別來實踐並加以覆寫，進而完成物件動作的多型功能。
使用抽象動作的覆寫機制，不需使用旗標方式來判斷以呼叫不同的動作。</Message><Linelist><line Begin="13" End="27" src="Letter" /><line Begin="6" End="6" src="Test" /></Linelist></Error><Error tpye="物件:不會使用物件之間的關係"><Message>Envelope擁有Letter的letter物件資料，Envelope物件可以直接呼叫Letter物件的物件動作去取得該動作回傳值。
System.out.println( "From: "+ senderAddr +", "+ letter.getSender());
System.out.println( "To: "+ receiverAddr +", "+ letter.getReceiver() +" " + letter.getTitle());</Message><Linelist><line Begin="9" End="10" src="Envelop" /></Linelist></Error></Errors></ErrorList>