<BOC> public class ChineseLetter extends Evaluation { <CR> public void Display ( ) { <CR> System . out . println ( getReceiver ( ) + <STRING> + title + <STRING> ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( getSender ( ) + <STRING> ) ; <CR> System . out . println ( getDate ( ) ) ; <CR> } <CR> public ChineseLetter ( String p 9 , String R 3 , String G 3 , String D , String F 6 ) { <CR> super ( p 9 , R 3 , G 3 , D , F 6 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class EnglishLetter extends Evaluation { <CR> public EnglishLetter ( String v 2 , String L 4 , String L 5 , String O 9 , String Z 3 ) { <CR> super ( v 2 , L 4 , L 5 , O 9 , Z 3 ) ; <CR> } <CR> public void Display ( ) { <CR> System . out . println ( <STRING> + title + <STRING> + getReceiver ( ) + <STRING> ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( getSender ( ) ) ; <CR> System . out . println ( getDate ( ) ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Envelop { <CR> Evaluation letter ; <CR> String senderAddr , receiverAddr ; <CR> void display ( ) { <CR> System . out . println ( <STRING> + senderAddr ) ; <CR> System . out . println ( <STRING> + receiverAddr ) ; <CR> letter . Display ( ) ; <CR> } <CR> public Envelop ( String w 2 , String y 5 , Evaluation V 7 ) { <CR> this . senderAddr = w 2 ; <CR> this . receiverAddr = y 5 ; <CR> this . letter = V 7 ; <CR> } <CR> public static void main ( String [ ] c 1 ) { <CR> Evaluation B 7 = new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Envelop g 9 = new Envelop ( <STRING> , <STRING> , B 7 ) ; <CR> g 9 . display ( ) ; <CR> } <CR> } <CR> <EOC> <BOC> abstract public class Evaluation { <CR> public String getSender ( ) { <CR> return sender ; <CR> } <CR> abstract protected void Display ( ) ; <CR> public String getReceiver ( ) { <CR> return receiver ; <CR> } <CR> public Evaluation ( String H 5 , String U 0 , String K 0 , String q 0 , String P 5 ) { <CR> this . title = H 5 ; <CR> this . receiver = U 0 ; <CR> this . content = K 0 ; <CR> this . sender = q 0 ; <CR> this . date = P 5 ; <CR> } <CR> public String getDate ( ) { <CR> return date ; <CR> } <CR> protected String title , receiver , content , sender , date ; <CR> } <CR> <EOC> <BOC> public class Letter implements Comparable { <CR> public void display ( int P 0 ) { <CR> list [ P 0 ] . Display ( ) ; <CR> } <CR> public static Evaluation [ ] list = { new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) , new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) , new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) } ; <CR> public static void main ( String [ ] z 3 ) { <CR> int P 0 ; <CR> for ( P 0 = list . length - <NUM_INT> ; P 0 > = <NUM_INT> ; P 0 -- ) { <CR> int C 1 = P 0 ; <CR> Letter Z 1 = new Letter ( P 0 ) ; <CR> Letter f 9 = new Letter ( C 1 - <NUM_INT> ) ; <CR> if ( Z 1 . compareTo ( f 9 ) == <NUM_INT> ) <CR> Z 1 . display ( P 0 ) ; <CR> } <CR> } <CR> private int x ; <CR> public int compareTo ( Object q 9 ) { <CR> Letter S 8 = ( Letter ) q 9 ; <CR> if ( this . x > S 8 . x ) <CR> return <NUM_INT> ; <CR> else <CR> return - <NUM_INT> ; <CR> } <CR> Letter ( int Y 4 ) { <CR> this . x = Y 4 ; <CR> } <CR> } <CR> <EOC>