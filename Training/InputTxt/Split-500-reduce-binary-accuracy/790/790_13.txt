<BOC> abstract public class Evaluation { <CR> double getRate ( ) { <CR> return rate ; <CR> } <CR> public Evaluation ( String K 5 , String Y 5 , double d 7 , double o , String R 2 , String U 0 ) { <CR> this . stuno = K 5 ; <CR> this . name = Y 5 ; <CR> this . score = d 7 ; <CR> this . rate = o ; <CR> } <CR> protected String name ; <CR> protected String stuno ; <CR> double getScore ( ) { <CR> return score ; <CR> } <CR> protected double score , rate ; <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Exam extends Evaluation { <CR> void print ( ) { <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( <STRING> + stuno ) ; <CR> } <CR> public Exam ( String Q 7 , String O 9 , double y , double t 2 , String i 6 , String D 1 ) { <CR> super ( Q 7 , O 9 , y , t 2 , i 6 , D 1 ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Homework extends Evaluation { <CR> public Homework ( String Z 0 , String c , double z 2 , double d 1 , String I 4 , String S 5 ) { <CR> super ( Z 0 , c , z 2 , d 1 , I 4 , S 5 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Report extends Evaluation { <CR> public Report ( String I 2 , String M 0 , double Z 1 , double o 6 , String C 5 , String Z ) { <CR> super ( I 2 , M 0 , Z 1 , o 6 , C 5 , Z ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Test { <CR> public static void main ( String [ ] t 5 ) { <CR> int O 9 = <NUM_INT> ; <CR> String S 8 , p 1 ; <CR> double Z 9 , a 9 ; <CR> System . out . print ( <STRING> ) ; <CR> O 9 = scanner . nextInt ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> p 1 = scanner . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> S 8 = scanner . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> Z 9 = scanner . nextDouble ( ) ; <CR> scanner . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> a 9 = scanner . nextDouble ( ) ; <CR> scanner . nextLine ( ) ; <CR> if ( O 9 == <NUM_INT> ) { <CR> String U 3 , T 0 ; <CR> System . out . print ( <STRING> ) ; <CR> U 3 = scanner . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> T 0 = scanner . nextLine ( ) ; <CR> Evaluation x 1 = new Exam ( p 1 , S 8 , Z 9 , a 9 , U 3 , T 0 ) ; <CR> } <CR> if ( O 9 == <NUM_INT> ) { <CR> String v 6 , b 6 ; <CR> System . out . print ( <STRING> ) ; <CR> v 6 = scanner . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> b 6 = scanner . nextLine ( ) ; <CR> Evaluation x 1 = new Homework ( p 1 , S 8 , Z 9 , a 9 , v 6 , b 6 ) ; <CR> } <CR> if ( O 9 == <NUM_INT> ) { <CR> String p 5 , d 5 ; <CR> System . out . print ( <STRING> ) ; <CR> p 5 = scanner . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> d 5 = scanner . nextLine ( ) ; <CR> Evaluation x 1 = new Report ( p 1 , S 8 , Z 9 , a 9 , p 5 , d 5 ) ; <CR> } <CR> } <CR> static Scanner scanner = new Scanner ( System . in ) ; <CR> } <CR> <EOC>