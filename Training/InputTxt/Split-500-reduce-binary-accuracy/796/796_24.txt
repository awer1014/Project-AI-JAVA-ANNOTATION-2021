<BOC> abstract public class Evaluation { <CR> protected Keeper keeper ; <CR> private static int count ; <CR> protected String pid , name , type ; <CR> public static int getcount ( ) { <CR> return count ; <CR> } <CR> public Evaluation ( String F 7 , String N 5 , String l 6 , Keeper G 7 ) { <CR> pid = F 7 ; <CR> name = N 5 ; <CR> type = l 6 ; <CR> count ++ ; <CR> keeper = G 7 ; <CR> } <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> public Exam ( String Y , String T 6 , String L 5 , Keeper E 6 ) { <CR> super ( Y , T 6 , L 5 , E 6 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class HomeWork extends Evaluation { <CR> public HomeWork ( String Y , String d 2 , String f 8 , Keeper F 7 ) { <CR> super ( Y , d 2 , f 8 , F 7 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Keeper { <CR> public Keeper ( String F 0 , String r 4 , String h 4 ) { <CR> id = r 4 ; <CR> tel = h 4 ; <CR> name = F 0 ; <CR> } <CR> private String id , tel , name ; <CR> public void display ( ) { <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + id ) ; <CR> System . out . println ( <STRING> + tel ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Report extends Evaluation { <CR> public Report ( String X 5 , String k 0 , String y 1 , Keeper X 4 ) { <CR> super ( X 5 , k 0 , y 1 , X 4 ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] H 4 ) { <CR> Scanner X 5 = new Scanner ( System . in ) ; <CR> boolean K 8 = <STRING> ; <CR> while ( K 8 ) { <CR> System . out . print ( <STRING> ) ; <CR> String R 7 = X 5 . nextLine ( ) ; <CR> if ( R 7 . equals ( <STRING> ) ) { <CR> K 8 = <STRING> ; <CR> break ; <CR> } <CR> System . out . print ( <STRING> ) ; <CR> String Q 6 = X 5 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String V 6 = X 5 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String v 1 = X 5 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String s 5 = X 5 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String I 9 = X 5 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String t 7 = X 5 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> Keeper R 3 = new Keeper ( v 1 , s 5 , I 9 ) ; <CR> Evaluation I 8 ; <CR> if ( R 7 . equals ( <STRING> ) ) <CR> I 8 = new Exam ( Q 6 , V 6 , R 7 , R 3 ) ; <CR> else if ( R 7 . equals ( <STRING> ) ) <CR> I 8 = new HomeWork ( Q 6 , V 6 , R 7 , R 3 ) ; <CR> else <CR> I 8 = new Report ( Q 6 , V 6 , R 7 , R 3 ) ; <CR> System . out . println ( <STRING> ) ; <CR> } <CR> } <CR> } <CR> <EOC>