<BOC> abstract public class Evaluation { <CR> protected Keeper keeper ; <CR> private static int count ; <CR> public static int getcount ( ) { <CR> return count ; <CR> } <CR> public Evaluation ( String B 4 , String P 5 , String I 2 , Keeper k 1 ) { <CR> pid = B 4 ; <CR> name = P 5 ; <CR> type = I 2 ; <CR> count ++ ; <CR> keeper = k 1 ; <CR> } <CR> protected String pid , name , type ; <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> public Exam ( String Q 6 , String Y 1 , String U 3 , Keeper v 8 ) { <CR> super ( Q 6 , Y 1 , U 3 , v 8 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class HomeWork extends Evaluation { <CR> public HomeWork ( String T 2 , String a 1 , String A 7 , Keeper Q 4 ) { <CR> super ( T 2 , a 1 , A 7 , Q 4 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Keeper { <CR> public void display ( ) { <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + id ) ; <CR> System . out . println ( <STRING> + tel ) ; <CR> } <CR> public Keeper ( String U , String Q 2 , String p 9 ) { <CR> id = Q 2 ; <CR> tel = p 9 ; <CR> name = U ; <CR> } <CR> private String id , tel , name ; <CR> } <CR> <EOC> <BOC> public class Report extends Evaluation { <CR> public Report ( String f 1 , String n 4 , String u , Keeper K 7 ) { <CR> super ( f 1 , n 4 , u , K 7 ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] v ) { <CR> Scanner s 4 = new Scanner ( System . in ) ; <CR> boolean K 4 = <STRING> ; <CR> while ( K 4 ) { <CR> System . out . print ( <STRING> ) ; <CR> String o = s 4 . nextLine ( ) ; <CR> if ( o . equals ( <STRING> ) ) { <CR> K 4 = <STRING> ; <CR> break ; <CR> } <CR> System . out . print ( <STRING> ) ; <CR> String k 2 = s 4 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String r 6 = s 4 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String n 2 = s 4 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String U 4 = s 4 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String H 3 = s 4 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String m 3 = s 4 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> Keeper r 1 = new Keeper ( n 2 , U 4 , H 3 ) ; <CR> Evaluation f 5 ; <CR> if ( o . equals ( <STRING> ) ) <CR> f 5 = new Exam ( k 2 , r 6 , o , r 1 ) ; <CR> else if ( o . equals ( <STRING> ) ) <CR> f 5 = new HomeWork ( k 2 , r 6 , o , r 1 ) ; <CR> else <CR> f 5 = new Report ( k 2 , r 6 , o , r 1 ) ; <CR> System . out . println ( <STRING> ) ; <CR> } <CR> } <CR> } <CR> <EOC>