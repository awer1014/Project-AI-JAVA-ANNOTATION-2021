<BOC> abstract public class Evaluation { <CR> private static int count ; <CR> protected String pid , name , type ; <CR> public static int getcount ( ) { <CR> return count ; <CR> } <CR> public Evaluation ( String w 4 , String I 4 , String X 0 , Keeper h 2 ) { <CR> pid = w 4 ; <CR> name = I 4 ; <CR> type = X 0 ; <CR> count ++ ; <CR> keeper = h 2 ; <CR> } <CR> protected Keeper keeper ; <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> public Exam ( String N 3 , String H 3 , String S 6 , Keeper l 1 ) { <CR> super ( N 3 , H 3 , S 6 , l 1 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class HomeWork extends Evaluation { <CR> public HomeWork ( String O 0 , String f 9 , String V 1 , Keeper e 4 ) { <CR> super ( O 0 , f 9 , V 1 , e 4 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Keeper { <CR> private String id , tel , name ; <CR> public Keeper ( String U 8 , String V 4 , String y 3 ) { <CR> id = V 4 ; <CR> tel = y 3 ; <CR> name = U 8 ; <CR> } <CR> public void display ( ) { <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + id ) ; <CR> System . out . println ( <STRING> + tel ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Report extends Evaluation { <CR> public Report ( String B 0 , String z 3 , String V 6 , Keeper P 0 ) { <CR> super ( B 0 , z 3 , V 6 , P 0 ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] Z 5 ) { <CR> Scanner C 6 = new Scanner ( System . in ) ; <CR> boolean r 1 = <STRING> ; <CR> while ( r 1 ) { <CR> System . out . print ( <STRING> ) ; <CR> String u = C 6 . nextLine ( ) ; <CR> if ( u . equals ( <STRING> ) ) { <CR> r 1 = <STRING> ; <CR> break ; <CR> } <CR> System . out . print ( <STRING> ) ; <CR> String e 9 = C 6 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String i = C 6 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String M 8 = C 6 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String s 0 = C 6 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String T 9 = C 6 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String h 8 = C 6 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> Keeper k 8 = new Keeper ( M 8 , s 0 , T 9 ) ; <CR> Evaluation E 8 ; <CR> if ( u . equals ( <STRING> ) ) <CR> E 8 = new Exam ( e 9 , i , u , k 8 ) ; <CR> else if ( u . equals ( <STRING> ) ) <CR> E 8 = new HomeWork ( e 9 , i , u , k 8 ) ; <CR> else <CR> E 8 = new Report ( e 9 , i , u , k 8 ) ; <CR> System . out . println ( <STRING> ) ; <CR> } <CR> } <CR> } <CR> <EOC>