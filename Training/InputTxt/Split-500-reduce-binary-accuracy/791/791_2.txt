<BOC> abstract public class Evaluation { <CR> public Evaluation ( String b 4 , String s 9 , String z 5 , double Q , double j 1 ) { <CR> sid = b 4 ; <CR> name = s 9 ; <CR> type = z 5 ; <CR> this . grade = Q ; <CR> this . gradepc = j 1 ; <CR> } <CR> private String sid , name , type ; <CR> abstract public void printa ( ) ; <CR> public void print ( ) { <CR> System . out . println ( <STRING> + type ) ; <CR> System . out . println ( <STRING> + sid ) ; <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + grade ) ; <CR> System . out . println ( <STRING> + gradepc ) ; <CR> } <CR> protected double grade , gradepc ; <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> public void printa ( ) { <CR> System . out . println ( <STRING> + date ) ; <CR> System . out . println ( <STRING> + range ) ; <CR> } <CR> String date ; <CR> public Exam ( String T 6 , String u 3 , String z 1 , double N 8 , double c 7 ) { <CR> super ( T 6 , u 3 , z 1 , N 8 , c 7 ) ; <CR> } <CR> String range ; <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] t 4 ) { <CR> Scanner k 6 = new Scanner ( System . in ) ; <CR> System . out . println ( <STRING> ) ; <CR> int G 8 = <NUM_INT> ; <CR> do { <CR> G 8 = k 6 . nextInt ( ) ; <CR> } <CR> while ( G 8 > <NUM_INT> || G 8 < <NUM_INT> ) ; <CR> return mapEvaluation ( G 8 ) ; <CR> } <CR> static Evaluation mapEvaluation ( int G 8 ) { <CR> Evaluation Y 1 = <STRING> ; <CR> switch ( G 8 ) { <CR> case <NUM_INT> : <CR> Y 1 = new Exam ( <STRING> ) ; <CR> break ; <CR> } <CR> } <CR> } <CR> <EOC>