<BOC> public class ChineseLetter extends Letter { <CR> ChineseLetter ( String v 6 , String L 8 , String N 2 , String p 3 , String k 6 ) { <CR> super ( v 6 , L 8 , N 2 , p 3 , k 6 ) ; <CR> } <CR> void display ( ) { <CR> System . out . println ( receiver + <STRING> + title + <STRING> ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( sender + <STRING> ) ; <CR> System . out . println ( date ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class EnglishLetter extends Letter { <CR> void display ( ) { <CR> System . out . println ( <STRING> + receiver + <STRING> + title ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( sender ) ; <CR> System . out . println ( date ) ; <CR> } <CR> EnglishLetter ( String p 4 , String P , String K 0 , String z 6 , String y 5 ) { <CR> super ( p 4 , P , K 0 , z 6 , y 5 ) ; <CR> } <CR> } <CR> <EOC> <BOC> abstract public class Letter implements Comparable { <CR> Letter ( String M 1 , String k 2 , String i 3 , String x 5 , String C 7 ) { <CR> this . title = M 1 ; <CR> this . receiver = k 2 ; <CR> this . content = i 3 ; <CR> this . sender = x 5 ; <CR> this . date = C 7 ; <CR> } <CR> String title , receiver , content , sender , date ; <CR> abstract void display ( ) ; <CR> String getSender ( ) { <CR> return sender ; <CR> } <CR> String getReceiver ( ) { <CR> return receiver ; <CR> } <CR> String getDate ( ) { <CR> return date ; <CR> } <CR> public int compareTo ( Object w 7 ) { <CR> Letter M = ( Letter ) w 7 ; <CR> if ( this . getDate ( ) . compareTo ( M . getDate ( ) ) < <NUM_INT> ) { <CR> return <NUM_INT> ; <CR> } <CR> else if ( this . getDate ( ) . compareTo ( M . getDate ( ) ) > <NUM_INT> ) { <CR> return - <NUM_INT> ; <CR> } <CR> else { <CR> return <NUM_INT> ; <CR> } <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Test { <CR> public static void main ( String [ ] q 0 ) { <CR> Letter P = new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter V 7 = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter V 6 = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> ArrayList R 9 = { P , V 7 , V 6 } ; <CR> for ( Letter S 7 : R 9 ) <CR> S 7 . display ( ) ; <CR> } <CR> } <CR> <EOC>