<BOC> public class ChineseLetter extends Letter { <CR> ChineseLetter ( String M 0 , String p 9 , String r 4 , String F 7 , String P ) { <CR> super ( M 0 , p 9 , r 4 , F 7 , P ) ; <CR> } <CR> void display ( ) { <CR> System . out . println ( receiver + <STRING> + title + <STRING> ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( sender + <STRING> ) ; <CR> System . out . println ( date ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class EnglishLetter extends Letter { <CR> EnglishLetter ( String m , String p 3 , String r 9 , String w 7 , String l 4 ) { <CR> super ( m , p 3 , r 9 , w 7 , l 4 ) ; <CR> } <CR> void display ( ) { <CR> System . out . println ( <STRING> + receiver + <STRING> + title ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( sender ) ; <CR> System . out . println ( date ) ; <CR> } <CR> } <CR> <EOC> <BOC> abstract public class Letter implements Comparable { <CR> String getDate ( ) { <CR> return date ; <CR> } <CR> public int compareTo ( Object X 0 ) { <CR> Letter l 0 = ( Letter ) X 0 ; <CR> if ( this . getDate ( ) . compareTo ( l 0 . getDate ( ) ) < <NUM_INT> ) { <CR> return <NUM_INT> ; <CR> } <CR> else if ( this . getDate ( ) . compareTo ( l 0 . getDate ( ) ) > <NUM_INT> ) { <CR> return - <NUM_INT> ; <CR> } <CR> else { <CR> return <NUM_INT> ; <CR> } <CR> } <CR> Letter ( String g 2 , String A , String f 1 , String H 8 , String C 0 ) { <CR> this . title = g 2 ; <CR> this . receiver = A ; <CR> this . content = f 1 ; <CR> this . sender = H 8 ; <CR> this . date = C 0 ; <CR> } <CR> abstract void display ( ) ; <CR> String getSender ( ) { <CR> return sender ; <CR> } <CR> String title , receiver , content , sender , date ; <CR> String getReceiver ( ) { <CR> return receiver ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Test { <CR> public static void main ( String [ ] L 6 ) { <CR> Letter u 3 = new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter b 0 = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter s 1 = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> ArrayList u = { u 3 , b 0 , s 1 } ; <CR> for ( Letter s 7 : u ) <CR> s 7 . display ( ) ; <CR> } <CR> } <CR> <EOC>