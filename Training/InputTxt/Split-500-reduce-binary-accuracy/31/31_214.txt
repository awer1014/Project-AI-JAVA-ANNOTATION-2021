<BOC> public class ChineseLetter extends Letter { <CR> void display ( ) { <CR> System . out . println ( receiver + <STRING> + title + <STRING> ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( sender + <STRING> ) ; <CR> System . out . println ( date ) ; <CR> } <CR> ChineseLetter ( String V 1 , String C 5 , String K 7 , String p 6 , String F 3 ) { <CR> super ( V 1 , C 5 , K 7 , p 6 , F 3 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class EnglishLetter extends Letter { <CR> void display ( ) { <CR> System . out . println ( <STRING> + receiver + <STRING> + title ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( sender ) ; <CR> System . out . println ( date ) ; <CR> } <CR> EnglishLetter ( String X 8 , String n 2 , String l 2 , String H , String h 9 ) { <CR> super ( X 8 , n 2 , l 2 , H , h 9 ) ; <CR> } <CR> } <CR> <EOC> <BOC> abstract public class Letter implements Comparable { <CR> Letter ( String u 7 , String v 5 , String F 8 , String m 2 , String v ) { <CR> this . title = u 7 ; <CR> this . receiver = v 5 ; <CR> this . content = F 8 ; <CR> this . sender = m 2 ; <CR> this . date = v ; <CR> } <CR> String getReceiver ( ) { <CR> return receiver ; <CR> } <CR> String getDate ( ) { <CR> return date ; <CR> } <CR> String getSender ( ) { <CR> return sender ; <CR> } <CR> public int compareTo ( Object d ) { <CR> Letter D 9 = ( Letter ) d ; <CR> if ( this . getDate ( ) . compareTo ( D 9 . getDate ( ) ) < <NUM_INT> ) { <CR> return <NUM_INT> ; <CR> } <CR> else if ( this . getDate ( ) . compareTo ( D 9 . getDate ( ) ) > <NUM_INT> ) { <CR> return - <NUM_INT> ; <CR> } <CR> else { <CR> return <NUM_INT> ; <CR> } <CR> } <CR> String title , receiver , content , sender , date ; <CR> abstract void display ( ) ; <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Test { <CR> public static void main ( String [ ] M 2 ) { <CR> Letter R 5 = new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter B 2 = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter M 8 = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> ArrayList t 2 = { R 5 , B 2 , M 8 } ; <CR> for ( Letter f 1 : t 2 ) <CR> f 1 . display ( ) ; <CR> } <CR> } <CR> <EOC>