<BOC> abstract public class Evaluation { <CR> private String kind ; <CR> public Evaluation ( String a 5 ) { <CR> kind = a 5 ; <CR> } <CR> abstract public void ask ( ) ; <CR> public void print ( ) { <CR> String R 3 = <STRING> ; <CR> if ( kind . equals ( <STRING> ) ) <CR> R 3 += <STRING> ; <CR> else if ( kind . equals ( <STRING> ) ) <CR> R 3 += <STRING> ; <CR> else if ( kind . equals ( <STRING> ) ) <CR> R 3 += <STRING> ; <CR> System . out . println ( <STRING> + R 3 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> public Exam ( String b 2 , String d 4 ) { <CR> super ( b 2 , d 4 ) ; <CR> } <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class HomeWork extends Evaluation { <CR> public HomeWork ( String o 5 , String R 7 ) { <CR> super ( o 5 , R 7 ) ; <CR> } <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Report extends Evaluation { <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> public Report ( String a 5 , String i 5 ) { <CR> super ( a 5 , i 5 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Student { <CR> public void print ( ) { <CR> System . out . println ( <STRING> + id ) ; <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + score ) ; <CR> System . out . println ( <STRING> + prop ) ; <CR> } <CR> public Student ( String j 1 , String B 1 , String S 2 , String s ) { <CR> id = j 1 ; <CR> name = B 1 ; <CR> score = S 2 ; <CR> prop = s ; <CR> } <CR> private String id , name , score , prop ; <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] h 4 ) { <CR> Scanner l 7 = new Scanner ( System . in ) ; <CR> boolean i 6 = <STRING> ; <CR> while ( i 6 ) { <CR> System . out . println ( <STRING> ) ; <CR> String B 4 = l 7 . nextLine ( ) ; <CR> if ( B 4 . equals ( <STRING> ) ) { <CR> i 6 = <STRING> ; <CR> break ; <CR> } <CR> System . out . println ( <STRING> ) ; <CR> String r 3 = l 7 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String v 6 = l 7 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String O 2 = l 7 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String A 3 = l 7 . nextLine ( ) ; <CR> Student H 3 = new Student ( r 3 , v 6 , O 2 , A 3 ) ; <CR> Evaluation c = new Evaluation ( B 4 ) ; <CR> Evaluation J 4 = <STRING> ; <CR> String D 7 , l 2 ; <CR> if ( B 4 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> D 7 = l 7 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> l 2 = l 7 . nextLine ( ) ; <CR> J 4 = new Exam ( D 7 , l 2 ) ; <CR> } <CR> else if ( B 4 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> D 7 = l 7 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> l 2 = l 7 . nextLine ( ) ; <CR> J 4 = new HomeWork ( D 7 , l 2 ) ; <CR> } <CR> else if ( B 4 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> D 7 = l 7 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> l 2 = l 7 . nextLine ( ) ; <CR> J 4 = new Report ( D 7 , l 2 ) ; <CR> } <CR> System . out . println ( <STRING> ) ; <CR> if ( J 4 ! = <STRING> ) { <CR> c . print ( ) ; <CR> H 3 . print ( ) ; <CR> J 4 . ask ( ) ; <CR> } <CR> System . out . print ( <STRING> ) ; <CR> } <CR> } <CR> } <CR> <EOC>