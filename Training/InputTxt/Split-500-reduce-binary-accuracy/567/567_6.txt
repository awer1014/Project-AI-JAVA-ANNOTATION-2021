<BOC> public class ChineseLetter extends Letter { <CR> ChineseLetter ( String n , String J 1 , String k 6 , String E 6 , String Z 7 ) { <CR> super ( n , J 1 , k 6 , E 6 , Z 7 ) ; <CR> } <CR> public void display ( ) { <CR> System . out . print ( receiver + title + <STRING> + <STRING> + <STRING> ) ; <CR> System . out . print ( content + <STRING> ) ; <CR> System . out . print ( sender + <STRING> + <STRING> + <STRING> ) ; <CR> System . out . print ( date + <STRING> ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class EnglishLetter extends Letter { <CR> EnglishLetter ( String N 8 , String j 8 , String k 9 , String X 1 , String X 4 ) { <CR> super ( N 8 , j 8 , k 9 , X 1 , X 4 ) ; <CR> } <CR> public void display ( ) { <CR> System . out . print ( <STRING> + <STRING> + title + <STRING> + receiver + <STRING> ) ; <CR> System . out . print ( content + <STRING> ) ; <CR> System . out . print ( <STRING> + <STRING> ) ; <CR> System . out . print ( sender + <STRING> ) ; <CR> System . out . print ( date + <STRING> ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Envelop { <CR> void display ( ) { <CR> System . out . print ( <STRING> + senderAddr + <STRING> + <STRING> + letter . sender + <STRING> ) ; <CR> System . out . print ( <STRING> + <STRING> + receiverAddr + <STRING> + letter . receiver + <STRING> + letter . title + <STRING> + <STRING> ) ; <CR> System . out . print ( <STRING> + <STRING> ) ; <CR> letter . display ( ) ; <CR> } <CR> String senderAddr ; <CR> Letter letter ; <CR> Envelop ( String X , String P 5 , Letter c 4 ) { <CR> this . senderAddr = X ; <CR> this . receiverAddr = P 5 ; <CR> this . letter = c 4 ; <CR> } <CR> String receiverAddr ; <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> abstract public class Letter implements Comparable { <CR> Letter ( String a 1 , String q 1 , String A , String x 9 , String X 8 ) { <CR> this . title = a 1 ; <CR> this . receiver = q 1 ; <CR> this . content = A ; <CR> this . sender = x 9 ; <CR> this . date = X 8 ; <CR> } <CR> String getReceiver ( ) { <CR> return receiver ; <CR> } <CR> String getDate ( ) { <CR> return date ; <CR> } <CR> abstract protected void display ( ) ; <CR> int valueOf ( String p 6 ) { <CR> int G 8 = <NUM_INT> ; <CR> for ( int y 5 = <NUM_INT> ; y 5 < p 6 . length ( ) ; y 5 ++ ) { <CR> char f 9 = p 6 . charAt ( y 5 ) ; <CR> G 8 = G 8 * <NUM_INT> + f 9 - <STRING> ; <CR> } <CR> return G 8 ; <CR> } <CR> String title , receiver , content , sender , date ; <CR> String getSender ( ) { <CR> return sender ; <CR> } <CR> public int compareTo ( Object H 9 ) { <CR> Letter j 5 = ( Letter ) H 9 ; <CR> same = <STRING> ; <CR> if ( valueOf ( this . date . substring ( <NUM_INT> , <NUM_INT> ) ) > valueOf ( o . date . substring ( <NUM_INT> , <NUM_INT> ) ) ) <CR> return <NUM_INT> ; <CR> else if ( valueOf ( this . date . substring ( <NUM_INT> , <NUM_INT> ) ) == valueOf ( o . date . substring ( <NUM_INT> , <NUM_INT> ) ) ) { <CR> return <NUM_INT> ; <CR> } <CR> else <CR> return - <NUM_INT> ; <CR> } <CR> boolean same ; <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> import java . util . Arrays ; <CR> public class test { <CR> public static void main ( String [ ] L 3 ) { <CR> Letter [ ] S 2 = { new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) , new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) , new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) } ; <CR> Arrays . sort ( S 2 ) ; <CR> for ( int c = <NUM_INT> ; c < <NUM_INT> ; c ++ ) <CR> S 2 [ c ] . display ( ) ; <CR> } <CR> } <CR> <EOC>