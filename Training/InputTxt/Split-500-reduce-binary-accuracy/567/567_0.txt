<BOC> public class ChineseLetter extends Letter { <CR> public void display ( ) { <CR> System . out . print ( receiver + title + <STRING> + <STRING> + <STRING> ) ; <CR> System . out . print ( content + <STRING> ) ; <CR> System . out . print ( sender + <STRING> + <STRING> + <STRING> ) ; <CR> System . out . print ( date + <STRING> ) ; <CR> } <CR> ChineseLetter ( String h 5 , String T 2 , String K 2 , String G , String g 4 ) { <CR> super ( h 5 , T 2 , K 2 , G , g 4 ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class EnglishLetter extends Letter { <CR> EnglishLetter ( String p , String o 8 , String E 6 , String U 9 , String h 4 ) { <CR> super ( p , o 8 , E 6 , U 9 , h 4 ) ; <CR> } <CR> public void display ( ) { <CR> System . out . print ( <STRING> + <STRING> + title + <STRING> + receiver + <STRING> ) ; <CR> System . out . print ( content + <STRING> ) ; <CR> System . out . print ( <STRING> + <STRING> ) ; <CR> System . out . print ( sender + <STRING> ) ; <CR> System . out . print ( date + <STRING> ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Envelop { <CR> String receiverAddr ; <CR> Envelop ( String e 2 , String J 1 , Letter U 4 ) { <CR> this . senderAddr = e 2 ; <CR> this . receiverAddr = J 1 ; <CR> this . letter = U 4 ; <CR> } <CR> void display ( ) { <CR> System . out . print ( <STRING> + senderAddr + <STRING> + <STRING> + letter . sender + <STRING> ) ; <CR> System . out . print ( <STRING> + <STRING> + receiverAddr + <STRING> + letter . receiver + <STRING> + letter . title + <STRING> + <STRING> ) ; <CR> System . out . print ( <STRING> + <STRING> ) ; <CR> letter . display ( ) ; <CR> } <CR> Letter letter ; <CR> String senderAddr ; <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> abstract public class Letter implements Comparable { <CR> boolean same ; <CR> abstract protected void display ( ) ; <CR> String getReceiver ( ) { <CR> return receiver ; <CR> } <CR> public int compareTo ( Object J 7 ) { <CR> Letter x 3 = ( Letter ) J 7 ; <CR> same = <STRING> ; <CR> if ( valueOf ( this . date . substring ( <NUM_INT> , <NUM_INT> ) ) > valueOf ( o . date . substring ( <NUM_INT> , <NUM_INT> ) ) ) <CR> return <NUM_INT> ; <CR> else if ( valueOf ( this . date . substring ( <NUM_INT> , <NUM_INT> ) ) == valueOf ( o . date . substring ( <NUM_INT> , <NUM_INT> ) ) ) { <CR> return <NUM_INT> ; <CR> } <CR> else <CR> return - <NUM_INT> ; <CR> } <CR> String getSender ( ) { <CR> return sender ; <CR> } <CR> String getDate ( ) { <CR> return date ; <CR> } <CR> String title , receiver , content , sender , date ; <CR> int valueOf ( String F 1 ) { <CR> int B 1 = <NUM_INT> ; <CR> for ( int H 8 = <NUM_INT> ; H 8 < F 1 . length ( ) ; H 8 ++ ) { <CR> char i 9 = F 1 . charAt ( H 8 ) ; <CR> B 1 = B 1 * <NUM_INT> + i 9 - <STRING> ; <CR> } <CR> return B 1 ; <CR> } <CR> Letter ( String J 3 , String K 4 , String y , String c 9 , String H 2 ) { <CR> this . title = J 3 ; <CR> this . receiver = K 4 ; <CR> this . content = y ; <CR> this . sender = c 9 ; <CR> this . date = H 2 ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> import java . util . Arrays ; <CR> public class test { <CR> public static void main ( String [ ] S 4 ) { <CR> Letter [ ] r 8 = { new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) , new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) , new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) } ; <CR> Arrays . sort ( r 8 ) ; <CR> for ( int T 1 = <NUM_INT> ; T 1 < <NUM_INT> ; T 1 ++ ) <CR> r 8 [ T 1 ] . display ( ) ; <CR> } <CR> } <CR> <EOC>