<BOC> public class ChineseLetter extends Letter { <CR> ChineseLetter ( String a 4 , String M , String b 3 , String Y 6 , String O ) { <CR> super ( a 4 , M , b 3 , Y 6 , O ) ; <CR> } <CR> public void display ( ) { <CR> System . out . print ( receiver + title + <STRING> + <STRING> + <STRING> ) ; <CR> System . out . print ( content + <STRING> ) ; <CR> System . out . print ( sender + <STRING> + <STRING> + <STRING> ) ; <CR> System . out . print ( date + <STRING> ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class EnglishLetter extends Letter { <CR> public void display ( ) { <CR> System . out . print ( <STRING> + <STRING> + title + <STRING> + receiver + <STRING> ) ; <CR> System . out . print ( content + <STRING> ) ; <CR> System . out . print ( <STRING> + <STRING> ) ; <CR> System . out . print ( sender + <STRING> ) ; <CR> System . out . print ( date + <STRING> ) ; <CR> } <CR> EnglishLetter ( String H 8 , String q 9 , String i , String X 2 , String z 0 ) { <CR> super ( H 8 , q 9 , i , X 2 , z 0 ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Envelop { <CR> Envelop ( String b 8 , String x 9 , Letter k 0 ) { <CR> this . senderAddr = b 8 ; <CR> this . receiverAddr = x 9 ; <CR> this . letter = k 0 ; <CR> } <CR> String receiverAddr ; <CR> String senderAddr ; <CR> Letter letter ; <CR> void display ( ) { <CR> System . out . print ( <STRING> + senderAddr + <STRING> + <STRING> + letter . sender + <STRING> ) ; <CR> System . out . print ( <STRING> + <STRING> + receiverAddr + <STRING> + letter . receiver + <STRING> + letter . title + <STRING> + <STRING> ) ; <CR> System . out . print ( <STRING> + <STRING> ) ; <CR> letter . display ( ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> abstract public class Letter implements Comparable { <CR> String title , receiver , content , sender , date ; <CR> abstract protected void display ( ) ; <CR> int valueOf ( String s 0 ) { <CR> int T = <NUM_INT> ; <CR> for ( int L 8 = <NUM_INT> ; L 8 < s 0 . length ( ) ; L 8 ++ ) { <CR> char Z 9 = s 0 . charAt ( L 8 ) ; <CR> T = T * <NUM_INT> + Z 9 - <STRING> ; <CR> } <CR> return T ; <CR> } <CR> String getSender ( ) { <CR> return sender ; <CR> } <CR> String getDate ( ) { <CR> return date ; <CR> } <CR> String getReceiver ( ) { <CR> return receiver ; <CR> } <CR> public int compareTo ( Object r 4 ) { <CR> Letter M 1 = ( Letter ) r 4 ; <CR> same = <STRING> ; <CR> if ( valueOf ( this . date . substring ( <NUM_INT> , <NUM_INT> ) ) > valueOf ( o . date . substring ( <NUM_INT> , <NUM_INT> ) ) ) <CR> return <NUM_INT> ; <CR> else if ( valueOf ( this . date . substring ( <NUM_INT> , <NUM_INT> ) ) == valueOf ( o . date . substring ( <NUM_INT> , <NUM_INT> ) ) ) { <CR> return <NUM_INT> ; <CR> } <CR> else <CR> return - <NUM_INT> ; <CR> } <CR> Letter ( String T 5 , String N 2 , String O 5 , String v , String w 2 ) { <CR> this . title = T 5 ; <CR> this . receiver = N 2 ; <CR> this . content = O 5 ; <CR> this . sender = v ; <CR> this . date = w 2 ; <CR> } <CR> boolean same ; <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> import java . util . Arrays ; <CR> public class test { <CR> public static void main ( String [ ] e 1 ) { <CR> Letter [ ] V 7 = { new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) , new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) , new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) } ; <CR> Arrays . sort ( V 7 ) ; <CR> for ( int s 6 = <NUM_INT> ; s 6 < <NUM_INT> ; s 6 ++ ) <CR> V 7 [ s 6 ] . display ( ) ; <CR> } <CR> } <CR> <EOC>