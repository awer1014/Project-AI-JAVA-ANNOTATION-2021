 <BOC> public class ChineseLetter extends Letter {  <CR> private String title ;  <CR> private String receiver ;  <CR> private String content ;  <CR> private String sender ;  <CR> private String date ;  <CR> ChineseLetter ( String title , String receiver , String content , String sender , String date ) {  <CR> this . title = title ;  <CR> this . receiver = receiver ;  <CR> this . content = content ;  <CR> this . sender = sender ;  <CR> this . date = date ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . println ( receiver + " " + title + ", 您好\n" + content + "\n" + sender + " 敬上\n" + date ) ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String getTitle ( ) {  <CR> return title ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class EnglishLetter extends Letter {  <CR> private String title ;  <CR> private String receiver ;  <CR> private String content ;  <CR> private String sender ;  <CR> private String date ;  <CR> EnglishLetter ( String title , String receiver , String content , String sender , String date ) {  <CR> this . title = title ;  <CR> this . receiver = receiver ;  <CR> this . content = content ;  <CR> this . sender = sender ;  <CR> this . date = date ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . println ( "Dear " + title + " " + receiver + ",\n" + content + "\nSincerely\n" + sender + "\n" + date ) ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String getTitle ( ) {  <CR> return title ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . Date ;  <CR> import java . text . * ;  <CR> abstract public class Letter implements Comparable {  <CR> abstract void display ( ) ;  <CR> abstract String getSender ( ) ;  <CR> abstract String getReceiver ( ) ;  <CR> abstract String getTitle ( ) ;  <CR> abstract String getDate ( ) ;  <CR> private Date thisd , objd ;  <CR> public void inputDateTime ( Letter obj ) {  <CR> try {  <CR> SimpleDateFormat formatter = new SimpleDateFormat ( "yyyy/MM/dd" ) ;  <CR> thisd = formatter . parse ( this . getDate ( ) ) ;  <CR> objd = formatter . parse ( obj . getDate ( ) ) ;  <CR> }  <CR> catch ( ParseException e ) {  <CR> }  <CR> }  <CR> @ Override ;  <CR> public int compareTo ( Object o ) {  <CR> Letter obj = ( Letter ) o ;  <CR> inputDateTime ( obj ) ;  <CR> if ( thisd . getTime ( ) < objd . getTime ( ) ) {  <CR> return 1 ;  <CR> }  <CR> else if ( thisd . getTime ( ) > objd . getTime ( ) ) {  <CR> return - 1 ;  <CR> }  <CR> else return 0 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . Arrays ;  <CR> public class Test {  <CR> public static void main ( ) {  <CR> Letter [ ] list = {  <CR> new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/01" ) }  <CR> ;  <CR> int min = 10000 ;  <CR> for ( int i = list . length - 1 ;  <CR> i >= 0 ;  <CR> i -- )  <CR> {  <CR> for ( int j = 0 ;  <CR> j < i ;  <CR> j ++ )  <CR> {  <CR> if ( list [ j ] . compareTo ( list [ j + 1 ] ) == - 1 ) {  <CR> Letter temp ;  <CR> temp = list [ j ] ;  <CR> list [ j ] = list [ j + 1 ] ;  <CR> list [ j + 1 ] = temp ;  <CR> }  <CR> }  <CR> }  <CR> for ( int i = 0 ;  <CR> i < list . length ;  <CR> i ++ )  <CR> {  <CR> list [ i ] . display ( ) ;  <CR> System . out . println ( "\n" ) ;  <CR> }  <CR> }  <CR> }  <CR>  <EOC> 