<BOC> abstract public class Evaluation { <CR> abstract public void printa ( ) ; <CR> public void print ( ) { <CR> System . out . println ( <STRING> + type ) ; <CR> System . out . println ( <STRING> + sid ) ; <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + grade ) ; <CR> System . out . println ( <STRING> + gradepc ) ; <CR> } <CR> private String sid , name , type ; <CR> protected double grade , gradepc ; <CR> public Evaluation ( String Q 8 , String F 2 , String X 3 , double o 1 , double o 5 ) { <CR> sid = Q 8 ; <CR> name = F 2 ; <CR> type = X 3 ; <CR> this . grade = o 1 ; <CR> this . gradepc = o 5 ; <CR> } <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> String date ; <CR> public void printa ( ) { <CR> System . out . println ( <STRING> + date ) ; <CR> System . out . println ( <STRING> + range ) ; <CR> } <CR> public Exam ( String b 9 , String d 3 , String x 7 , double J 7 , double U ) { <CR> super ( b 9 , d 3 , x 7 , J 7 , U ) ; <CR> } <CR> String range ; <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] O 2 ) { <CR> Scanner b 9 = new Scanner ( System . in ) ; <CR> System . out . println ( <STRING> ) ; <CR> int M 1 = <STRING> ; <CR> do <CR> { <CR> M 1 = b 9 . nextInt ( ) ; <CR> } <CR> while ( M 1 > <STRING> || M 1 < <STRING> ) ; <CR> return mapEvaluation ( M 1 ) ; <CR> } <CR> static Evaluation mapEvaluation ( int M 1 ) { <CR> Evaluation b 0 = <STRING> ; <CR> switch ( M 1 ) { <CR> case <STRING> : <CR> b 0 = new Exam ( <STRING> ) ; <CR> break ; <CR> } <CR> } <CR> } <CR> <EOC>