<BOC> abstract public class Evaluation { <CR> abstract public void printa ( ) ; <CR> protected double grade , gradepc ; <CR> public void print ( ) { <CR> System . out . println ( <STRING> + type ) ; <CR> System . out . println ( <STRING> + sid ) ; <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + grade ) ; <CR> System . out . println ( <STRING> + gradepc ) ; <CR> } <CR> public Evaluation ( String c 6 , String v , String x 9 , double o 6 , double a 7 ) { <CR> sid = c 6 ; <CR> name = v ; <CR> type = x 9 ; <CR> this . grade = o 6 ; <CR> this . gradepc = a 7 ; <CR> } <CR> private String sid , name , type ; <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> String range ; <CR> String date ; <CR> public Exam ( String x 5 , String T 1 , String H 0 , double T 5 , double f 4 ) { <CR> super ( x 5 , T 1 , H 0 , T 5 , f 4 ) ; <CR> } <CR> public void printa ( ) { <CR> System . out . println ( <STRING> + date ) ; <CR> System . out . println ( <STRING> + range ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] r 7 ) { <CR> Scanner h 6 = new Scanner ( System . in ) ; <CR> System . out . println ( <STRING> ) ; <CR> int s 1 = <STRING> ; <CR> do <CR> { <CR> s 1 = h 6 . nextInt ( ) ; <CR> } <CR> while ( s 1 > <STRING> || s 1 < <STRING> ) ; <CR> return mapEvaluation ( s 1 ) ; <CR> } <CR> static Evaluation mapEvaluation ( int s 1 ) { <CR> Evaluation G 9 = <STRING> ; <CR> switch ( s 1 ) { <CR> case <STRING> : <CR> G 9 = new Exam ( <STRING> ) ; <CR> break ; <CR> } <CR> } <CR> } <CR> <EOC>