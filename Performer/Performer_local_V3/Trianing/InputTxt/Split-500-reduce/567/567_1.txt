<BOC> public class ChineseLetter extends Letter { <CR> public void display ( ) { <CR> System . out . print ( receiver + title + <STRING> + <STRING> + <STRING> ) ; <CR> System . out . print ( content + <STRING> ) ; <CR> System . out . print ( sender + <STRING> + <STRING> + <STRING> ) ; <CR> System . out . print ( date + <STRING> ) ; <CR> } <CR> ChineseLetter ( String R 0 , String u 6 , String E 7 , String n 0 , String H 0 ) { <CR> super ( R 0 , u 6 , E 7 , n 0 , H 0 ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class EnglishLetter extends Letter { <CR> public void display ( ) { <CR> System . out . print ( <STRING> + <STRING> + title + <STRING> + receiver + <STRING> ) ; <CR> System . out . print ( content + <STRING> ) ; <CR> System . out . print ( <STRING> + <STRING> ) ; <CR> System . out . print ( sender + <STRING> ) ; <CR> System . out . print ( date + <STRING> ) ; <CR> } <CR> EnglishLetter ( String R 3 , String x , String o 0 , String w 1 , String K 9 ) { <CR> super ( R 3 , x , o 0 , w 1 , K 9 ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Envelop { <CR> void display ( ) { <CR> System . out . print ( <STRING> + senderAddr + <STRING> + <STRING> + letter . sender + <STRING> ) ; <CR> System . out . print ( <STRING> + <STRING> + receiverAddr + <STRING> + letter . receiver + <STRING> + letter . title + <STRING> + <STRING> ) ; <CR> System . out . print ( <STRING> + <STRING> ) ; <CR> letter . display ( ) ; <CR> } <CR> String receiverAddr ; <CR> String senderAddr ; <CR> Letter letter ; <CR> Envelop ( String F 4 , String Y 4 , Letter E 7 ) { <CR> this . senderAddr = F 4 ; <CR> this . receiverAddr = Y 4 ; <CR> this . letter = E 7 ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> abstract public class Letter implements Comparable { <CR> int valueOf ( String k ) { <CR> int k 3 = <STRING> ; <CR> for ( int i 5 = <STRING> ; i 5 < k . length ( ) ; i 5 ++ ) { <CR> char L 2 = k . charAt ( i 5 ) ; <CR> k 3 = k 3 * <STRING> + L 2 - <STRING> ; <CR> } <CR> return k 3 ; <CR> } <CR> String getDate ( ) { <CR> return date ; <CR> } <CR> String getReceiver ( ) { <CR> return receiver ; <CR> } <CR> boolean same ; <CR> public int compareTo ( Object y 9 ) { <CR> Letter z 6 = ( Letter ) y 9 ; <CR> same = <STRING> ; <CR> if ( valueOf ( this . date . substring ( <STRING> , <STRING> ) ) > valueOf ( o . date . substring ( <STRING> , <STRING> ) ) ) <CR> return <STRING> ; <CR> else <CR> if ( valueOf ( this . date . substring ( <STRING> , <STRING> ) ) == valueOf ( o . date . substring ( <STRING> , <STRING> ) ) ) { <CR> return <STRING> ; <CR> } <CR> else return - <STRING> ; <CR> } <CR> abstract protected void display ( ) ; <CR> Letter ( String l 6 , String y 2 , String O 2 , String D 8 , String D ) { <CR> this . title = l 6 ; <CR> this . receiver = y 2 ; <CR> this . content = O 2 ; <CR> this . sender = D 8 ; <CR> this . date = D ; <CR> } <CR> String getSender ( ) { <CR> return sender ; <CR> } <CR> String title , receiver , content , sender , date ; <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> import java . util . Arrays ; <CR> public class test { <CR> public static void main ( String [ ] t 2 ) { <CR> Letter [ ] L 1 = { new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) , new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) , new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) } ; <CR> Arrays . sort ( L 1 ) ; <CR> for ( int C 2 = <STRING> ; C 2 < <STRING> ; C 2 ++ ) <CR> L 1 [ C 2 ] . display ( ) ; <CR> } <CR> } <CR> <EOC>