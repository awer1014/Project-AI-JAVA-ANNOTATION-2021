<BOC> public class ChineseLetter extends Letter { <CR> ChineseLetter ( String q 1 , String i 1 , String c 2 , String n 2 , String v 3 ) { <CR> super ( q 1 , i 1 , c 2 , n 2 , v 3 ) ; <CR> } <CR> public void display ( ) { <CR> System . out . print ( receiver + title + <STRING> + <STRING> + <STRING> ) ; <CR> System . out . print ( content + <STRING> ) ; <CR> System . out . print ( sender + <STRING> + <STRING> + <STRING> ) ; <CR> System . out . print ( date + <STRING> ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class EnglishLetter extends Letter { <CR> public void display ( ) { <CR> System . out . print ( <STRING> + <STRING> + title + <STRING> + receiver + <STRING> ) ; <CR> System . out . print ( content + <STRING> ) ; <CR> System . out . print ( <STRING> + <STRING> ) ; <CR> System . out . print ( sender + <STRING> ) ; <CR> System . out . print ( date + <STRING> ) ; <CR> } <CR> EnglishLetter ( String C 3 , String E 9 , String H 4 , String m 1 , String M 2 ) { <CR> super ( C 3 , E 9 , H 4 , m 1 , M 2 ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Envelop { <CR> void display ( ) { <CR> System . out . print ( <STRING> + senderAddr + <STRING> + <STRING> + letter . sender + <STRING> ) ; <CR> System . out . print ( <STRING> + <STRING> + receiverAddr + <STRING> + letter . receiver + <STRING> + letter . title + <STRING> + <STRING> ) ; <CR> System . out . print ( <STRING> + <STRING> ) ; <CR> letter . display ( ) ; <CR> } <CR> Letter letter ; <CR> Envelop ( String C 0 , String q 1 , Letter h 5 ) { <CR> this . senderAddr = C 0 ; <CR> this . receiverAddr = q 1 ; <CR> this . letter = h 5 ; <CR> } <CR> String senderAddr ; <CR> String receiverAddr ; <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> abstract public class Letter implements Comparable { <CR> String getDate ( ) { <CR> return date ; <CR> } <CR> Letter ( String Q 3 , String U , String K 1 , String G 3 , String S 9 ) { <CR> this . title = Q 3 ; <CR> this . receiver = U ; <CR> this . content = K 1 ; <CR> this . sender = G 3 ; <CR> this . date = S 9 ; <CR> } <CR> String getSender ( ) { <CR> return sender ; <CR> } <CR> public int compareTo ( Object Q 9 ) { <CR> Letter a 2 = ( Letter ) Q 9 ; <CR> same = <STRING> ; <CR> if ( valueOf ( this . date . substring ( <STRING> , <STRING> ) ) > valueOf ( o . date . substring ( <STRING> , <STRING> ) ) ) <CR> return <STRING> ; <CR> else <CR> if ( valueOf ( this . date . substring ( <STRING> , <STRING> ) ) == valueOf ( o . date . substring ( <STRING> , <STRING> ) ) ) { <CR> return <STRING> ; <CR> } <CR> else return - <STRING> ; <CR> } <CR> int valueOf ( String f 3 ) { <CR> int a 4 = <STRING> ; <CR> for ( int f 4 = <STRING> ; f 4 < f 3 . length ( ) ; f 4 ++ ) { <CR> char w 2 = f 3 . charAt ( f 4 ) ; <CR> a 4 = a 4 * <STRING> + w 2 - <STRING> ; <CR> } <CR> return a 4 ; <CR> } <CR> boolean same ; <CR> String getReceiver ( ) { <CR> return receiver ; <CR> } <CR> abstract protected void display ( ) ; <CR> String title , receiver , content , sender , date ; <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> import java . util . Arrays ; <CR> public class test { <CR> public static void main ( String [ ] P 1 ) { <CR> Letter [ ] J 2 = { new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) , new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) , new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) } ; <CR> Arrays . sort ( J 2 ) ; <CR> for ( int i 1 = <STRING> ; i 1 < <STRING> ; i 1 ++ ) <CR> J 2 [ i 1 ] . display ( ) ; <CR> } <CR> } <CR> <EOC>