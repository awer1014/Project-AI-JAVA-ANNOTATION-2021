 <BOC> publicclassExamextendsTest{ <CR> publicExam(StringT9){ <CR> super(T9); <CR> } <CR> } <CR>  <EOC>  <BOC> importjava.util.Scanner; <CR> importjava.util.Random; <CR> publicclassGame{ <CR> staticScannerkeyboard=newScanner(System.in); <CR> publicstaticvoidmain(String[]e5){ <CR> StringY8,f6; <CR> doubleL8,h9; <CR> System.out.println("請輸入學生學號: "); <CR> Y8=keyboard.next(); <CR> System.out.println("請輸入學生姓名: "); <CR> f6=keyboard.next(); <CR> System.out.println("請輸入成績: "); <CR> L8=keyboard.nextDouble(); <CR> keyboard.nextLine(); <CR> System.out.println("請輸入成績比重: "); <CR> h9=keyboard.nextDouble(); <CR> keyboard.nextLine(); <CR> Studentd5=newStudent(Y8,f6,L8,h9); <CR> d5.setid(Y8); <CR> d5.setname(f6); <CR> d5.setscore(L8); <CR> d5.setsw(h9); <CR> } <CR> staticTestmapTest(intL8){ <CR> Testx3=null; <CR> switch(L8){ <CR> case1: <CR> x3=newExam("Exam"); <CR> break; <CR> case2: <CR> x3=newHomework("Homework"); <CR> break; <CR> case3: <CR> x3=newReport("Report"); <CR> break; <CR> } <CR> returnx3; <CR> } <CR> privatestaticTestchooseTest(){ <CR> System.out.println("請輸入種類 1(測驗),2(作業),3(心得報告):"); <CR> intL8=0; <CR> do <CR> { <CR> L8=keyboard.nextInt(); <CR> keyboard.nextLine(); <CR> } <CR> while(L8>3||L8<1); <CR> returnmapTest(L8); <CR> } <CR> } <CR>  <EOC>  <BOC> publicclassHomeworkextendsTest{ <CR> publicHomework(Stringt0){ <CR> super(t0); <CR> } <CR> } <CR>  <EOC>  <BOC> publicclassReportextendsTest{ <CR> publicReport(Stringr7){ <CR> super(r7); <CR> } <CR> } <CR>  <EOC>  <BOC> publicclassStudent{ <CR> doublegetscore(){ <CR> returnscore; <CR> } <CR> voidsetid(StringS1){ <CR> id=S1; <CR> } <CR> doublegetsw(){ <CR> returnsw; <CR> } <CR> Stringid; <CR> voidsetsw(doubleS1){ <CR> sw=S1; <CR> } <CR> Stringgetid(){ <CR> returnid; <CR> } <CR> voidsetscore(doubleS1){ <CR> score=S1; <CR> } <CR> Student(StringU8,StringG8,doubleh7,doublec2){ <CR> this.id=U8; <CR> this.name=G8; <CR> this.score=h7; <CR> this.sw=c2; <CR> } <CR> Stringname; <CR> voidsetname(StringS1){ <CR> name=S1; <CR> } <CR> StringgetName(){ <CR> returnname; <CR> } <CR> doublesw; <CR> doublescore; <CR> } <CR>  <EOC>  <BOC> abstractpublicclassTest{ <CR> protectedStringname; <CR> publicTest(Stringi8){ <CR> this.name=i8; <CR> } <CR> } <CR>  <EOC> 