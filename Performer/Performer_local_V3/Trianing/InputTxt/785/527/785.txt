 <BOC> publicclassExamextendsTest{ <CR> publicExam(Stringz6){ <CR> super(z6); <CR> } <CR> } <CR>  <EOC>  <BOC> importjava.util.Scanner; <CR> importjava.util.Random; <CR> publicclassGame{ <CR> staticTestmapTest(inti1){ <CR> Testd4=null; <CR> switch(i1){ <CR> case1: <CR> d4=newExam("Exam"); <CR> break; <CR> case2: <CR> d4=newHomework("Homework"); <CR> break; <CR> case3: <CR> d4=newReport("Report"); <CR> break; <CR> } <CR> returnd4; <CR> } <CR> privatestaticTestchooseTest(){ <CR> System.out.println("請輸入種類 1(測驗),2(作業),3(心得報告):"); <CR> inti1=0; <CR> do <CR> { <CR> i1=keyboard.nextInt(); <CR> keyboard.nextLine(); <CR> } <CR> while(i1>3||i1<1); <CR> returnmapTest(i1); <CR> } <CR> publicstaticvoidmain(String[]D1){ <CR> Stringf4,l8; <CR> doublei1,v1; <CR> System.out.println("請輸入學生學號: "); <CR> f4=keyboard.next(); <CR> System.out.println("請輸入學生姓名: "); <CR> l8=keyboard.next(); <CR> System.out.println("請輸入成績: "); <CR> i1=keyboard.nextDouble(); <CR> keyboard.nextLine(); <CR> System.out.println("請輸入成績比重: "); <CR> v1=keyboard.nextDouble(); <CR> keyboard.nextLine(); <CR> Studentr2=newStudent(f4,l8,i1,v1); <CR> r2.setid(f4); <CR> r2.setname(l8); <CR> r2.setscore(i1); <CR> r2.setsw(v1); <CR> } <CR> staticScannerkeyboard=newScanner(System.in); <CR> } <CR>  <EOC>  <BOC> publicclassHomeworkextendsTest{ <CR> publicHomework(StringX){ <CR> super(X); <CR> } <CR> } <CR>  <EOC>  <BOC> publicclassReportextendsTest{ <CR> publicReport(Stringf){ <CR> super(f); <CR> } <CR> } <CR>  <EOC>  <BOC> publicclassStudent{ <CR> voidsetsw(doublep){ <CR> sw=p; <CR> } <CR> doublesw; <CR> Student(StringI5,StringV6,doubleC0,doubleG2){ <CR> this.id=I5; <CR> this.name=V6; <CR> this.score=C0; <CR> this.sw=G2; <CR> } <CR> Stringname; <CR> voidsetid(Stringp){ <CR> id=p; <CR> } <CR> Stringgetid(){ <CR> returnid; <CR> } <CR> voidsetscore(doublep){ <CR> score=p; <CR> } <CR> doublegetsw(){ <CR> returnsw; <CR> } <CR> Stringid; <CR> doublescore; <CR> doublegetscore(){ <CR> returnscore; <CR> } <CR> StringgetName(){ <CR> returnname; <CR> } <CR> voidsetname(Stringp){ <CR> name=p; <CR> } <CR> } <CR>  <EOC>  <BOC> abstractpublicclassTest{ <CR> protectedStringname; <CR> publicTest(StringK9){ <CR> this.name=K9; <CR> } <CR> } <CR>  <EOC> 