 <BOC> publicclassExamextendsTest{ <CR> publicExam(StringV9){ <CR> super(V9); <CR> } <CR> } <CR>  <EOC>  <BOC> importjava.util.Scanner; <CR> importjava.util.Random; <CR> publicclassGame{ <CR> privatestaticTestchooseTest(){ <CR> System.out.println("請輸入種類 1(測驗),2(作業),3(心得報告):"); <CR> intM9=0; <CR> do <CR> { <CR> M9=keyboard.nextInt(); <CR> keyboard.nextLine(); <CR> } <CR> while(M9>3||M9<1); <CR> returnmapTest(M9); <CR> } <CR> publicstaticvoidmain(String[]I){ <CR> StringV1,h8; <CR> doubleM9,q2; <CR> System.out.println("請輸入學生學號: "); <CR> V1=keyboard.next(); <CR> System.out.println("請輸入學生姓名: "); <CR> h8=keyboard.next(); <CR> System.out.println("請輸入成績: "); <CR> M9=keyboard.nextDouble(); <CR> keyboard.nextLine(); <CR> System.out.println("請輸入成績比重: "); <CR> q2=keyboard.nextDouble(); <CR> keyboard.nextLine(); <CR> StudentD1=newStudent(V1,h8,M9,q2); <CR> D1.setid(V1); <CR> D1.setname(h8); <CR> D1.setscore(M9); <CR> D1.setsw(q2); <CR> } <CR> staticScannerkeyboard=newScanner(System.in); <CR> staticTestmapTest(intM9){ <CR> TestT9=null; <CR> switch(M9){ <CR> case1: <CR> T9=newExam("Exam"); <CR> break; <CR> case2: <CR> T9=newHomework("Homework"); <CR> break; <CR> case3: <CR> T9=newReport("Report"); <CR> break; <CR> } <CR> returnT9; <CR> } <CR> } <CR>  <EOC>  <BOC> publicclassHomeworkextendsTest{ <CR> publicHomework(Stringk2){ <CR> super(k2); <CR> } <CR> } <CR>  <EOC>  <BOC> publicclassReportextendsTest{ <CR> publicReport(StringA1){ <CR> super(A1); <CR> } <CR> } <CR>  <EOC>  <BOC> publicclassStudent{ <CR> Stringid; <CR> Stringgetid(){ <CR> returnid; <CR> } <CR> StringgetName(){ <CR> returnname; <CR> } <CR> voidsetid(StringH0){ <CR> id=H0; <CR> } <CR> doublegetsw(){ <CR> returnsw; <CR> } <CR> voidsetname(StringH0){ <CR> name=H0; <CR> } <CR> doublescore; <CR> Stringname; <CR> voidsetsw(doubleH0){ <CR> sw=H0; <CR> } <CR> voidsetscore(doubleH0){ <CR> score=H0; <CR> } <CR> doublesw; <CR> Student(StringO1,StringW,doubles4,doubleu4){ <CR> this.id=O1; <CR> this.name=W; <CR> this.score=s4; <CR> this.sw=u4; <CR> } <CR> doublegetscore(){ <CR> returnscore; <CR> } <CR> } <CR>  <EOC>  <BOC> abstractpublicclassTest{ <CR> protectedStringname; <CR> publicTest(StringM9){ <CR> this.name=M9; <CR> } <CR> } <CR>  <EOC> 