 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String g0 , String i5 , String T7 , String i , String K ) {  <CR> super ( g0 , i5 , T7 , i , K ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String q0 , String i2 , String q8 , String c1 , String p1 ) {  <CR> super ( q0 , i2 , q8 , c1 , p1 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String senderAddr ;  <CR> Envelop ( String x6 , String C0 , Letter z6 ) {  <CR> this . senderAddr = x6 ;  <CR> this . receiverAddr = C0 ;  <CR> this . letter = z6 ;  <CR> }  <CR> String receiverAddr ;  <CR> Letter letter ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> abstract protected void display ( ) ;  <CR> int valueOf ( String E2 ) {  <CR> int V0 = 0 ;  <CR> for ( int Q5 = 0 ; Q5 < E2 . length ( ) ; Q5 ++ ) {  <CR> char H4 = E2 . charAt ( Q5 ) ;  <CR> V0 = V0 * 10 + H4 - '0' ;  <CR> }  <CR> return V0 ;  <CR> }  <CR> public int compareTo ( Object h4 ) {  <CR> Letter w7 = ( Letter ) h4 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> Letter ( String M4 , String B2 , String b0 , String N4 , String l7 ) {  <CR> this . title = M4 ;  <CR> this . receiver = B2 ;  <CR> this . content = b0 ;  <CR> this . sender = N4 ;  <CR> this . date = l7 ;  <CR> }  <CR> boolean same ;  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] s4 ) {  <CR> Letter [ ] M1 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( M1 ) ;  <CR> for ( int Y5 = 0 ; Y5 < 3 ; Y5 ++ )  <CR> M1 [ Y5 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 