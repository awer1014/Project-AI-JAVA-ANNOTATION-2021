 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String F2 , String f2 , String V0 , String t3 , String Z6 ) {  <CR> super ( F2 , f2 , V0 , t3 , Z6 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String g1 , String h2 , String U4 , String h3 , String H9 ) {  <CR> super ( g1 , h2 , U4 , h3 , H9 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String receiverAddr ;  <CR> String senderAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Letter letter ;  <CR> Envelop ( String N2 , String m4 , Letter Z0 ) {  <CR> this . senderAddr = N2 ;  <CR> this . receiverAddr = m4 ;  <CR> this . letter = Z0 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> abstract protected void display ( ) ;  <CR> Letter ( String D6 , String b9 , String S4 , String w4 , String M2 ) {  <CR> this . title = D6 ;  <CR> this . receiver = b9 ;  <CR> this . content = S4 ;  <CR> this . sender = w4 ;  <CR> this . date = M2 ;  <CR> }  <CR> public int compareTo ( Object p1 ) {  <CR> Letter P4 = ( Letter ) p1 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> boolean same ;  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> int valueOf ( String T8 ) {  <CR> int R5 = 0 ;  <CR> for ( int r2 = 0 ; r2 < T8 . length ( ) ; r2 ++ ) {  <CR> char j9 = T8 . charAt ( r2 ) ;  <CR> R5 = R5 * 10 + j9 - '0' ;  <CR> }  <CR> return R5 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] F7 ) {  <CR> Letter [ ] t9 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( t9 ) ;  <CR> for ( int Z3 = 0 ; Z3 < 3 ; Z3 ++ )  <CR> t9 [ Z3 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 