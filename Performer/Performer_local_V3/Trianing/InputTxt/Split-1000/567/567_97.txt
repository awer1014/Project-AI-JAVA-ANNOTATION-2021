 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String T8 , String K9 , String a2 , String A0 , String q1 ) {  <CR> super ( T8 , K9 , a2 , A0 , q1 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String K6 , String s4 , String n6 , String r7 , String Y4 ) {  <CR> super ( K6 , s4 , n6 , r7 , Y4 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String senderAddr ;  <CR> Letter letter ;  <CR> String receiverAddr ;  <CR> Envelop ( String C1 , String j0 , Letter k3 ) {  <CR> this . senderAddr = C1 ;  <CR> this . receiverAddr = j0 ;  <CR> this . letter = k3 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> int valueOf ( String d2 ) {  <CR> int e6 = 0 ;  <CR> for ( int N7 = 0 ; N7 < d2 . length ( ) ; N7 ++ ) {  <CR> char j6 = d2 . charAt ( N7 ) ;  <CR> e6 = e6 * 10 + j6 - '0' ;  <CR> }  <CR> return e6 ;  <CR> }  <CR> public int compareTo ( Object R3 ) {  <CR> Letter m8 = ( Letter ) R3 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> Letter ( String X8 , String q3 , String S , String Y0 , String p9 ) {  <CR> this . title = X8 ;  <CR> this . receiver = q3 ;  <CR> this . content = S ;  <CR> this . sender = Y0 ;  <CR> this . date = p9 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> boolean same ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] E6 ) {  <CR> Letter [ ] T4 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( T4 ) ;  <CR> for ( int s = 0 ; s < 3 ; s ++ )  <CR> T4 [ s ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 