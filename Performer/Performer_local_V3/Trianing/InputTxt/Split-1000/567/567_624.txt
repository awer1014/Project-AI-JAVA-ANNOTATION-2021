 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String f , String i4 , String G5 , String E0 , String w5 ) {  <CR> super ( f , i4 , G5 , E0 , w5 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String l2 , String J2 , String I9 , String Z7 , String K1 ) {  <CR> super ( l2 , J2 , I9 , Z7 , K1 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> Letter letter ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String senderAddr ;  <CR> String receiverAddr ;  <CR> Envelop ( String D4 , String l9 , Letter S8 ) {  <CR> this . senderAddr = D4 ;  <CR> this . receiverAddr = l9 ;  <CR> this . letter = S8 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> int valueOf ( String k6 ) {  <CR> int Q5 = 0 ;  <CR> for ( int J = 0 ; J < k6 . length ( ) ; J ++ ) {  <CR> char B0 = k6 . charAt ( J ) ;  <CR> Q5 = Q5 * 10 + B0 - '0' ;  <CR> }  <CR> return Q5 ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> public int compareTo ( Object x8 ) {  <CR> Letter F6 = ( Letter ) x8 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> boolean same ;  <CR> String title , receiver , content , sender , date ;  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> Letter ( String I , String E6 , String Y2 , String g1 , String V4 ) {  <CR> this . title = I ;  <CR> this . receiver = E6 ;  <CR> this . content = Y2 ;  <CR> this . sender = g1 ;  <CR> this . date = V4 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] h8 ) {  <CR> Letter [ ] Z7 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( Z7 ) ;  <CR> for ( int y8 = 0 ; y8 < 3 ; y8 ++ )  <CR> Z7 [ y8 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 