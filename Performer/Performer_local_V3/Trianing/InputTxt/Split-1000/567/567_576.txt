 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String h7 , String Y2 , String h1 , String Y8 , String k0 ) {  <CR> super ( h7 , Y2 , h1 , Y8 , k0 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String X9 , String I7 , String k0 , String y1 , String b1 ) {  <CR> super ( X9 , I7 , k0 , y1 , b1 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> Letter letter ;  <CR> String receiverAddr ;  <CR> String senderAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Envelop ( String B6 , String u3 , Letter g6 ) {  <CR> this . senderAddr = B6 ;  <CR> this . receiverAddr = u3 ;  <CR> this . letter = g6 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> int valueOf ( String p5 ) {  <CR> int J1 = 0 ;  <CR> for ( int y4 = 0 ; y4 < p5 . length ( ) ; y4 ++ ) {  <CR> char D0 = p5 . charAt ( y4 ) ;  <CR> J1 = J1 * 10 + D0 - '0' ;  <CR> }  <CR> return J1 ;  <CR> }  <CR> Letter ( String C5 , String O5 , String C6 , String n5 , String k7 ) {  <CR> this . title = C5 ;  <CR> this . receiver = O5 ;  <CR> this . content = C6 ;  <CR> this . sender = n5 ;  <CR> this . date = k7 ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> String title , receiver , content , sender , date ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> boolean same ;  <CR> public int compareTo ( Object I5 ) {  <CR> Letter Z9 = ( Letter ) I5 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] R3 ) {  <CR> Letter [ ] l3 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( l3 ) ;  <CR> for ( int s1 = 0 ; s1 < 3 ; s1 ++ )  <CR> l3 [ s1 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 