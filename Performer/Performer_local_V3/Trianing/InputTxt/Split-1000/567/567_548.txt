 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String P8 , String F6 , String Y4 , String g1 , String Z3 ) {  <CR> super ( P8 , F6 , Y4 , g1 , Z3 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String x2 , String V0 , String v8 , String X3 , String w0 ) {  <CR> super ( x2 , V0 , v8 , X3 , w0 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String receiverAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String senderAddr ;  <CR> Envelop ( String c0 , String x4 , Letter C5 ) {  <CR> this . senderAddr = c0 ;  <CR> this . receiverAddr = x4 ;  <CR> this . letter = C5 ;  <CR> }  <CR> Letter letter ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> boolean same ;  <CR> int valueOf ( String P5 ) {  <CR> int o3 = 0 ;  <CR> for ( int m1 = 0 ; m1 < P5 . length ( ) ; m1 ++ ) {  <CR> char Z1 = P5 . charAt ( m1 ) ;  <CR> o3 = o3 * 10 + Z1 - '0' ;  <CR> }  <CR> return o3 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> public int compareTo ( Object B ) {  <CR> Letter Q4 = ( Letter ) B ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> Letter ( String E9 , String N , String R5 , String L3 , String V5 ) {  <CR> this . title = E9 ;  <CR> this . receiver = N ;  <CR> this . content = R5 ;  <CR> this . sender = L3 ;  <CR> this . date = V5 ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] q6 ) {  <CR> Letter [ ] w4 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( w4 ) ;  <CR> for ( int h5 = 0 ; h5 < 3 ; h5 ++ )  <CR> w4 [ h5 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 