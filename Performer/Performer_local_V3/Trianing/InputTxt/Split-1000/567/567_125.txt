 <BOC> public class ChineseLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> ChineseLetter ( String U3 , String H7 , String H1 , String y5 , String j3 ) {  <CR> super ( U3 , H7 , H1 , y5 , j3 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String a2 , String v8 , String d5 , String Y7 , String e0 ) {  <CR> super ( a2 , v8 , d5 , Y7 , e0 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String receiverAddr ;  <CR> String senderAddr ;  <CR> Envelop ( String V3 , String g2 , Letter R4 ) {  <CR> this . senderAddr = V3 ;  <CR> this . receiverAddr = g2 ;  <CR> this . letter = R4 ;  <CR> }  <CR> Letter letter ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String title , receiver , content , sender , date ;  <CR> int valueOf ( String p0 ) {  <CR> int K0 = 0 ;  <CR> for ( int Y1 = 0 ; Y1 < p0 . length ( ) ; Y1 ++ ) {  <CR> char a6 = p0 . charAt ( Y1 ) ;  <CR> K0 = K0 * 10 + a6 - '0' ;  <CR> }  <CR> return K0 ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> Letter ( String V5 , String I , String V6 , String T4 , String S8 ) {  <CR> this . title = V5 ;  <CR> this . receiver = I ;  <CR> this . content = V6 ;  <CR> this . sender = T4 ;  <CR> this . date = S8 ;  <CR> }  <CR> boolean same ;  <CR> public int compareTo ( Object O8 ) {  <CR> Letter y9 = ( Letter ) O8 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] G3 ) {  <CR> Letter [ ] j6 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( j6 ) ;  <CR> for ( int y2 = 0 ; y2 < 3 ; y2 ++ )  <CR> j6 [ y2 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 