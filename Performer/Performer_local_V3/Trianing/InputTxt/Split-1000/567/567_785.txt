 <BOC> public class ChineseLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> ChineseLetter ( String U2 , String s4 , String Q7 , String w , String j5 ) {  <CR> super ( U2 , s4 , Q7 , w , j5 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String b9 , String c7 , String V1 , String Y7 , String m7 ) {  <CR> super ( b9 , c7 , V1 , Y7 , m7 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> Envelop ( String D2 , String V , Letter d ) {  <CR> this . senderAddr = D2 ;  <CR> this . receiverAddr = V ;  <CR> this . letter = d ;  <CR> }  <CR> Letter letter ;  <CR> String receiverAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String senderAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> boolean same ;  <CR> Letter ( String a0 , String I4 , String L6 , String u5 , String t8 ) {  <CR> this . title = a0 ;  <CR> this . receiver = I4 ;  <CR> this . content = L6 ;  <CR> this . sender = u5 ;  <CR> this . date = t8 ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> public int compareTo ( Object q5 ) {  <CR> Letter I3 = ( Letter ) q5 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> int valueOf ( String o7 ) {  <CR> int k = 0 ;  <CR> for ( int C9 = 0 ; C9 < o7 . length ( ) ; C9 ++ ) {  <CR> char e1 = o7 . charAt ( C9 ) ;  <CR> k = k * 10 + e1 - '0' ;  <CR> }  <CR> return k ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] G ) {  <CR> Letter [ ] D2 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( D2 ) ;  <CR> for ( int K6 = 0 ; K6 < 3 ; K6 ++ )  <CR> D2 [ K6 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 