 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String K1 , String m7 , String z6 , String j4 , String W9 ) {  <CR> super ( K1 , m7 , z6 , j4 , W9 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String e0 , String H2 , String s7 , String j7 , String h7 ) {  <CR> super ( e0 , H2 , s7 , j7 , h7 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String receiverAddr ;  <CR> Envelop ( String D7 , String W6 , Letter J1 ) {  <CR> this . senderAddr = D7 ;  <CR> this . receiverAddr = W6 ;  <CR> this . letter = J1 ;  <CR> }  <CR> Letter letter ;  <CR> String senderAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> int valueOf ( String w9 ) {  <CR> int C6 = 0 ;  <CR> for ( int C7 = 0 ; C7 < w9 . length ( ) ; C7 ++ ) {  <CR> char Z0 = w9 . charAt ( C7 ) ;  <CR> C6 = C6 * 10 + Z0 - '0' ;  <CR> }  <CR> return C6 ;  <CR> }  <CR> public int compareTo ( Object Z4 ) {  <CR> Letter M8 = ( Letter ) Z4 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> boolean same ;  <CR> Letter ( String X , String X1 , String M6 , String e5 , String p9 ) {  <CR> this . title = X ;  <CR> this . receiver = X1 ;  <CR> this . content = M6 ;  <CR> this . sender = e5 ;  <CR> this . date = p9 ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] u9 ) {  <CR> Letter [ ] k0 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( k0 ) ;  <CR> for ( int U8 = 0 ; U8 < 3 ; U8 ++ )  <CR> k0 [ U8 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 