 <BOC> public class ChineseLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> ChineseLetter ( String M , String w4 , String j7 , String W8 , String C9 ) {  <CR> super ( M , w4 , j7 , W8 , C9 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String H5 , String A6 , String i3 , String V7 , String Q5 ) {  <CR> super ( H5 , A6 , i3 , V7 , Q5 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Letter letter ;  <CR> Envelop ( String B5 , String w4 , Letter y2 ) {  <CR> this . senderAddr = B5 ;  <CR> this . receiverAddr = w4 ;  <CR> this . letter = y2 ;  <CR> }  <CR> String receiverAddr ;  <CR> String senderAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> boolean same ;  <CR> abstract protected void display ( ) ;  <CR> String title , receiver , content , sender , date ;  <CR> public int compareTo ( Object h ) {  <CR> Letter y1 = ( Letter ) h ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> Letter ( String L5 , String F0 , String d , String s3 , String U0 ) {  <CR> this . title = L5 ;  <CR> this . receiver = F0 ;  <CR> this . content = d ;  <CR> this . sender = s3 ;  <CR> this . date = U0 ;  <CR> }  <CR> int valueOf ( String l3 ) {  <CR> int g9 = 0 ;  <CR> for ( int m5 = 0 ; m5 < l3 . length ( ) ; m5 ++ ) {  <CR> char p8 = l3 . charAt ( m5 ) ;  <CR> g9 = g9 * 10 + p8 - '0' ;  <CR> }  <CR> return g9 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] o5 ) {  <CR> Letter [ ] o2 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( o2 ) ;  <CR> for ( int q9 = 0 ; q9 < 3 ; q9 ++ )  <CR> o2 [ q9 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 