 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String F , String n0 , String X8 , String V1 , String P ) {  <CR> super ( F , n0 , X8 , V1 , P ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String X0 , String c8 , String Y5 , String r0 , String u ) {  <CR> super ( X0 , c8 , Y5 , r0 , u ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> Envelop ( String d7 , String P6 , Letter X2 ) {  <CR> this . senderAddr = d7 ;  <CR> this . receiverAddr = P6 ;  <CR> this . letter = X2 ;  <CR> }  <CR> Letter letter ;  <CR> String senderAddr ;  <CR> String receiverAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> int valueOf ( String I1 ) {  <CR> int Z1 = 0 ;  <CR> for ( int G4 = 0 ; G4 < I1 . length ( ) ; G4 ++ ) {  <CR> char O9 = I1 . charAt ( G4 ) ;  <CR> Z1 = Z1 * 10 + O9 - '0' ;  <CR> }  <CR> return Z1 ;  <CR> }  <CR> public int compareTo ( Object V ) {  <CR> Letter Q2 = ( Letter ) V ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> boolean same ;  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> Letter ( String S9 , String R , String M1 , String h9 , String R2 ) {  <CR> this . title = S9 ;  <CR> this . receiver = R ;  <CR> this . content = M1 ;  <CR> this . sender = h9 ;  <CR> this . date = R2 ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] X5 ) {  <CR> Letter [ ] G6 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( G6 ) ;  <CR> for ( int D9 = 0 ; D9 < 3 ; D9 ++ )  <CR> G6 [ D9 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 