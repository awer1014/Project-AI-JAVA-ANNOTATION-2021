 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String g5 , String Y3 , String S7 , String P1 , String O0 ) {  <CR> super ( g5 , Y3 , S7 , P1 , O0 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String m6 , String u1 , String E , String I9 , String w9 ) {  <CR> super ( m6 , u1 , E , I9 , w9 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String senderAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Letter letter ;  <CR> Envelop ( String Q6 , String A , Letter h4 ) {  <CR> this . senderAddr = Q6 ;  <CR> this . receiverAddr = A ;  <CR> this . letter = h4 ;  <CR> }  <CR> String receiverAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> abstract protected void display ( ) ;  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> Letter ( String c9 , String F , String o5 , String R9 , String a8 ) {  <CR> this . title = c9 ;  <CR> this . receiver = F ;  <CR> this . content = o5 ;  <CR> this . sender = R9 ;  <CR> this . date = a8 ;  <CR> }  <CR> public int compareTo ( Object B7 ) {  <CR> Letter q7 = ( Letter ) B7 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> boolean same ;  <CR> int valueOf ( String n1 ) {  <CR> int K9 = 0 ;  <CR> for ( int u0 = 0 ; u0 < n1 . length ( ) ; u0 ++ ) {  <CR> char x3 = n1 . charAt ( u0 ) ;  <CR> K9 = K9 * 10 + x3 - '0' ;  <CR> }  <CR> return K9 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] e4 ) {  <CR> Letter [ ] m5 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( m5 ) ;  <CR> for ( int w6 = 0 ; w6 < 3 ; w6 ++ )  <CR> m5 [ w6 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 