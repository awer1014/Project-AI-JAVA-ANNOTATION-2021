 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String q0 , String s7 , String f6 , String I , String d0 ) {  <CR> super ( q0 , s7 , f6 , I , d0 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String R8 , String B1 , String A5 , String A4 , String h5 ) {  <CR> super ( R8 , B1 , A5 , A4 , h5 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> Letter letter ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Envelop ( String X8 , String q7 , Letter y7 ) {  <CR> this . senderAddr = X8 ;  <CR> this . receiverAddr = q7 ;  <CR> this . letter = y7 ;  <CR> }  <CR> String receiverAddr ;  <CR> String senderAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> int valueOf ( String f5 ) {  <CR> int i3 = 0 ;  <CR> for ( int H5 = 0 ; H5 < f5 . length ( ) ; H5 ++ ) {  <CR> char w7 = f5 . charAt ( H5 ) ;  <CR> i3 = i3 * 10 + w7 - '0' ;  <CR> }  <CR> return i3 ;  <CR> }  <CR> public int compareTo ( Object D8 ) {  <CR> Letter j = ( Letter ) D8 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> boolean same ;  <CR> String title , receiver , content , sender , date ;  <CR> Letter ( String i4 , String G6 , String Y3 , String H8 , String p5 ) {  <CR> this . title = i4 ;  <CR> this . receiver = G6 ;  <CR> this . content = Y3 ;  <CR> this . sender = H8 ;  <CR> this . date = p5 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] y1 ) {  <CR> Letter [ ] G9 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( G9 ) ;  <CR> for ( int A8 = 0 ; A8 < 3 ; A8 ++ )  <CR> G9 [ A8 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 