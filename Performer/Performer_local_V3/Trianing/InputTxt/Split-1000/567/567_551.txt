 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String i6 , String A , String a7 , String v4 , String z9 ) {  <CR> super ( i6 , A , a7 , v4 , z9 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String E5 , String b7 , String x4 , String S7 , String k5 ) {  <CR> super ( E5 , b7 , x4 , S7 , k5 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Letter letter ;  <CR> String receiverAddr ;  <CR> Envelop ( String Y5 , String Y3 , Letter h4 ) {  <CR> this . senderAddr = Y5 ;  <CR> this . receiverAddr = Y3 ;  <CR> this . letter = h4 ;  <CR> }  <CR> String senderAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> int valueOf ( String e8 ) {  <CR> int w6 = 0 ;  <CR> for ( int e2 = 0 ; e2 < e8 . length ( ) ; e2 ++ ) {  <CR> char z0 = e8 . charAt ( e2 ) ;  <CR> w6 = w6 * 10 + z0 - '0' ;  <CR> }  <CR> return w6 ;  <CR> }  <CR> public int compareTo ( Object A4 ) {  <CR> Letter u6 = ( Letter ) A4 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> Letter ( String L , String P9 , String c7 , String X , String D8 ) {  <CR> this . title = L ;  <CR> this . receiver = P9 ;  <CR> this . content = c7 ;  <CR> this . sender = X ;  <CR> this . date = D8 ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> boolean same ;  <CR> String title , receiver , content , sender , date ;  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] R0 ) {  <CR> Letter [ ] E8 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( E8 ) ;  <CR> for ( int n7 = 0 ; n7 < 3 ; n7 ++ )  <CR> E8 [ n7 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 