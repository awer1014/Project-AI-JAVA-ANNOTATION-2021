 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String p8 , String u4 , String O3 , String E4 , String c6 ) {  <CR> super ( p8 , u4 , O3 , E4 , c6 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String t5 , String x4 , String m5 , String D4 , String l5 ) {  <CR> super ( t5 , x4 , m5 , D4 , l5 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String receiverAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Envelop ( String G4 , String N1 , Letter x9 ) {  <CR> this . senderAddr = G4 ;  <CR> this . receiverAddr = N1 ;  <CR> this . letter = x9 ;  <CR> }  <CR> Letter letter ;  <CR> String senderAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> Letter ( String d0 , String u9 , String o7 , String F3 , String X0 ) {  <CR> this . title = d0 ;  <CR> this . receiver = u9 ;  <CR> this . content = o7 ;  <CR> this . sender = F3 ;  <CR> this . date = X0 ;  <CR> }  <CR> public int compareTo ( Object J4 ) {  <CR> Letter o9 = ( Letter ) J4 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> boolean same ;  <CR> int valueOf ( String W ) {  <CR> int e4 = 0 ;  <CR> for ( int p4 = 0 ; p4 < W . length ( ) ; p4 ++ ) {  <CR> char G5 = W . charAt ( p4 ) ;  <CR> e4 = e4 * 10 + G5 - '0' ;  <CR> }  <CR> return e4 ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] l6 ) {  <CR> Letter [ ] b8 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( b8 ) ;  <CR> for ( int M1 = 0 ; M1 < 3 ; M1 ++ )  <CR> b8 [ M1 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 