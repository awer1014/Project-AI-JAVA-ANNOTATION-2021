 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String p8 , String M4 , String u6 , String s0 , String O2 ) {  <CR> super ( p8 , M4 , u6 , s0 , O2 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String a1 , String w , String F5 , String u , String p7 ) {  <CR> super ( a1 , w , F5 , u , p7 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Envelop ( String b7 , String m8 , Letter o9 ) {  <CR> this . senderAddr = b7 ;  <CR> this . receiverAddr = m8 ;  <CR> this . letter = o9 ;  <CR> }  <CR> String senderAddr ;  <CR> Letter letter ;  <CR> String receiverAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String title , receiver , content , sender , date ;  <CR> Letter ( String y5 , String f5 , String e2 , String M3 , String E5 ) {  <CR> this . title = y5 ;  <CR> this . receiver = f5 ;  <CR> this . content = e2 ;  <CR> this . sender = M3 ;  <CR> this . date = E5 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> public int compareTo ( Object o7 ) {  <CR> Letter q0 = ( Letter ) o7 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> boolean same ;  <CR> int valueOf ( String J3 ) {  <CR> int d0 = 0 ;  <CR> for ( int q8 = 0 ; q8 < J3 . length ( ) ; q8 ++ ) {  <CR> char H7 = J3 . charAt ( q8 ) ;  <CR> d0 = d0 * 10 + H7 - '0' ;  <CR> }  <CR> return d0 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] T0 ) {  <CR> Letter [ ] x1 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( x1 ) ;  <CR> for ( int l8 = 0 ; l8 < 3 ; l8 ++ )  <CR> x1 [ l8 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 