 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String V6 , String M5 , String m , String b7 , String S6 ) {  <CR> super ( V6 , M5 , m , b7 , S6 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String D5 , String o5 , String Q5 , String z1 , String B3 ) {  <CR> super ( D5 , o5 , Q5 , z1 , B3 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String senderAddr ;  <CR> String receiverAddr ;  <CR> Envelop ( String k3 , String w5 , Letter G3 ) {  <CR> this . senderAddr = k3 ;  <CR> this . receiverAddr = w5 ;  <CR> this . letter = G3 ;  <CR> }  <CR> Letter letter ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> Letter ( String M6 , String O8 , String z , String S1 , String U2 ) {  <CR> this . title = M6 ;  <CR> this . receiver = O8 ;  <CR> this . content = z ;  <CR> this . sender = S1 ;  <CR> this . date = U2 ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> boolean same ;  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> int valueOf ( String C7 ) {  <CR> int M1 = 0 ;  <CR> for ( int v6 = 0 ; v6 < C7 . length ( ) ; v6 ++ ) {  <CR> char n4 = C7 . charAt ( v6 ) ;  <CR> M1 = M1 * 10 + n4 - '0' ;  <CR> }  <CR> return M1 ;  <CR> }  <CR> public int compareTo ( Object f0 ) {  <CR> Letter E = ( Letter ) f0 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] A6 ) {  <CR> Letter [ ] N9 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( N9 ) ;  <CR> for ( int i4 = 0 ; i4 < 3 ; i4 ++ )  <CR> N9 [ i4 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 