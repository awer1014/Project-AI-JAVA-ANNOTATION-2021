 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String k3 , String f3 , String J6 , String b5 , String a3 ) {  <CR> super ( k3 , f3 , J6 , b5 , a3 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String J6 , String X6 , String y5 , String z8 , String l9 ) {  <CR> super ( J6 , X6 , y5 , z8 , l9 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> Letter letter ;  <CR> String senderAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String receiverAddr ;  <CR> Envelop ( String n3 , String U7 , Letter P7 ) {  <CR> this . senderAddr = n3 ;  <CR> this . receiverAddr = U7 ;  <CR> this . letter = P7 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> Letter ( String e3 , String z3 , String q8 , String H5 , String R7 ) {  <CR> this . title = e3 ;  <CR> this . receiver = z3 ;  <CR> this . content = q8 ;  <CR> this . sender = H5 ;  <CR> this . date = R7 ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> boolean same ;  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> public int compareTo ( Object x3 ) {  <CR> Letter C4 = ( Letter ) x3 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> int valueOf ( String J6 ) {  <CR> int b7 = 0 ;  <CR> for ( int r2 = 0 ; r2 < J6 . length ( ) ; r2 ++ ) {  <CR> char j0 = J6 . charAt ( r2 ) ;  <CR> b7 = b7 * 10 + j0 - '0' ;  <CR> }  <CR> return b7 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] p9 ) {  <CR> Letter [ ] L4 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( L4 ) ;  <CR> for ( int R6 = 0 ; R6 < 3 ; R6 ++ )  <CR> L4 [ R6 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 