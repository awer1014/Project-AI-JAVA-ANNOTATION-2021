 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String W7 , String g4 , String T5 , String d , String z1 ) {  <CR> super ( W7 , g4 , T5 , d , z1 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String f2 , String u9 , String g2 , String W1 , String n4 ) {  <CR> super ( f2 , u9 , g2 , W1 , n4 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String senderAddr ;  <CR> Envelop ( String v2 , String t8 , Letter e2 ) {  <CR> this . senderAddr = v2 ;  <CR> this . receiverAddr = t8 ;  <CR> this . letter = e2 ;  <CR> }  <CR> String receiverAddr ;  <CR> Letter letter ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> abstract protected void display ( ) ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> int valueOf ( String u2 ) {  <CR> int l3 = 0 ;  <CR> for ( int m5 = 0 ; m5 < u2 . length ( ) ; m5 ++ ) {  <CR> char z2 = u2 . charAt ( m5 ) ;  <CR> l3 = l3 * 10 + z2 - '0' ;  <CR> }  <CR> return l3 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> Letter ( String R7 , String N , String N6 , String V8 , String r3 ) {  <CR> this . title = R7 ;  <CR> this . receiver = N ;  <CR> this . content = N6 ;  <CR> this . sender = V8 ;  <CR> this . date = r3 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> public int compareTo ( Object L ) {  <CR> Letter Y5 = ( Letter ) L ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> boolean same ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] X8 ) {  <CR> Letter [ ] j1 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( j1 ) ;  <CR> for ( int W8 = 0 ; W8 < 3 ; W8 ++ )  <CR> j1 [ W8 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 