 <BOC> public class ChineseLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> ChineseLetter ( String C2 , String z5 , String z1 , String C8 , String g0 ) {  <CR> super ( C2 , z5 , z1 , C8 , g0 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String T7 , String Z4 , String d1 , String V9 , String W9 ) {  <CR> super ( T7 , Z4 , d1 , V9 , W9 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String senderAddr ;  <CR> String receiverAddr ;  <CR> Envelop ( String k , String w4 , Letter O6 ) {  <CR> this . senderAddr = k ;  <CR> this . receiverAddr = w4 ;  <CR> this . letter = O6 ;  <CR> }  <CR> Letter letter ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> boolean same ;  <CR> public int compareTo ( Object Q8 ) {  <CR> Letter j1 = ( Letter ) Q8 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> Letter ( String o1 , String G5 , String w2 , String K2 , String i ) {  <CR> this . title = o1 ;  <CR> this . receiver = G5 ;  <CR> this . content = w2 ;  <CR> this . sender = K2 ;  <CR> this . date = i ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> int valueOf ( String R5 ) {  <CR> int P = 0 ;  <CR> for ( int e7 = 0 ; e7 < R5 . length ( ) ; e7 ++ ) {  <CR> char K3 = R5 . charAt ( e7 ) ;  <CR> P = P * 10 + K3 - '0' ;  <CR> }  <CR> return P ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] a8 ) {  <CR> Letter [ ] u3 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( u3 ) ;  <CR> for ( int o8 = 0 ; o8 < 3 ; o8 ++ )  <CR> u3 [ o8 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 