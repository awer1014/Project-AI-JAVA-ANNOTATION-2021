 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String c8 , String d3 , String N , String A9 , String p7 ) {  <CR> super ( c8 , d3 , N , A9 , p7 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String b2 , String D8 , String S5 , String u2 , String N6 ) {  <CR> super ( b2 , D8 , S5 , u2 , N6 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String receiverAddr ;  <CR> Letter letter ;  <CR> Envelop ( String w , String j5 , Letter X5 ) {  <CR> this . senderAddr = w ;  <CR> this . receiverAddr = j5 ;  <CR> this . letter = X5 ;  <CR> }  <CR> String senderAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> int valueOf ( String q1 ) {  <CR> int o9 = 0 ;  <CR> for ( int q6 = 0 ; q6 < q1 . length ( ) ; q6 ++ ) {  <CR> char M1 = q1 . charAt ( q6 ) ;  <CR> o9 = o9 * 10 + M1 - '0' ;  <CR> }  <CR> return o9 ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> public int compareTo ( Object c ) {  <CR> Letter b1 = ( Letter ) c ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> Letter ( String p5 , String a8 , String g4 , String L4 , String X5 ) {  <CR> this . title = p5 ;  <CR> this . receiver = a8 ;  <CR> this . content = g4 ;  <CR> this . sender = L4 ;  <CR> this . date = X5 ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> boolean same ;  <CR> String title , receiver , content , sender , date ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] L9 ) {  <CR> Letter [ ] o3 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( o3 ) ;  <CR> for ( int x3 = 0 ; x3 < 3 ; x3 ++ )  <CR> o3 [ x3 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 