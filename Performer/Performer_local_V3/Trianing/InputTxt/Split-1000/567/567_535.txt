 <BOC> public class ChineseLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> ChineseLetter ( String P6 , String W7 , String m5 , String d1 , String M8 ) {  <CR> super ( P6 , W7 , m5 , d1 , M8 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String Q2 , String w9 , String n0 , String a4 , String j8 ) {  <CR> super ( Q2 , w9 , n0 , a4 , j8 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String receiverAddr ;  <CR> String senderAddr ;  <CR> Envelop ( String N , String N4 , Letter U9 ) {  <CR> this . senderAddr = N ;  <CR> this . receiverAddr = N4 ;  <CR> this . letter = U9 ;  <CR> }  <CR> Letter letter ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String title , receiver , content , sender , date ;  <CR> abstract protected void display ( ) ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> Letter ( String f2 , String r0 , String D7 , String K0 , String m9 ) {  <CR> this . title = f2 ;  <CR> this . receiver = r0 ;  <CR> this . content = D7 ;  <CR> this . sender = K0 ;  <CR> this . date = m9 ;  <CR> }  <CR> int valueOf ( String r6 ) {  <CR> int E1 = 0 ;  <CR> for ( int g1 = 0 ; g1 < r6 . length ( ) ; g1 ++ ) {  <CR> char v6 = r6 . charAt ( g1 ) ;  <CR> E1 = E1 * 10 + v6 - '0' ;  <CR> }  <CR> return E1 ;  <CR> }  <CR> boolean same ;  <CR> public int compareTo ( Object l3 ) {  <CR> Letter N4 = ( Letter ) l3 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] Y9 ) {  <CR> Letter [ ] h2 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( h2 ) ;  <CR> for ( int m0 = 0 ; m0 < 3 ; m0 ++ )  <CR> h2 [ m0 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 