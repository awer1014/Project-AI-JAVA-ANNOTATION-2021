 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String U9 , String x8 , String L3 , String a3 , String a1 ) {  <CR> super ( U9 , x8 , L3 , a3 , a1 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String h7 , String Z2 , String C2 , String u9 , String K8 ) {  <CR> super ( h7 , Z2 , C2 , u9 , K8 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> Letter letter ;  <CR> String senderAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Envelop ( String u7 , String K , Letter J0 ) {  <CR> this . senderAddr = u7 ;  <CR> this . receiverAddr = K ;  <CR> this . letter = J0 ;  <CR> }  <CR> String receiverAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> Letter ( String C8 , String Y1 , String l5 , String O3 , String b7 ) {  <CR> this . title = C8 ;  <CR> this . receiver = Y1 ;  <CR> this . content = l5 ;  <CR> this . sender = O3 ;  <CR> this . date = b7 ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> boolean same ;  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> public int compareTo ( Object Z1 ) {  <CR> Letter E0 = ( Letter ) Z1 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> int valueOf ( String Y4 ) {  <CR> int t7 = 0 ;  <CR> for ( int o5 = 0 ; o5 < Y4 . length ( ) ; o5 ++ ) {  <CR> char x5 = Y4 . charAt ( o5 ) ;  <CR> t7 = t7 * 10 + x5 - '0' ;  <CR> }  <CR> return t7 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] Y8 ) {  <CR> Letter [ ] L8 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( L8 ) ;  <CR> for ( int s3 = 0 ; s3 < 3 ; s3 ++ )  <CR> L8 [ s3 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 