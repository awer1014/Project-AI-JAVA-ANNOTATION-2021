 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String F1 , String K0 , String Q9 , String n , String H2 ) {  <CR> super ( F1 , K0 , Q9 , n , H2 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String g5 , String Y1 , String w2 , String M7 , String e4 ) {  <CR> super ( g5 , Y1 , w2 , M7 , e4 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String senderAddr ;  <CR> String receiverAddr ;  <CR> Letter letter ;  <CR> Envelop ( String d3 , String W9 , Letter Z5 ) {  <CR> this . senderAddr = d3 ;  <CR> this . receiverAddr = W9 ;  <CR> this . letter = Z5 ;  <CR> }  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> int valueOf ( String y3 ) {  <CR> int q8 = 0 ;  <CR> for ( int P6 = 0 ; P6 < y3 . length ( ) ; P6 ++ ) {  <CR> char W8 = y3 . charAt ( P6 ) ;  <CR> q8 = q8 * 10 + W8 - '0' ;  <CR> }  <CR> return q8 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> Letter ( String v8 , String T8 , String o , String R2 , String W1 ) {  <CR> this . title = v8 ;  <CR> this . receiver = T8 ;  <CR> this . content = o ;  <CR> this . sender = R2 ;  <CR> this . date = W1 ;  <CR> }  <CR> public int compareTo ( Object R6 ) {  <CR> Letter I8 = ( Letter ) R6 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> boolean same ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] N7 ) {  <CR> Letter [ ] f1 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( f1 ) ;  <CR> for ( int d2 = 0 ; d2 < 3 ; d2 ++ )  <CR> f1 [ d2 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 