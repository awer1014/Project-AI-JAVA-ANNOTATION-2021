 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String J , String y , String X5 , String t0 , String N1 ) {  <CR> super ( J , y , X5 , t0 , N1 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String C0 , String p , String D0 , String B4 , String H6 ) {  <CR> super ( C0 , p , D0 , B4 , H6 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String receiverAddr ;  <CR> Letter letter ;  <CR> String senderAddr ;  <CR> Envelop ( String T , String E1 , Letter N ) {  <CR> this . senderAddr = T ;  <CR> this . receiverAddr = E1 ;  <CR> this . letter = N ;  <CR> }  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String title , receiver , content , sender , date ;  <CR> Letter ( String v8 , String Y6 , String N5 , String b3 , String i3 ) {  <CR> this . title = v8 ;  <CR> this . receiver = Y6 ;  <CR> this . content = N5 ;  <CR> this . sender = b3 ;  <CR> this . date = i3 ;  <CR> }  <CR> public int compareTo ( Object j8 ) {  <CR> Letter s5 = ( Letter ) j8 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> boolean same ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> int valueOf ( String F0 ) {  <CR> int L1 = 0 ;  <CR> for ( int L6 = 0 ; L6 < F0 . length ( ) ; L6 ++ ) {  <CR> char B7 = F0 . charAt ( L6 ) ;  <CR> L1 = L1 * 10 + B7 - '0' ;  <CR> }  <CR> return L1 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] T0 ) {  <CR> Letter [ ] t8 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( t8 ) ;  <CR> for ( int s0 = 0 ; s0 < 3 ; s0 ++ )  <CR> t8 [ s0 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 