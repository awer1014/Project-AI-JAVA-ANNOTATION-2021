 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String B1 , String E4 , String S2 , String R0 , String D6 ) {  <CR> super ( B1 , E4 , S2 , R0 , D6 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String b4 , String n3 , String W6 , String p4 , String c ) {  <CR> super ( b4 , n3 , W6 , p4 , c ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String receiverAddr ;  <CR> String senderAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Envelop ( String i1 , String I7 , Letter i9 ) {  <CR> this . senderAddr = i1 ;  <CR> this . receiverAddr = I7 ;  <CR> this . letter = i9 ;  <CR> }  <CR> Letter letter ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> int valueOf ( String n6 ) {  <CR> int D7 = 0 ;  <CR> for ( int a8 = 0 ; a8 < n6 . length ( ) ; a8 ++ ) {  <CR> char n1 = n6 . charAt ( a8 ) ;  <CR> D7 = D7 * 10 + n1 - '0' ;  <CR> }  <CR> return D7 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> public int compareTo ( Object V0 ) {  <CR> Letter Y2 = ( Letter ) V0 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> boolean same ;  <CR> abstract protected void display ( ) ;  <CR> Letter ( String N8 , String e3 , String w7 , String W3 , String c6 ) {  <CR> this . title = N8 ;  <CR> this . receiver = e3 ;  <CR> this . content = w7 ;  <CR> this . sender = W3 ;  <CR> this . date = c6 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] P3 ) {  <CR> Letter [ ] k = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( k ) ;  <CR> for ( int H1 = 0 ; H1 < 3 ; H1 ++ )  <CR> k [ H1 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 