 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String Z , String x , String E7 , String j8 , String g1 ) {  <CR> super ( Z , x , E7 , j8 , g1 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String E8 , String c1 , String y2 , String d1 , String p2 ) {  <CR> super ( E8 , c1 , y2 , d1 , p2 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> Letter letter ;  <CR> String senderAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String receiverAddr ;  <CR> Envelop ( String S4 , String K9 , Letter j0 ) {  <CR> this . senderAddr = S4 ;  <CR> this . receiverAddr = K9 ;  <CR> this . letter = j0 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String title , receiver , content , sender , date ;  <CR> Letter ( String U0 , String h8 , String y4 , String D0 , String E ) {  <CR> this . title = U0 ;  <CR> this . receiver = h8 ;  <CR> this . content = y4 ;  <CR> this . sender = D0 ;  <CR> this . date = E ;  <CR> }  <CR> boolean same ;  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> int valueOf ( String Y9 ) {  <CR> int U7 = 0 ;  <CR> for ( int Q0 = 0 ; Q0 < Y9 . length ( ) ; Q0 ++ ) {  <CR> char s2 = Y9 . charAt ( Q0 ) ;  <CR> U7 = U7 * 10 + s2 - '0' ;  <CR> }  <CR> return U7 ;  <CR> }  <CR> public int compareTo ( Object a3 ) {  <CR> Letter i9 = ( Letter ) a3 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] m7 ) {  <CR> Letter [ ] M6 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( M6 ) ;  <CR> for ( int N6 = 0 ; N6 < 3 ; N6 ++ )  <CR> M6 [ N6 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 