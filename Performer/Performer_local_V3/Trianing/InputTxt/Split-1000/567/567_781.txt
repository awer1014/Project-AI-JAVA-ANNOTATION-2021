 <BOC> public class ChineseLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> ChineseLetter ( String z1 , String p2 , String X , String r0 , String M7 ) {  <CR> super ( z1 , p2 , X , r0 , M7 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String v9 , String O5 , String E9 , String W0 , String F ) {  <CR> super ( v9 , O5 , E9 , W0 , F ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> Letter letter ;  <CR> String senderAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Envelop ( String w6 , String m2 , Letter A2 ) {  <CR> this . senderAddr = w6 ;  <CR> this . receiverAddr = m2 ;  <CR> this . letter = A2 ;  <CR> }  <CR> String receiverAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> boolean same ;  <CR> public int compareTo ( Object g4 ) {  <CR> Letter m8 = ( Letter ) g4 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> int valueOf ( String s1 ) {  <CR> int r3 = 0 ;  <CR> for ( int F5 = 0 ; F5 < s1 . length ( ) ; F5 ++ ) {  <CR> char p3 = s1 . charAt ( F5 ) ;  <CR> r3 = r3 * 10 + p3 - '0' ;  <CR> }  <CR> return r3 ;  <CR> }  <CR> Letter ( String d5 , String s7 , String L1 , String w7 , String M0 ) {  <CR> this . title = d5 ;  <CR> this . receiver = s7 ;  <CR> this . content = L1 ;  <CR> this . sender = w7 ;  <CR> this . date = M0 ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> String title , receiver , content , sender , date ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] G6 ) {  <CR> Letter [ ] M0 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( M0 ) ;  <CR> for ( int g1 = 0 ; g1 < 3 ; g1 ++ )  <CR> M0 [ g1 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 