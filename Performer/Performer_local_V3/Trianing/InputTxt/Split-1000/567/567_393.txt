 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String Z9 , String w0 , String c9 , String g2 , String p3 ) {  <CR> super ( Z9 , w0 , c9 , g2 , p3 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String a8 , String E6 , String v7 , String i7 , String E5 ) {  <CR> super ( a8 , E6 , v7 , i7 , E5 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String senderAddr ;  <CR> String receiverAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Envelop ( String P2 , String S8 , Letter Q7 ) {  <CR> this . senderAddr = P2 ;  <CR> this . receiverAddr = S8 ;  <CR> this . letter = Q7 ;  <CR> }  <CR> Letter letter ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> abstract protected void display ( ) ;  <CR> int valueOf ( String L ) {  <CR> int w0 = 0 ;  <CR> for ( int D8 = 0 ; D8 < L . length ( ) ; D8 ++ ) {  <CR> char z8 = L . charAt ( D8 ) ;  <CR> w0 = w0 * 10 + z8 - '0' ;  <CR> }  <CR> return w0 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> public int compareTo ( Object I ) {  <CR> Letter U0 = ( Letter ) I ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> boolean same ;  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> Letter ( String V1 , String t9 , String d4 , String s2 , String i5 ) {  <CR> this . title = V1 ;  <CR> this . receiver = t9 ;  <CR> this . content = d4 ;  <CR> this . sender = s2 ;  <CR> this . date = i5 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] b7 ) {  <CR> Letter [ ] U2 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( U2 ) ;  <CR> for ( int K3 = 0 ; K3 < 3 ; K3 ++ )  <CR> U2 [ K3 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 