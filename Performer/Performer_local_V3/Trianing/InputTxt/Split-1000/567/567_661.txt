 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String p8 , String Q3 , String W2 , String G6 , String y5 ) {  <CR> super ( p8 , Q3 , W2 , G6 , y5 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String L7 , String X9 , String e6 , String h1 , String h0 ) {  <CR> super ( L7 , X9 , e6 , h1 , h0 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String receiverAddr ;  <CR> Letter letter ;  <CR> String senderAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Envelop ( String h5 , String L2 , Letter K6 ) {  <CR> this . senderAddr = h5 ;  <CR> this . receiverAddr = L2 ;  <CR> this . letter = K6 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> int valueOf ( String r9 ) {  <CR> int m2 = 0 ;  <CR> for ( int D7 = 0 ; D7 < r9 . length ( ) ; D7 ++ ) {  <CR> char A0 = r9 . charAt ( D7 ) ;  <CR> m2 = m2 * 10 + A0 - '0' ;  <CR> }  <CR> return m2 ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> boolean same ;  <CR> abstract protected void display ( ) ;  <CR> public int compareTo ( Object C4 ) {  <CR> Letter b9 = ( Letter ) C4 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> Letter ( String J6 , String A2 , String d2 , String Z7 , String V8 ) {  <CR> this . title = J6 ;  <CR> this . receiver = A2 ;  <CR> this . content = d2 ;  <CR> this . sender = Z7 ;  <CR> this . date = V8 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] v9 ) {  <CR> Letter [ ] B8 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( B8 ) ;  <CR> for ( int r7 = 0 ; r7 < 3 ; r7 ++ )  <CR> B8 [ r7 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 