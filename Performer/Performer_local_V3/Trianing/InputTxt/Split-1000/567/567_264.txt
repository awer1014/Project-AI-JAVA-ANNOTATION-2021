 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String t0 , String P3 , String f , String P0 , String g9 ) {  <CR> super ( t0 , P3 , f , P0 , g9 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String I9 , String j9 , String E8 , String N0 , String D3 ) {  <CR> super ( I9 , j9 , E8 , N0 , D3 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> Envelop ( String i4 , String N1 , Letter C6 ) {  <CR> this . senderAddr = i4 ;  <CR> this . receiverAddr = N1 ;  <CR> this . letter = C6 ;  <CR> }  <CR> Letter letter ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String receiverAddr ;  <CR> String senderAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> int valueOf ( String x2 ) {  <CR> int l1 = 0 ;  <CR> for ( int X6 = 0 ; X6 < x2 . length ( ) ; X6 ++ ) {  <CR> char G1 = x2 . charAt ( X6 ) ;  <CR> l1 = l1 * 10 + G1 - '0' ;  <CR> }  <CR> return l1 ;  <CR> }  <CR> Letter ( String A5 , String p5 , String Q9 , String k0 , String a8 ) {  <CR> this . title = A5 ;  <CR> this . receiver = p5 ;  <CR> this . content = Q9 ;  <CR> this . sender = k0 ;  <CR> this . date = a8 ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> boolean same ;  <CR> String title , receiver , content , sender , date ;  <CR> public int compareTo ( Object q3 ) {  <CR> Letter s9 = ( Letter ) q3 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] Y3 ) {  <CR> Letter [ ] x7 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( x7 ) ;  <CR> for ( int J1 = 0 ; J1 < 3 ; J1 ++ )  <CR> x7 [ J1 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 