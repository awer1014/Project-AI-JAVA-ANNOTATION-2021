 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String e1 , String t8 , String e5 , String q5 , String j3 ) {  <CR> super ( e1 , t8 , e5 , q5 , j3 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String c5 , String z4 , String Z6 , String f3 , String d0 ) {  <CR> super ( c5 , z4 , Z6 , f3 , d0 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Letter letter ;  <CR> String receiverAddr ;  <CR> String senderAddr ;  <CR> Envelop ( String t , String M5 , Letter I7 ) {  <CR> this . senderAddr = t ;  <CR> this . receiverAddr = M5 ;  <CR> this . letter = I7 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> boolean same ;  <CR> abstract protected void display ( ) ;  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> int valueOf ( String Z2 ) {  <CR> int O6 = 0 ;  <CR> for ( int t8 = 0 ; t8 < Z2 . length ( ) ; t8 ++ ) {  <CR> char V8 = Z2 . charAt ( t8 ) ;  <CR> O6 = O6 * 10 + V8 - '0' ;  <CR> }  <CR> return O6 ;  <CR> }  <CR> Letter ( String x0 , String s2 , String u , String q , String B3 ) {  <CR> this . title = x0 ;  <CR> this . receiver = s2 ;  <CR> this . content = u ;  <CR> this . sender = q ;  <CR> this . date = B3 ;  <CR> }  <CR> public int compareTo ( Object g6 ) {  <CR> Letter g1 = ( Letter ) g6 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] v9 ) {  <CR> Letter [ ] T2 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( T2 ) ;  <CR> for ( int b6 = 0 ; b6 < 3 ; b6 ++ )  <CR> T2 [ b6 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 