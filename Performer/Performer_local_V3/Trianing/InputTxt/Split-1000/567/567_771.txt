 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String k0 , String B7 , String S5 , String Z6 , String Y9 ) {  <CR> super ( k0 , B7 , S5 , Z6 , Y9 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String t3 , String a7 , String B2 , String I3 , String Z8 ) {  <CR> super ( t3 , a7 , B2 , I3 , Z8 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String senderAddr ;  <CR> Envelop ( String X6 , String u8 , Letter b5 ) {  <CR> this . senderAddr = X6 ;  <CR> this . receiverAddr = u8 ;  <CR> this . letter = b5 ;  <CR> }  <CR> Letter letter ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String receiverAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> int valueOf ( String e9 ) {  <CR> int o = 0 ;  <CR> for ( int d1 = 0 ; d1 < e9 . length ( ) ; d1 ++ ) {  <CR> char S7 = e9 . charAt ( d1 ) ;  <CR> o = o * 10 + S7 - '0' ;  <CR> }  <CR> return o ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> boolean same ;  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> public int compareTo ( Object X6 ) {  <CR> Letter Y7 = ( Letter ) X6 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> Letter ( String y6 , String w4 , String S2 , String z3 , String u1 ) {  <CR> this . title = y6 ;  <CR> this . receiver = w4 ;  <CR> this . content = S2 ;  <CR> this . sender = z3 ;  <CR> this . date = u1 ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] y9 ) {  <CR> Letter [ ] N9 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( N9 ) ;  <CR> for ( int x0 = 0 ; x0 < 3 ; x0 ++ )  <CR> N9 [ x0 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 