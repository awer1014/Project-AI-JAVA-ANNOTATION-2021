 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String J2 , String P6 , String I2 , String d4 , String J0 ) {  <CR> super ( J2 , P6 , I2 , d4 , J0 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String N2 , String O7 , String l6 , String j3 , String B3 ) {  <CR> super ( N2 , O7 , l6 , j3 , B3 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String senderAddr ;  <CR> Envelop ( String W8 , String p2 , Letter d8 ) {  <CR> this . senderAddr = W8 ;  <CR> this . receiverAddr = p2 ;  <CR> this . letter = d8 ;  <CR> }  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Letter letter ;  <CR> String receiverAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> int valueOf ( String I ) {  <CR> int n3 = 0 ;  <CR> for ( int b5 = 0 ; b5 < I . length ( ) ; b5 ++ ) {  <CR> char x6 = I . charAt ( b5 ) ;  <CR> n3 = n3 * 10 + x6 - '0' ;  <CR> }  <CR> return n3 ;  <CR> }  <CR> boolean same ;  <CR> Letter ( String j0 , String s4 , String i6 , String c8 , String v4 ) {  <CR> this . title = j0 ;  <CR> this . receiver = s4 ;  <CR> this . content = i6 ;  <CR> this . sender = c8 ;  <CR> this . date = v4 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> public int compareTo ( Object Z7 ) {  <CR> Letter y1 = ( Letter ) Z7 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] e4 ) {  <CR> Letter [ ] n8 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( n8 ) ;  <CR> for ( int c = 0 ; c < 3 ; c ++ )  <CR> n8 [ c ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 