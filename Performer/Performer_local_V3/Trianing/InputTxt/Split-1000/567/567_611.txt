 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String U1 , String A5 , String y4 , String C8 , String A1 ) {  <CR> super ( U1 , A5 , y4 , C8 , A1 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String D7 , String r0 , String w1 , String T6 , String y7 ) {  <CR> super ( D7 , r0 , w1 , T6 , y7 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String senderAddr ;  <CR> String receiverAddr ;  <CR> Letter letter ;  <CR> Envelop ( String H4 , String o3 , Letter f8 ) {  <CR> this . senderAddr = H4 ;  <CR> this . receiverAddr = o3 ;  <CR> this . letter = f8 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> int valueOf ( String y ) {  <CR> int V4 = 0 ;  <CR> for ( int u0 = 0 ; u0 < y . length ( ) ; u0 ++ ) {  <CR> char p2 = y . charAt ( u0 ) ;  <CR> V4 = V4 * 10 + p2 - '0' ;  <CR> }  <CR> return V4 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> public int compareTo ( Object e0 ) {  <CR> Letter u9 = ( Letter ) e0 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> Letter ( String X7 , String z9 , String g6 , String x8 , String h0 ) {  <CR> this . title = X7 ;  <CR> this . receiver = z9 ;  <CR> this . content = g6 ;  <CR> this . sender = x8 ;  <CR> this . date = h0 ;  <CR> }  <CR> boolean same ;  <CR> abstract protected void display ( ) ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] N6 ) {  <CR> Letter [ ] U3 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( U3 ) ;  <CR> for ( int L3 = 0 ; L3 < 3 ; L3 ++ )  <CR> U3 [ L3 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 