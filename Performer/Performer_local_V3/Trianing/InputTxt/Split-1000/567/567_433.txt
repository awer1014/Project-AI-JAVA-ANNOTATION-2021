 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String Q0 , String E4 , String M2 , String S0 , String k1 ) {  <CR> super ( Q0 , E4 , M2 , S0 , k1 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String a3 , String x8 , String J9 , String C8 , String g1 ) {  <CR> super ( a3 , x8 , J9 , C8 , g1 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String senderAddr ;  <CR> Envelop ( String q5 , String S8 , Letter H0 ) {  <CR> this . senderAddr = q5 ;  <CR> this . receiverAddr = S8 ;  <CR> this . letter = H0 ;  <CR> }  <CR> Letter letter ;  <CR> String receiverAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> int valueOf ( String C ) {  <CR> int z = 0 ;  <CR> for ( int n0 = 0 ; n0 < C . length ( ) ; n0 ++ ) {  <CR> char X7 = C . charAt ( n0 ) ;  <CR> z = z * 10 + X7 - '0' ;  <CR> }  <CR> return z ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> abstract protected void display ( ) ;  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> boolean same ;  <CR> public int compareTo ( Object E5 ) {  <CR> Letter e4 = ( Letter ) E5 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> Letter ( String B1 , String z3 , String L0 , String C8 , String e9 ) {  <CR> this . title = B1 ;  <CR> this . receiver = z3 ;  <CR> this . content = L0 ;  <CR> this . sender = C8 ;  <CR> this . date = e9 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] t4 ) {  <CR> Letter [ ] u5 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( u5 ) ;  <CR> for ( int d3 = 0 ; d3 < 3 ; d3 ++ )  <CR> u5 [ d3 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 