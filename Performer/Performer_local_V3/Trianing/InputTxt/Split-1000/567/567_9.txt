 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String v5 , String R5 , String X4 , String i1 , String J5 ) {  <CR> super ( v5 , R5 , X4 , i1 , J5 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String C9 , String T4 , String z0 , String d0 , String p4 ) {  <CR> super ( C9 , T4 , z0 , d0 , p4 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Envelop ( String B6 , String F3 , Letter a6 ) {  <CR> this . senderAddr = B6 ;  <CR> this . receiverAddr = F3 ;  <CR> this . letter = a6 ;  <CR> }  <CR> String senderAddr ;  <CR> Letter letter ;  <CR> String receiverAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> int valueOf ( String M8 ) {  <CR> int q2 = 0 ;  <CR> for ( int M9 = 0 ; M9 < M8 . length ( ) ; M9 ++ ) {  <CR> char l1 = M8 . charAt ( M9 ) ;  <CR> q2 = q2 * 10 + l1 - '0' ;  <CR> }  <CR> return q2 ;  <CR> }  <CR> boolean same ;  <CR> abstract protected void display ( ) ;  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> public int compareTo ( Object g1 ) {  <CR> Letter m9 = ( Letter ) g1 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> Letter ( String v2 , String o , String R0 , String m3 , String K6 ) {  <CR> this . title = v2 ;  <CR> this . receiver = o ;  <CR> this . content = R0 ;  <CR> this . sender = m3 ;  <CR> this . date = K6 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] W0 ) {  <CR> Letter [ ] X8 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( X8 ) ;  <CR> for ( int v = 0 ; v < 3 ; v ++ )  <CR> X8 [ v ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 