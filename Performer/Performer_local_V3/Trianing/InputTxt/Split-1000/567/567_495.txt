 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String H9 , String U1 , String T9 , String p5 , String D6 ) {  <CR> super ( H9 , U1 , T9 , p5 , D6 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String F8 , String F0 , String P4 , String T6 , String Z0 ) {  <CR> super ( F8 , F0 , P4 , T6 , Z0 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> Envelop ( String c9 , String d3 , Letter u9 ) {  <CR> this . senderAddr = c9 ;  <CR> this . receiverAddr = d3 ;  <CR> this . letter = u9 ;  <CR> }  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String senderAddr ;  <CR> String receiverAddr ;  <CR> Letter letter ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> int valueOf ( String d5 ) {  <CR> int b5 = 0 ;  <CR> for ( int s0 = 0 ; s0 < d5 . length ( ) ; s0 ++ ) {  <CR> char k9 = d5 . charAt ( s0 ) ;  <CR> b5 = b5 * 10 + k9 - '0' ;  <CR> }  <CR> return b5 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> String title , receiver , content , sender , date ;  <CR> public int compareTo ( Object i4 ) {  <CR> Letter T8 = ( Letter ) i4 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> Letter ( String A8 , String R2 , String x6 , String e8 , String o3 ) {  <CR> this . title = A8 ;  <CR> this . receiver = R2 ;  <CR> this . content = x6 ;  <CR> this . sender = e8 ;  <CR> this . date = o3 ;  <CR> }  <CR> boolean same ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] K8 ) {  <CR> Letter [ ] r6 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( r6 ) ;  <CR> for ( int W9 = 0 ; W9 < 3 ; W9 ++ )  <CR> r6 [ W9 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 