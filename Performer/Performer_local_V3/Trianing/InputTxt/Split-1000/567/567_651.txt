 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String p6 , String b3 , String j , String K , String M8 ) {  <CR> super ( p6 , b3 , j , K , M8 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String c9 , String I0 , String Q , String c7 , String l0 ) {  <CR> super ( c9 , I0 , Q , c7 , l0 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String receiverAddr ;  <CR> String senderAddr ;  <CR> Envelop ( String i3 , String V8 , Letter E9 ) {  <CR> this . senderAddr = i3 ;  <CR> this . receiverAddr = V8 ;  <CR> this . letter = E9 ;  <CR> }  <CR> Letter letter ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> abstract protected void display ( ) ;  <CR> int valueOf ( String v2 ) {  <CR> int D3 = 0 ;  <CR> for ( int V9 = 0 ; V9 < v2 . length ( ) ; V9 ++ ) {  <CR> char y5 = v2 . charAt ( V9 ) ;  <CR> D3 = D3 * 10 + y5 - '0' ;  <CR> }  <CR> return D3 ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> Letter ( String f2 , String o2 , String D4 , String b2 , String h7 ) {  <CR> this . title = f2 ;  <CR> this . receiver = o2 ;  <CR> this . content = D4 ;  <CR> this . sender = b2 ;  <CR> this . date = h7 ;  <CR> }  <CR> public int compareTo ( Object p3 ) {  <CR> Letter w6 = ( Letter ) p3 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> boolean same ;  <CR> String title , receiver , content , sender , date ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] N3 ) {  <CR> Letter [ ] t9 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( t9 ) ;  <CR> for ( int l = 0 ; l < 3 ; l ++ )  <CR> t9 [ l ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 