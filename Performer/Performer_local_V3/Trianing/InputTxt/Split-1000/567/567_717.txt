 <BOC> public class ChineseLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> ChineseLetter ( String n2 , String Z8 , String R0 , String V6 , String i3 ) {  <CR> super ( n2 , Z8 , R0 , V6 , i3 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String q8 , String c0 , String x9 , String w1 , String O6 ) {  <CR> super ( q8 , c0 , x9 , w1 , O6 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String receiverAddr ;  <CR> Letter letter ;  <CR> String senderAddr ;  <CR> Envelop ( String M5 , String l5 , Letter v1 ) {  <CR> this . senderAddr = M5 ;  <CR> this . receiverAddr = l5 ;  <CR> this . letter = v1 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> Letter ( String Z6 , String c8 , String c , String D6 , String g3 ) {  <CR> this . title = Z6 ;  <CR> this . receiver = c8 ;  <CR> this . content = c ;  <CR> this . sender = D6 ;  <CR> this . date = g3 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> int valueOf ( String Z ) {  <CR> int e9 = 0 ;  <CR> for ( int f1 = 0 ; f1 < Z . length ( ) ; f1 ++ ) {  <CR> char t8 = Z . charAt ( f1 ) ;  <CR> e9 = e9 * 10 + t8 - '0' ;  <CR> }  <CR> return e9 ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> public int compareTo ( Object Z8 ) {  <CR> Letter C9 = ( Letter ) Z8 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> boolean same ;  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] J8 ) {  <CR> Letter [ ] r5 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( r5 ) ;  <CR> for ( int m7 = 0 ; m7 < 3 ; m7 ++ )  <CR> r5 [ m7 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 