 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String B0 , String u0 , String G0 , String E0 , String U0 ) {  <CR> super ( B0 , u0 , G0 , E0 , U0 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String U3 , String Z2 , String q3 , String Z4 , String T2 ) {  <CR> super ( U3 , Z2 , q3 , Z4 , T2 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String senderAddr ;  <CR> Letter letter ;  <CR> Envelop ( String S7 , String Z0 , Letter o9 ) {  <CR> this . senderAddr = S7 ;  <CR> this . receiverAddr = Z0 ;  <CR> this . letter = o9 ;  <CR> }  <CR> String receiverAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> abstract protected void display ( ) ;  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> Letter ( String t6 , String Y6 , String F4 , String w , String I6 ) {  <CR> this . title = t6 ;  <CR> this . receiver = Y6 ;  <CR> this . content = F4 ;  <CR> this . sender = w ;  <CR> this . date = I6 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> public int compareTo ( Object k ) {  <CR> Letter T9 = ( Letter ) k ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> int valueOf ( String l4 ) {  <CR> int t7 = 0 ;  <CR> for ( int U9 = 0 ; U9 < l4 . length ( ) ; U9 ++ ) {  <CR> char w4 = l4 . charAt ( U9 ) ;  <CR> t7 = t7 * 10 + w4 - '0' ;  <CR> }  <CR> return t7 ;  <CR> }  <CR> boolean same ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] A0 ) {  <CR> Letter [ ] K9 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( K9 ) ;  <CR> for ( int S3 = 0 ; S3 < 3 ; S3 ++ )  <CR> K9 [ S3 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 