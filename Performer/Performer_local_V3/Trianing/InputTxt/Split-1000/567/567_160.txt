 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String X4 , String g8 , String F5 , String r6 , String X8 ) {  <CR> super ( X4 , g8 , F5 , r6 , X8 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String g5 , String K3 , String W1 , String K1 , String j4 ) {  <CR> super ( g5 , K3 , W1 , K1 , j4 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String receiverAddr ;  <CR> Envelop ( String Y5 , String Q3 , Letter y3 ) {  <CR> this . senderAddr = Y5 ;  <CR> this . receiverAddr = Q3 ;  <CR> this . letter = y3 ;  <CR> }  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Letter letter ;  <CR> String senderAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> Letter ( String J3 , String y , String U3 , String V9 , String y8 ) {  <CR> this . title = J3 ;  <CR> this . receiver = y ;  <CR> this . content = U3 ;  <CR> this . sender = V9 ;  <CR> this . date = y8 ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> int valueOf ( String E6 ) {  <CR> int D8 = 0 ;  <CR> for ( int O1 = 0 ; O1 < E6 . length ( ) ; O1 ++ ) {  <CR> char K0 = E6 . charAt ( O1 ) ;  <CR> D8 = D8 * 10 + K0 - '0' ;  <CR> }  <CR> return D8 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> public int compareTo ( Object S6 ) {  <CR> Letter D9 = ( Letter ) S6 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> boolean same ;  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] U2 ) {  <CR> Letter [ ] J2 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( J2 ) ;  <CR> for ( int K7 = 0 ; K7 < 3 ; K7 ++ )  <CR> J2 [ K7 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 