 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String O7 , String M3 , String J7 , String c6 , String e2 ) {  <CR> super ( O7 , M3 , J7 , c6 , e2 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String I , String N5 , String g1 , String s , String p2 ) {  <CR> super ( I , N5 , g1 , s , p2 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String receiverAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Envelop ( String b8 , String q1 , Letter e0 ) {  <CR> this . senderAddr = b8 ;  <CR> this . receiverAddr = q1 ;  <CR> this . letter = e0 ;  <CR> }  <CR> String senderAddr ;  <CR> Letter letter ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> int valueOf ( String l0 ) {  <CR> int o6 = 0 ;  <CR> for ( int a8 = 0 ; a8 < l0 . length ( ) ; a8 ++ ) {  <CR> char K0 = l0 . charAt ( a8 ) ;  <CR> o6 = o6 * 10 + K0 - '0' ;  <CR> }  <CR> return o6 ;  <CR> }  <CR> public int compareTo ( Object o0 ) {  <CR> Letter s8 = ( Letter ) o0 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> boolean same ;  <CR> String title , receiver , content , sender , date ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> Letter ( String L , String k3 , String U2 , String u2 , String D5 ) {  <CR> this . title = L ;  <CR> this . receiver = k3 ;  <CR> this . content = U2 ;  <CR> this . sender = u2 ;  <CR> this . date = D5 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] F2 ) {  <CR> Letter [ ] E1 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( E1 ) ;  <CR> for ( int g5 = 0 ; g5 < 3 ; g5 ++ )  <CR> E1 [ g5 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 