 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String x3 , String U6 , String i8 , String Y4 , String X6 ) {  <CR> super ( x3 , U6 , i8 , Y4 , X6 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String z5 , String C6 , String n2 , String A5 , String v2 ) {  <CR> super ( z5 , C6 , n2 , A5 , v2 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> Letter letter ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String senderAddr ;  <CR> String receiverAddr ;  <CR> Envelop ( String Y2 , String H9 , Letter l9 ) {  <CR> this . senderAddr = Y2 ;  <CR> this . receiverAddr = H9 ;  <CR> this . letter = l9 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String title , receiver , content , sender , date ;  <CR> abstract protected void display ( ) ;  <CR> int valueOf ( String e1 ) {  <CR> int A2 = 0 ;  <CR> for ( int r2 = 0 ; r2 < e1 . length ( ) ; r2 ++ ) {  <CR> char x6 = e1 . charAt ( r2 ) ;  <CR> A2 = A2 * 10 + x6 - '0' ;  <CR> }  <CR> return A2 ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> Letter ( String f7 , String M2 , String T9 , String D7 , String g8 ) {  <CR> this . title = f7 ;  <CR> this . receiver = M2 ;  <CR> this . content = T9 ;  <CR> this . sender = D7 ;  <CR> this . date = g8 ;  <CR> }  <CR> public int compareTo ( Object t ) {  <CR> Letter W2 = ( Letter ) t ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> boolean same ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] q6 ) {  <CR> Letter [ ] Q7 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( Q7 ) ;  <CR> for ( int K7 = 0 ; K7 < 3 ; K7 ++ )  <CR> Q7 [ K7 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 