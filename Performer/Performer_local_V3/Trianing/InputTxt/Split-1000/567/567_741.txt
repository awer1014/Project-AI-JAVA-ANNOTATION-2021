 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String E3 , String q7 , String D , String B3 , String X9 ) {  <CR> super ( E3 , q7 , D , B3 , X9 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String X2 , String c8 , String k8 , String F9 , String H7 ) {  <CR> super ( X2 , c8 , k8 , F9 , H7 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Letter letter ;  <CR> Envelop ( String Z2 , String R9 , Letter U1 ) {  <CR> this . senderAddr = Z2 ;  <CR> this . receiverAddr = R9 ;  <CR> this . letter = U1 ;  <CR> }  <CR> String senderAddr ;  <CR> String receiverAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> Letter ( String H7 , String X9 , String F1 , String K8 , String H ) {  <CR> this . title = H7 ;  <CR> this . receiver = X9 ;  <CR> this . content = F1 ;  <CR> this . sender = K8 ;  <CR> this . date = H ;  <CR> }  <CR> int valueOf ( String k7 ) {  <CR> int c6 = 0 ;  <CR> for ( int H0 = 0 ; H0 < k7 . length ( ) ; H0 ++ ) {  <CR> char z0 = k7 . charAt ( H0 ) ;  <CR> c6 = c6 * 10 + z0 - '0' ;  <CR> }  <CR> return c6 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> public int compareTo ( Object f0 ) {  <CR> Letter L6 = ( Letter ) f0 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> boolean same ;  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] h0 ) {  <CR> Letter [ ] m3 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( m3 ) ;  <CR> for ( int r8 = 0 ; r8 < 3 ; r8 ++ )  <CR> m3 [ r8 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 