 <BOC> public class ChineseLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> ChineseLetter ( String e1 , String h2 , String M4 , String z1 , String K1 ) {  <CR> super ( e1 , h2 , M4 , z1 , K1 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String T0 , String k7 , String f , String i3 , String U8 ) {  <CR> super ( T0 , k7 , f , i3 , U8 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String senderAddr ;  <CR> Letter letter ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Envelop ( String f9 , String Y , Letter n4 ) {  <CR> this . senderAddr = f9 ;  <CR> this . receiverAddr = Y ;  <CR> this . letter = n4 ;  <CR> }  <CR> String receiverAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> int valueOf ( String B1 ) {  <CR> int u5 = 0 ;  <CR> for ( int X9 = 0 ; X9 < B1 . length ( ) ; X9 ++ ) {  <CR> char c6 = B1 . charAt ( X9 ) ;  <CR> u5 = u5 * 10 + c6 - '0' ;  <CR> }  <CR> return u5 ;  <CR> }  <CR> public int compareTo ( Object F4 ) {  <CR> Letter a2 = ( Letter ) F4 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> boolean same ;  <CR> abstract protected void display ( ) ;  <CR> String title , receiver , content , sender , date ;  <CR> Letter ( String L2 , String r7 , String O3 , String U , String M ) {  <CR> this . title = L2 ;  <CR> this . receiver = r7 ;  <CR> this . content = O3 ;  <CR> this . sender = U ;  <CR> this . date = M ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] S0 ) {  <CR> Letter [ ] D = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( D ) ;  <CR> for ( int Z4 = 0 ; Z4 < 3 ; Z4 ++ )  <CR> D [ Z4 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 