 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String W3 , String v7 , String x0 , String o4 , String k1 ) {  <CR> super ( W3 , v7 , x0 , o4 , k1 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String m5 , String t9 , String g6 , String H0 , String C4 ) {  <CR> super ( m5 , t9 , g6 , H0 , C4 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> Letter letter ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String receiverAddr ;  <CR> Envelop ( String t3 , String n8 , Letter e1 ) {  <CR> this . senderAddr = t3 ;  <CR> this . receiverAddr = n8 ;  <CR> this . letter = e1 ;  <CR> }  <CR> String senderAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String title , receiver , content , sender , date ;  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> Letter ( String Z0 , String i2 , String N9 , String F2 , String f8 ) {  <CR> this . title = Z0 ;  <CR> this . receiver = i2 ;  <CR> this . content = N9 ;  <CR> this . sender = F2 ;  <CR> this . date = f8 ;  <CR> }  <CR> int valueOf ( String r8 ) {  <CR> int x9 = 0 ;  <CR> for ( int n6 = 0 ; n6 < r8 . length ( ) ; n6 ++ ) {  <CR> char O = r8 . charAt ( n6 ) ;  <CR> x9 = x9 * 10 + O - '0' ;  <CR> }  <CR> return x9 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> public int compareTo ( Object r6 ) {  <CR> Letter g1 = ( Letter ) r6 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> boolean same ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] Z1 ) {  <CR> Letter [ ] D9 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( D9 ) ;  <CR> for ( int e4 = 0 ; e4 < 3 ; e4 ++ )  <CR> D9 [ e4 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 