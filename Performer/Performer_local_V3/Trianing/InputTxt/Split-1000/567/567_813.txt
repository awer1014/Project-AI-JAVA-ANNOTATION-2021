 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String l4 , String X6 , String E7 , String A9 , String l8 ) {  <CR> super ( l4 , X6 , E7 , A9 , l8 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String W4 , String w6 , String P , String u1 , String F3 ) {  <CR> super ( W4 , w6 , P , u1 , F3 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String receiverAddr ;  <CR> String senderAddr ;  <CR> Letter letter ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Envelop ( String N9 , String c3 , Letter M1 ) {  <CR> this . senderAddr = N9 ;  <CR> this . receiverAddr = c3 ;  <CR> this . letter = M1 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> abstract protected void display ( ) ;  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> int valueOf ( String d3 ) {  <CR> int z9 = 0 ;  <CR> for ( int q = 0 ; q < d3 . length ( ) ; q ++ ) {  <CR> char S5 = d3 . charAt ( q ) ;  <CR> z9 = z9 * 10 + S5 - '0' ;  <CR> }  <CR> return z9 ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> boolean same ;  <CR> public int compareTo ( Object y6 ) {  <CR> Letter n = ( Letter ) y6 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> Letter ( String F4 , String F3 , String X6 , String v2 , String Z8 ) {  <CR> this . title = F4 ;  <CR> this . receiver = F3 ;  <CR> this . content = X6 ;  <CR> this . sender = v2 ;  <CR> this . date = Z8 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] E2 ) {  <CR> Letter [ ] V4 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( V4 ) ;  <CR> for ( int R2 = 0 ; R2 < 3 ; R2 ++ )  <CR> V4 [ R2 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 