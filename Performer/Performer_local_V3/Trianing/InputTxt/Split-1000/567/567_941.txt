 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String m , String T1 , String S9 , String X6 , String H4 ) {  <CR> super ( m , T1 , S9 , X6 , H4 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String Z0 , String V , String S6 , String d2 , String n8 ) {  <CR> super ( Z0 , V , S6 , d2 , n8 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Envelop ( String C4 , String Q6 , Letter t0 ) {  <CR> this . senderAddr = C4 ;  <CR> this . receiverAddr = Q6 ;  <CR> this . letter = t0 ;  <CR> }  <CR> String receiverAddr ;  <CR> String senderAddr ;  <CR> Letter letter ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> abstract protected void display ( ) ;  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> Letter ( String R4 , String a2 , String W , String l8 , String b ) {  <CR> this . title = R4 ;  <CR> this . receiver = a2 ;  <CR> this . content = W ;  <CR> this . sender = l8 ;  <CR> this . date = b ;  <CR> }  <CR> public int compareTo ( Object L5 ) {  <CR> Letter Y4 = ( Letter ) L5 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> int valueOf ( String I7 ) {  <CR> int H5 = 0 ;  <CR> for ( int K8 = 0 ; K8 < I7 . length ( ) ; K8 ++ ) {  <CR> char g8 = I7 . charAt ( K8 ) ;  <CR> H5 = H5 * 10 + g8 - '0' ;  <CR> }  <CR> return H5 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> boolean same ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] T7 ) {  <CR> Letter [ ] K7 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( K7 ) ;  <CR> for ( int p1 = 0 ; p1 < 3 ; p1 ++ )  <CR> K7 [ p1 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 