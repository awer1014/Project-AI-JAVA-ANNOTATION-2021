 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String q3 , String j , String n1 , String M2 , String j4 ) {  <CR> super ( q3 , j , n1 , M2 , j4 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String p0 , String S1 , String w , String O6 , String m ) {  <CR> super ( p0 , S1 , w , O6 , m ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> Letter letter ;  <CR> String senderAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String receiverAddr ;  <CR> Envelop ( String g4 , String z1 , Letter T7 ) {  <CR> this . senderAddr = g4 ;  <CR> this . receiverAddr = z1 ;  <CR> this . letter = T7 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> Letter ( String J4 , String Z1 , String a8 , String R4 , String G6 ) {  <CR> this . title = J4 ;  <CR> this . receiver = Z1 ;  <CR> this . content = a8 ;  <CR> this . sender = R4 ;  <CR> this . date = G6 ;  <CR> }  <CR> public int compareTo ( Object i8 ) {  <CR> Letter H7 = ( Letter ) i8 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> int valueOf ( String M9 ) {  <CR> int C2 = 0 ;  <CR> for ( int F5 = 0 ; F5 < M9 . length ( ) ; F5 ++ ) {  <CR> char M0 = M9 . charAt ( F5 ) ;  <CR> C2 = C2 * 10 + M0 - '0' ;  <CR> }  <CR> return C2 ;  <CR> }  <CR> boolean same ;  <CR> abstract protected void display ( ) ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] o4 ) {  <CR> Letter [ ] M7 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( M7 ) ;  <CR> for ( int F7 = 0 ; F7 < 3 ; F7 ++ )  <CR> M7 [ F7 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 