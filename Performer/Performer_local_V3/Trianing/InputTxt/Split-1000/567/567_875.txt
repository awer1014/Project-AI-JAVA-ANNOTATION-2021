 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String h3 , String f8 , String g9 , String B2 , String n8 ) {  <CR> super ( h3 , f8 , g9 , B2 , n8 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String T0 , String E1 , String B6 , String f3 , String V3 ) {  <CR> super ( T0 , E1 , B6 , f3 , V3 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String senderAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String receiverAddr ;  <CR> Letter letter ;  <CR> Envelop ( String U3 , String P6 , Letter W7 ) {  <CR> this . senderAddr = U3 ;  <CR> this . receiverAddr = P6 ;  <CR> this . letter = W7 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> abstract protected void display ( ) ;  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> int valueOf ( String c8 ) {  <CR> int C2 = 0 ;  <CR> for ( int F = 0 ; F < c8 . length ( ) ; F ++ ) {  <CR> char I4 = c8 . charAt ( F ) ;  <CR> C2 = C2 * 10 + I4 - '0' ;  <CR> }  <CR> return C2 ;  <CR> }  <CR> Letter ( String J3 , String M5 , String H9 , String o1 , String v7 ) {  <CR> this . title = J3 ;  <CR> this . receiver = M5 ;  <CR> this . content = H9 ;  <CR> this . sender = o1 ;  <CR> this . date = v7 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> public int compareTo ( Object P3 ) {  <CR> Letter A0 = ( Letter ) P3 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> boolean same ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] L2 ) {  <CR> Letter [ ] s2 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( s2 ) ;  <CR> for ( int W3 = 0 ; W3 < 3 ; W3 ++ )  <CR> s2 [ W3 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 