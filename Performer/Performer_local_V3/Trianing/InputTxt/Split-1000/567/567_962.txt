 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String U3 , String x6 , String M9 , String N9 , String A3 ) {  <CR> super ( U3 , x6 , M9 , N9 , A3 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String o4 , String b3 , String q1 , String U1 , String E6 ) {  <CR> super ( o4 , b3 , q1 , U1 , E6 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> Letter letter ;  <CR> String senderAddr ;  <CR> String receiverAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Envelop ( String y3 , String R , Letter Z7 ) {  <CR> this . senderAddr = y3 ;  <CR> this . receiverAddr = R ;  <CR> this . letter = Z7 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> Letter ( String t , String z1 , String U3 , String R2 , String g1 ) {  <CR> this . title = t ;  <CR> this . receiver = z1 ;  <CR> this . content = U3 ;  <CR> this . sender = R2 ;  <CR> this . date = g1 ;  <CR> }  <CR> int valueOf ( String u7 ) {  <CR> int K7 = 0 ;  <CR> for ( int C = 0 ; C < u7 . length ( ) ; C ++ ) {  <CR> char L1 = u7 . charAt ( C ) ;  <CR> K7 = K7 * 10 + L1 - '0' ;  <CR> }  <CR> return K7 ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> abstract protected void display ( ) ;  <CR> public int compareTo ( Object O6 ) {  <CR> Letter u8 = ( Letter ) O6 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> boolean same ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] k6 ) {  <CR> Letter [ ] S = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( S ) ;  <CR> for ( int A3 = 0 ; A3 < 3 ; A3 ++ )  <CR> S [ A3 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 