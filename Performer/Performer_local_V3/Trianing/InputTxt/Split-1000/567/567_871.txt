 <BOC> public class ChineseLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> ChineseLetter ( String M9 , String d5 , String s4 , String B8 , String X3 ) {  <CR> super ( M9 , d5 , s4 , B8 , X3 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String j3 , String g7 , String c5 , String L9 , String B0 ) {  <CR> super ( j3 , g7 , c5 , L9 , B0 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Envelop ( String t0 , String c , Letter M7 ) {  <CR> this . senderAddr = t0 ;  <CR> this . receiverAddr = c ;  <CR> this . letter = M7 ;  <CR> }  <CR> String receiverAddr ;  <CR> String senderAddr ;  <CR> Letter letter ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> public int compareTo ( Object Q3 ) {  <CR> Letter d1 = ( Letter ) Q3 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> boolean same ;  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> Letter ( String V7 , String w , String i6 , String Q7 , String q5 ) {  <CR> this . title = V7 ;  <CR> this . receiver = w ;  <CR> this . content = i6 ;  <CR> this . sender = Q7 ;  <CR> this . date = q5 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> int valueOf ( String x6 ) {  <CR> int k7 = 0 ;  <CR> for ( int H = 0 ; H < x6 . length ( ) ; H ++ ) {  <CR> char Q5 = x6 . charAt ( H ) ;  <CR> k7 = k7 * 10 + Q5 - '0' ;  <CR> }  <CR> return k7 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] y6 ) {  <CR> Letter [ ] x7 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( x7 ) ;  <CR> for ( int K9 = 0 ; K9 < 3 ; K9 ++ )  <CR> x7 [ K9 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 