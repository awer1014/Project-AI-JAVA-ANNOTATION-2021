 <BOC> public class ChineseLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> ChineseLetter ( String k5 , String d2 , String c2 , String B9 , String x3 ) {  <CR> super ( k5 , d2 , c2 , B9 , x3 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String V0 , String v7 , String i1 , String a9 , String W8 ) {  <CR> super ( V0 , v7 , i1 , a9 , W8 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String senderAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Envelop ( String M1 , String f , Letter j3 ) {  <CR> this . senderAddr = M1 ;  <CR> this . receiverAddr = f ;  <CR> this . letter = j3 ;  <CR> }  <CR> String receiverAddr ;  <CR> Letter letter ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> abstract protected void display ( ) ;  <CR> boolean same ;  <CR> public int compareTo ( Object i7 ) {  <CR> Letter f9 = ( Letter ) i7 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> int valueOf ( String U1 ) {  <CR> int s1 = 0 ;  <CR> for ( int G7 = 0 ; G7 < U1 . length ( ) ; G7 ++ ) {  <CR> char U4 = U1 . charAt ( G7 ) ;  <CR> s1 = s1 * 10 + U4 - '0' ;  <CR> }  <CR> return s1 ;  <CR> }  <CR> Letter ( String u1 , String R8 , String l6 , String q6 , String F3 ) {  <CR> this . title = u1 ;  <CR> this . receiver = R8 ;  <CR> this . content = l6 ;  <CR> this . sender = q6 ;  <CR> this . date = F3 ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] b9 ) {  <CR> Letter [ ] z0 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( z0 ) ;  <CR> for ( int N0 = 0 ; N0 < 3 ; N0 ++ )  <CR> z0 [ N0 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 