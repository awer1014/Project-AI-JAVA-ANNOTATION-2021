 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String R2 , String f9 , String q0 , String n7 , String j ) {  <CR> super ( R2 , f9 , q0 , n7 , j ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String O7 , String T , String a0 , String E6 , String Y3 ) {  <CR> super ( O7 , T , a0 , E6 , Y3 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> Letter letter ;  <CR> String receiverAddr ;  <CR> Envelop ( String l2 , String U3 , Letter Q5 ) {  <CR> this . senderAddr = l2 ;  <CR> this . receiverAddr = U3 ;  <CR> this . letter = Q5 ;  <CR> }  <CR> String senderAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> Letter ( String Y7 , String U , String W2 , String P4 , String U9 ) {  <CR> this . title = Y7 ;  <CR> this . receiver = U ;  <CR> this . content = W2 ;  <CR> this . sender = P4 ;  <CR> this . date = U9 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> boolean same ;  <CR> int valueOf ( String H9 ) {  <CR> int Z3 = 0 ;  <CR> for ( int l8 = 0 ; l8 < H9 . length ( ) ; l8 ++ ) {  <CR> char y7 = H9 . charAt ( l8 ) ;  <CR> Z3 = Z3 * 10 + y7 - '0' ;  <CR> }  <CR> return Z3 ;  <CR> }  <CR> public int compareTo ( Object C1 ) {  <CR> Letter k7 = ( Letter ) C1 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] w8 ) {  <CR> Letter [ ] J7 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( J7 ) ;  <CR> for ( int V4 = 0 ; V4 < 3 ; V4 ++ )  <CR> J7 [ V4 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 