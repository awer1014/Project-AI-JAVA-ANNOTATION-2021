 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String S0 , String b1 , String o0 , String d9 , String q ) {  <CR> super ( S0 , b1 , o0 , d9 , q ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String f , String T0 , String K5 , String j9 , String U4 ) {  <CR> super ( f , T0 , K5 , j9 , U4 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String senderAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Envelop ( String P1 , String e4 , Letter F4 ) {  <CR> this . senderAddr = P1 ;  <CR> this . receiverAddr = e4 ;  <CR> this . letter = F4 ;  <CR> }  <CR> Letter letter ;  <CR> String receiverAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> Letter ( String N7 , String a1 , String S6 , String s8 , String P0 ) {  <CR> this . title = N7 ;  <CR> this . receiver = a1 ;  <CR> this . content = S6 ;  <CR> this . sender = s8 ;  <CR> this . date = P0 ;  <CR> }  <CR> boolean same ;  <CR> public int compareTo ( Object b0 ) {  <CR> Letter j1 = ( Letter ) b0 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> int valueOf ( String k2 ) {  <CR> int g = 0 ;  <CR> for ( int M = 0 ; M < k2 . length ( ) ; M ++ ) {  <CR> char f0 = k2 . charAt ( M ) ;  <CR> g = g * 10 + f0 - '0' ;  <CR> }  <CR> return g ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] v1 ) {  <CR> Letter [ ] m1 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( m1 ) ;  <CR> for ( int b0 = 0 ; b0 < 3 ; b0 ++ )  <CR> m1 [ b0 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 