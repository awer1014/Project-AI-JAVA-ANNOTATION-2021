 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String R3 , String a6 , String L8 , String w3 , String n6 ) {  <CR> super ( R3 , a6 , L8 , w3 , n6 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String c0 , String w5 , String e4 , String X2 , String Z1 ) {  <CR> super ( c0 , w5 , e4 , X2 , Z1 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> Letter letter ;  <CR> String receiverAddr ;  <CR> String senderAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Envelop ( String n5 , String c7 , Letter E7 ) {  <CR> this . senderAddr = n5 ;  <CR> this . receiverAddr = c7 ;  <CR> this . letter = E7 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> Letter ( String I8 , String J5 , String h4 , String D4 , String u3 ) {  <CR> this . title = I8 ;  <CR> this . receiver = J5 ;  <CR> this . content = h4 ;  <CR> this . sender = D4 ;  <CR> this . date = u3 ;  <CR> }  <CR> public int compareTo ( Object I0 ) {  <CR> Letter c0 = ( Letter ) I0 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> boolean same ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> String title , receiver , content , sender , date ;  <CR> int valueOf ( String h8 ) {  <CR> int k4 = 0 ;  <CR> for ( int x2 = 0 ; x2 < h8 . length ( ) ; x2 ++ ) {  <CR> char z0 = h8 . charAt ( x2 ) ;  <CR> k4 = k4 * 10 + z0 - '0' ;  <CR> }  <CR> return k4 ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] B0 ) {  <CR> Letter [ ] c1 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( c1 ) ;  <CR> for ( int K3 = 0 ; K3 < 3 ; K3 ++ )  <CR> c1 [ K3 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 