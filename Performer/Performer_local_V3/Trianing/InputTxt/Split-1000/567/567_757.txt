 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String y7 , String H0 , String a9 , String K8 , String J3 ) {  <CR> super ( y7 , H0 , a9 , K8 , J3 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String z1 , String z5 , String q5 , String O4 , String i1 ) {  <CR> super ( z1 , z5 , q5 , O4 , i1 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String senderAddr ;  <CR> Letter letter ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Envelop ( String f1 , String U1 , Letter S1 ) {  <CR> this . senderAddr = f1 ;  <CR> this . receiverAddr = U1 ;  <CR> this . letter = S1 ;  <CR> }  <CR> String receiverAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> boolean same ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> Letter ( String C7 , String u9 , String i9 , String j5 , String f7 ) {  <CR> this . title = C7 ;  <CR> this . receiver = u9 ;  <CR> this . content = i9 ;  <CR> this . sender = j5 ;  <CR> this . date = f7 ;  <CR> }  <CR> public int compareTo ( Object h3 ) {  <CR> Letter D = ( Letter ) h3 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> int valueOf ( String E8 ) {  <CR> int u6 = 0 ;  <CR> for ( int s2 = 0 ; s2 < E8 . length ( ) ; s2 ++ ) {  <CR> char A6 = E8 . charAt ( s2 ) ;  <CR> u6 = u6 * 10 + A6 - '0' ;  <CR> }  <CR> return u6 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] i7 ) {  <CR> Letter [ ] Y4 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( Y4 ) ;  <CR> for ( int Y = 0 ; Y < 3 ; Y ++ )  <CR> Y4 [ Y ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 