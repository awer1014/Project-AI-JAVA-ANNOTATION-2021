 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String Y0 , String y8 , String q , String C7 , String p6 ) {  <CR> super ( Y0 , y8 , q , C7 , p6 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String O4 , String d4 , String P6 , String a2 , String x2 ) {  <CR> super ( O4 , d4 , P6 , a2 , x2 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> Letter letter ;  <CR> String senderAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String receiverAddr ;  <CR> Envelop ( String y4 , String N5 , Letter N ) {  <CR> this . senderAddr = y4 ;  <CR> this . receiverAddr = N5 ;  <CR> this . letter = N ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> abstract protected void display ( ) ;  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> int valueOf ( String X5 ) {  <CR> int C8 = 0 ;  <CR> for ( int u3 = 0 ; u3 < X5 . length ( ) ; u3 ++ ) {  <CR> char c0 = X5 . charAt ( u3 ) ;  <CR> C8 = C8 * 10 + c0 - '0' ;  <CR> }  <CR> return C8 ;  <CR> }  <CR> boolean same ;  <CR> Letter ( String q9 , String D3 , String o2 , String l7 , String s3 ) {  <CR> this . title = q9 ;  <CR> this . receiver = D3 ;  <CR> this . content = o2 ;  <CR> this . sender = l7 ;  <CR> this . date = s3 ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> public int compareTo ( Object s4 ) {  <CR> Letter J3 = ( Letter ) s4 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] G2 ) {  <CR> Letter [ ] z1 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( z1 ) ;  <CR> for ( int K0 = 0 ; K0 < 3 ; K0 ++ )  <CR> z1 [ K0 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 