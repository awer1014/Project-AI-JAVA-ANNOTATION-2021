 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String m6 , String n3 , String k8 , String d7 , String l6 ) {  <CR> super ( m6 , n3 , k8 , d7 , l6 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String R6 , String D2 , String V7 , String h5 , String o3 ) {  <CR> super ( R6 , D2 , V7 , h5 , o3 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String senderAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Letter letter ;  <CR> String receiverAddr ;  <CR> Envelop ( String R9 , String Q9 , Letter f2 ) {  <CR> this . senderAddr = R9 ;  <CR> this . receiverAddr = Q9 ;  <CR> this . letter = f2 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> abstract protected void display ( ) ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> Letter ( String N , String i7 , String r2 , String i3 , String N7 ) {  <CR> this . title = N ;  <CR> this . receiver = i7 ;  <CR> this . content = r2 ;  <CR> this . sender = i3 ;  <CR> this . date = N7 ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> int valueOf ( String q7 ) {  <CR> int x6 = 0 ;  <CR> for ( int R6 = 0 ; R6 < q7 . length ( ) ; R6 ++ ) {  <CR> char R1 = q7 . charAt ( R6 ) ;  <CR> x6 = x6 * 10 + R1 - '0' ;  <CR> }  <CR> return x6 ;  <CR> }  <CR> public int compareTo ( Object e3 ) {  <CR> Letter k0 = ( Letter ) e3 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> boolean same ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] I8 ) {  <CR> Letter [ ] l4 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( l4 ) ;  <CR> for ( int x5 = 0 ; x5 < 3 ; x5 ++ )  <CR> l4 [ x5 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 