 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String o9 , String L8 , String L3 , String u6 , String l3 ) {  <CR> super ( o9 , L8 , L3 , u6 , l3 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String g6 , String A5 , String A0 , String h4 , String u3 ) {  <CR> super ( g6 , A5 , A0 , h4 , u3 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String senderAddr ;  <CR> Letter letter ;  <CR> Envelop ( String u , String L7 , Letter e5 ) {  <CR> this . senderAddr = u ;  <CR> this . receiverAddr = L7 ;  <CR> this . letter = e5 ;  <CR> }  <CR> String receiverAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> Letter ( String w0 , String O4 , String K , String u0 , String k9 ) {  <CR> this . title = w0 ;  <CR> this . receiver = O4 ;  <CR> this . content = K ;  <CR> this . sender = u0 ;  <CR> this . date = k9 ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> String title , receiver , content , sender , date ;  <CR> public int compareTo ( Object o8 ) {  <CR> Letter Q4 = ( Letter ) o8 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> boolean same ;  <CR> int valueOf ( String z0 ) {  <CR> int z5 = 0 ;  <CR> for ( int Q3 = 0 ; Q3 < z0 . length ( ) ; Q3 ++ ) {  <CR> char Q1 = z0 . charAt ( Q3 ) ;  <CR> z5 = z5 * 10 + Q1 - '0' ;  <CR> }  <CR> return z5 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] Z5 ) {  <CR> Letter [ ] B1 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( B1 ) ;  <CR> for ( int n4 = 0 ; n4 < 3 ; n4 ++ )  <CR> B1 [ n4 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 