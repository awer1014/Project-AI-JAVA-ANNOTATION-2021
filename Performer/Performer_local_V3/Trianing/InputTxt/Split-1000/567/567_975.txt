 <BOC> public class ChineseLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> ChineseLetter ( String p9 , String k0 , String g5 , String F4 , String e7 ) {  <CR> super ( p9 , k0 , g5 , F4 , e7 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String j6 , String U6 , String e7 , String P6 , String g5 ) {  <CR> super ( j6 , U6 , e7 , P6 , g5 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> Envelop ( String r4 , String h8 , Letter D ) {  <CR> this . senderAddr = r4 ;  <CR> this . receiverAddr = h8 ;  <CR> this . letter = D ;  <CR> }  <CR> String senderAddr ;  <CR> String receiverAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Letter letter ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> Letter ( String N2 , String P3 , String P1 , String V8 , String W7 ) {  <CR> this . title = N2 ;  <CR> this . receiver = P3 ;  <CR> this . content = P1 ;  <CR> this . sender = V8 ;  <CR> this . date = W7 ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> boolean same ;  <CR> public int compareTo ( Object Y5 ) {  <CR> Letter E2 = ( Letter ) Y5 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> int valueOf ( String s7 ) {  <CR> int l = 0 ;  <CR> for ( int r = 0 ; r < s7 . length ( ) ; r ++ ) {  <CR> char w4 = s7 . charAt ( r ) ;  <CR> l = l * 10 + w4 - '0' ;  <CR> }  <CR> return l ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] q9 ) {  <CR> Letter [ ] A6 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( A6 ) ;  <CR> for ( int G3 = 0 ; G3 < 3 ; G3 ++ )  <CR> A6 [ G3 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 