 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String F3 , String d1 , String d0 , String y3 , String z ) {  <CR> super ( F3 , d1 , d0 , y3 , z ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String P3 , String s0 , String v5 , String i2 , String g6 ) {  <CR> super ( P3 , s0 , v5 , i2 , g6 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> Letter letter ;  <CR> Envelop ( String z3 , String m3 , Letter e5 ) {  <CR> this . senderAddr = z3 ;  <CR> this . receiverAddr = m3 ;  <CR> this . letter = e5 ;  <CR> }  <CR> String receiverAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String senderAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> Letter ( String z4 , String M7 , String d1 , String M4 , String l1 ) {  <CR> this . title = z4 ;  <CR> this . receiver = M7 ;  <CR> this . content = d1 ;  <CR> this . sender = M4 ;  <CR> this . date = l1 ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> int valueOf ( String S1 ) {  <CR> int L = 0 ;  <CR> for ( int C0 = 0 ; C0 < S1 . length ( ) ; C0 ++ ) {  <CR> char m6 = S1 . charAt ( C0 ) ;  <CR> L = L * 10 + m6 - '0' ;  <CR> }  <CR> return L ;  <CR> }  <CR> public int compareTo ( Object w ) {  <CR> Letter p7 = ( Letter ) w ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> boolean same ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] V4 ) {  <CR> Letter [ ] R2 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( R2 ) ;  <CR> for ( int m7 = 0 ; m7 < 3 ; m7 ++ )  <CR> R2 [ m7 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 