 <BOC> public class ChineseLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> ChineseLetter ( String u1 , String R2 , String P5 , String k2 , String U3 ) {  <CR> super ( u1 , R2 , P5 , k2 , U3 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String m2 , String a9 , String j5 , String W , String I6 ) {  <CR> super ( m2 , a9 , j5 , W , I6 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> Letter letter ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String receiverAddr ;  <CR> Envelop ( String Q1 , String x3 , Letter y5 ) {  <CR> this . senderAddr = Q1 ;  <CR> this . receiverAddr = x3 ;  <CR> this . letter = y5 ;  <CR> }  <CR> String senderAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> Letter ( String V8 , String c3 , String u , String J8 , String c5 ) {  <CR> this . title = V8 ;  <CR> this . receiver = c3 ;  <CR> this . content = u ;  <CR> this . sender = J8 ;  <CR> this . date = c5 ;  <CR> }  <CR> public int compareTo ( Object j0 ) {  <CR> Letter M4 = ( Letter ) j0 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> int valueOf ( String A1 ) {  <CR> int E5 = 0 ;  <CR> for ( int T7 = 0 ; T7 < A1 . length ( ) ; T7 ++ ) {  <CR> char O3 = A1 . charAt ( T7 ) ;  <CR> E5 = E5 * 10 + O3 - '0' ;  <CR> }  <CR> return E5 ;  <CR> }  <CR> boolean same ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] i3 ) {  <CR> Letter [ ] B = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( B ) ;  <CR> for ( int z0 = 0 ; z0 < 3 ; z0 ++ )  <CR> B [ z0 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 