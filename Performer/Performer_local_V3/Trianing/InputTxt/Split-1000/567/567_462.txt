 <BOC> public class ChineseLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> ChineseLetter ( String Q5 , String B6 , String J6 , String f , String L ) {  <CR> super ( Q5 , B6 , J6 , f , L ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String S1 , String J9 , String A1 , String T8 , String v3 ) {  <CR> super ( S1 , J9 , A1 , T8 , v3 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> Letter letter ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Envelop ( String Y5 , String l7 , Letter H ) {  <CR> this . senderAddr = Y5 ;  <CR> this . receiverAddr = l7 ;  <CR> this . letter = H ;  <CR> }  <CR> String receiverAddr ;  <CR> String senderAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String title , receiver , content , sender , date ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> Letter ( String x1 , String V4 , String k5 , String i3 , String W9 ) {  <CR> this . title = x1 ;  <CR> this . receiver = V4 ;  <CR> this . content = k5 ;  <CR> this . sender = i3 ;  <CR> this . date = W9 ;  <CR> }  <CR> int valueOf ( String F7 ) {  <CR> int i1 = 0 ;  <CR> for ( int G2 = 0 ; G2 < F7 . length ( ) ; G2 ++ ) {  <CR> char V3 = F7 . charAt ( G2 ) ;  <CR> i1 = i1 * 10 + V3 - '0' ;  <CR> }  <CR> return i1 ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> public int compareTo ( Object H5 ) {  <CR> Letter n8 = ( Letter ) H5 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> boolean same ;  <CR> abstract protected void display ( ) ;  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] M5 ) {  <CR> Letter [ ] u1 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( u1 ) ;  <CR> for ( int y2 = 0 ; y2 < 3 ; y2 ++ )  <CR> u1 [ y2 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 