 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String Z6 , String v2 , String D5 , String V1 , String d1 ) {  <CR> super ( Z6 , v2 , D5 , V1 , d1 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String T1 , String T6 , String m5 , String A5 , String b1 ) {  <CR> super ( T1 , T6 , m5 , A5 , b1 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String receiverAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Letter letter ;  <CR> String senderAddr ;  <CR> Envelop ( String r1 , String f , Letter J5 ) {  <CR> this . senderAddr = r1 ;  <CR> this . receiverAddr = f ;  <CR> this . letter = J5 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> int valueOf ( String m3 ) {  <CR> int n8 = 0 ;  <CR> for ( int q9 = 0 ; q9 < m3 . length ( ) ; q9 ++ ) {  <CR> char v4 = m3 . charAt ( q9 ) ;  <CR> n8 = n8 * 10 + v4 - '0' ;  <CR> }  <CR> return n8 ;  <CR> }  <CR> public int compareTo ( Object S ) {  <CR> Letter v6 = ( Letter ) S ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> Letter ( String m2 , String i4 , String X0 , String a0 , String i ) {  <CR> this . title = m2 ;  <CR> this . receiver = i4 ;  <CR> this . content = X0 ;  <CR> this . sender = a0 ;  <CR> this . date = i ;  <CR> }  <CR> boolean same ;  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] H6 ) {  <CR> Letter [ ] N2 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( N2 ) ;  <CR> for ( int g7 = 0 ; g7 < 3 ; g7 ++ )  <CR> N2 [ g7 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 