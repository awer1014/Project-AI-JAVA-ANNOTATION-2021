 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String i7 , String g8 , String j4 , String C3 , String x2 ) {  <CR> super ( i7 , g8 , j4 , C3 , x2 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String Y3 , String B8 , String T1 , String H0 , String F5 ) {  <CR> super ( Y3 , B8 , T1 , H0 , F5 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String senderAddr ;  <CR> Letter letter ;  <CR> Envelop ( String w3 , String h7 , Letter e ) {  <CR> this . senderAddr = w3 ;  <CR> this . receiverAddr = h7 ;  <CR> this . letter = e ;  <CR> }  <CR> String receiverAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> boolean same ;  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> int valueOf ( String l5 ) {  <CR> int w9 = 0 ;  <CR> for ( int i5 = 0 ; i5 < l5 . length ( ) ; i5 ++ ) {  <CR> char G6 = l5 . charAt ( i5 ) ;  <CR> w9 = w9 * 10 + G6 - '0' ;  <CR> }  <CR> return w9 ;  <CR> }  <CR> public int compareTo ( Object O8 ) {  <CR> Letter p7 = ( Letter ) O8 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> Letter ( String F6 , String s6 , String T , String l0 , String g1 ) {  <CR> this . title = F6 ;  <CR> this . receiver = s6 ;  <CR> this . content = T ;  <CR> this . sender = l0 ;  <CR> this . date = g1 ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] M9 ) {  <CR> Letter [ ] x0 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( x0 ) ;  <CR> for ( int j8 = 0 ; j8 < 3 ; j8 ++ )  <CR> x0 [ j8 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 