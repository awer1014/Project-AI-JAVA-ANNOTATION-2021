 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String S0 , String A , String a5 , String S9 , String c8 ) {  <CR> super ( S0 , A , a5 , S9 , c8 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String b7 , String p3 , String D7 , String r4 , String G2 ) {  <CR> super ( b7 , p3 , D7 , r4 , G2 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Letter letter ;  <CR> Envelop ( String I3 , String O1 , Letter F4 ) {  <CR> this . senderAddr = I3 ;  <CR> this . receiverAddr = O1 ;  <CR> this . letter = F4 ;  <CR> }  <CR> String receiverAddr ;  <CR> String senderAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> Letter ( String h , String g1 , String j5 , String E6 , String e6 ) {  <CR> this . title = h ;  <CR> this . receiver = g1 ;  <CR> this . content = j5 ;  <CR> this . sender = E6 ;  <CR> this . date = e6 ;  <CR> }  <CR> int valueOf ( String T3 ) {  <CR> int H8 = 0 ;  <CR> for ( int B1 = 0 ; B1 < T3 . length ( ) ; B1 ++ ) {  <CR> char r9 = T3 . charAt ( B1 ) ;  <CR> H8 = H8 * 10 + r9 - '0' ;  <CR> }  <CR> return H8 ;  <CR> }  <CR> public int compareTo ( Object E9 ) {  <CR> Letter v9 = ( Letter ) E9 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> boolean same ;  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] T1 ) {  <CR> Letter [ ] s6 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( s6 ) ;  <CR> for ( int R6 = 0 ; R6 < 3 ; R6 ++ )  <CR> s6 [ R6 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 