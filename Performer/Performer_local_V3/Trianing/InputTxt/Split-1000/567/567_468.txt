 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String T7 , String v8 , String o2 , String Y , String G9 ) {  <CR> super ( T7 , v8 , o2 , Y , G9 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String F2 , String s6 , String c , String h3 , String k3 ) {  <CR> super ( F2 , s6 , c , h3 , k3 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String receiverAddr ;  <CR> Letter letter ;  <CR> Envelop ( String U9 , String t6 , Letter m5 ) {  <CR> this . senderAddr = U9 ;  <CR> this . receiverAddr = t6 ;  <CR> this . letter = m5 ;  <CR> }  <CR> String senderAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> boolean same ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> int valueOf ( String x ) {  <CR> int r4 = 0 ;  <CR> for ( int x1 = 0 ; x1 < x . length ( ) ; x1 ++ ) {  <CR> char X1 = x . charAt ( x1 ) ;  <CR> r4 = r4 * 10 + X1 - '0' ;  <CR> }  <CR> return r4 ;  <CR> }  <CR> Letter ( String z , String D7 , String K4 , String c0 , String l9 ) {  <CR> this . title = z ;  <CR> this . receiver = D7 ;  <CR> this . content = K4 ;  <CR> this . sender = c0 ;  <CR> this . date = l9 ;  <CR> }  <CR> public int compareTo ( Object u1 ) {  <CR> Letter h1 = ( Letter ) u1 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] W4 ) {  <CR> Letter [ ] b7 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( b7 ) ;  <CR> for ( int t7 = 0 ; t7 < 3 ; t7 ++ )  <CR> b7 [ t7 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 