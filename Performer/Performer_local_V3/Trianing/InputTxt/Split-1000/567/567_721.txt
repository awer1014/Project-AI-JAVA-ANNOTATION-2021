 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String p6 , String O2 , String U1 , String P8 , String q5 ) {  <CR> super ( p6 , O2 , U1 , P8 , q5 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String m3 , String b7 , String L4 , String L3 , String T4 ) {  <CR> super ( m3 , b7 , L4 , L3 , T4 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> Envelop ( String O , String D , Letter w3 ) {  <CR> this . senderAddr = O ;  <CR> this . receiverAddr = D ;  <CR> this . letter = w3 ;  <CR> }  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String senderAddr ;  <CR> Letter letter ;  <CR> String receiverAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> int valueOf ( String j9 ) {  <CR> int n6 = 0 ;  <CR> for ( int r4 = 0 ; r4 < j9 . length ( ) ; r4 ++ ) {  <CR> char v4 = j9 . charAt ( r4 ) ;  <CR> n6 = n6 * 10 + v4 - '0' ;  <CR> }  <CR> return n6 ;  <CR> }  <CR> public int compareTo ( Object z5 ) {  <CR> Letter s3 = ( Letter ) z5 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> Letter ( String M1 , String n4 , String b2 , String b , String D9 ) {  <CR> this . title = M1 ;  <CR> this . receiver = n4 ;  <CR> this . content = b2 ;  <CR> this . sender = b ;  <CR> this . date = D9 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> boolean same ;  <CR> abstract protected void display ( ) ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] d5 ) {  <CR> Letter [ ] Z2 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( Z2 ) ;  <CR> for ( int Q4 = 0 ; Q4 < 3 ; Q4 ++ )  <CR> Z2 [ Q4 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 