 <BOC> public class ChineseLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> ChineseLetter ( String O4 , String i2 , String Y3 , String i1 , String h8 ) {  <CR> super ( O4 , i2 , Y3 , i1 , h8 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String N7 , String n5 , String d1 , String c4 , String O9 ) {  <CR> super ( N7 , n5 , d1 , c4 , O9 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> Envelop ( String f9 , String c3 , Letter u8 ) {  <CR> this . senderAddr = f9 ;  <CR> this . receiverAddr = c3 ;  <CR> this . letter = u8 ;  <CR> }  <CR> String senderAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String receiverAddr ;  <CR> Letter letter ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> int valueOf ( String S5 ) {  <CR> int s4 = 0 ;  <CR> for ( int r9 = 0 ; r9 < S5 . length ( ) ; r9 ++ ) {  <CR> char J7 = S5 . charAt ( r9 ) ;  <CR> s4 = s4 * 10 + J7 - '0' ;  <CR> }  <CR> return s4 ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> Letter ( String r5 , String N7 , String v7 , String X3 , String N ) {  <CR> this . title = r5 ;  <CR> this . receiver = N7 ;  <CR> this . content = v7 ;  <CR> this . sender = X3 ;  <CR> this . date = N ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> boolean same ;  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> public int compareTo ( Object C2 ) {  <CR> Letter Y2 = ( Letter ) C2 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] O8 ) {  <CR> Letter [ ] m6 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( m6 ) ;  <CR> for ( int n4 = 0 ; n4 < 3 ; n4 ++ )  <CR> m6 [ n4 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 