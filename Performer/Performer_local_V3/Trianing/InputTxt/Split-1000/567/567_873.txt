 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String V2 , String M2 , String S5 , String r2 , String R1 ) {  <CR> super ( V2 , M2 , S5 , r2 , R1 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String W0 , String d1 , String q2 , String Y7 , String O6 ) {  <CR> super ( W0 , d1 , q2 , Y7 , O6 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> Letter letter ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Envelop ( String D3 , String c9 , Letter S ) {  <CR> this . senderAddr = D3 ;  <CR> this . receiverAddr = c9 ;  <CR> this . letter = S ;  <CR> }  <CR> String receiverAddr ;  <CR> String senderAddr ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> Letter ( String S6 , String t , String w2 , String d9 , String x2 ) {  <CR> this . title = S6 ;  <CR> this . receiver = t ;  <CR> this . content = w2 ;  <CR> this . sender = d9 ;  <CR> this . date = x2 ;  <CR> }  <CR> public int compareTo ( Object k7 ) {  <CR> Letter y9 = ( Letter ) k7 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> int valueOf ( String n0 ) {  <CR> int D9 = 0 ;  <CR> for ( int d5 = 0 ; d5 < n0 . length ( ) ; d5 ++ ) {  <CR> char o6 = n0 . charAt ( d5 ) ;  <CR> D9 = D9 * 10 + o6 - '0' ;  <CR> }  <CR> return D9 ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> boolean same ;  <CR> abstract protected void display ( ) ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] A8 ) {  <CR> Letter [ ] l8 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( l8 ) ;  <CR> for ( int O = 0 ; O < 3 ; O ++ )  <CR> l8 [ O ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 