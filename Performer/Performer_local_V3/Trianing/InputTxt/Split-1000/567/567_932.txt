 <BOC> public class ChineseLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> ChineseLetter ( String q4 , String I9 , String G8 , String H1 , String I6 ) {  <CR> super ( q4 , I9 , G8 , H1 , I6 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String m1 , String X0 , String t7 , String F2 , String H1 ) {  <CR> super ( m1 , X0 , t7 , F2 , H1 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String senderAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String receiverAddr ;  <CR> Letter letter ;  <CR> Envelop ( String f4 , String O1 , Letter H3 ) {  <CR> this . senderAddr = f4 ;  <CR> this . receiverAddr = O1 ;  <CR> this . letter = H3 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> Letter ( String N4 , String O0 , String E , String C4 , String Y1 ) {  <CR> this . title = N4 ;  <CR> this . receiver = O0 ;  <CR> this . content = E ;  <CR> this . sender = C4 ;  <CR> this . date = Y1 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> int valueOf ( String o7 ) {  <CR> int t5 = 0 ;  <CR> for ( int c4 = 0 ; c4 < o7 . length ( ) ; c4 ++ ) {  <CR> char I7 = o7 . charAt ( c4 ) ;  <CR> t5 = t5 * 10 + I7 - '0' ;  <CR> }  <CR> return t5 ;  <CR> }  <CR> public int compareTo ( Object X8 ) {  <CR> Letter n4 = ( Letter ) X8 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> boolean same ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] f3 ) {  <CR> Letter [ ] o8 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( o8 ) ;  <CR> for ( int R0 = 0 ; R0 < 3 ; R0 ++ )  <CR> o8 [ R0 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 