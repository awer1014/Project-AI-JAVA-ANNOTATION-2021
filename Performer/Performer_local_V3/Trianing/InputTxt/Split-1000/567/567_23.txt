 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String D0 , String B3 , String T3 , String W8 , String S3 ) {  <CR> super ( D0 , B3 , T3 , W8 , S3 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> EnglishLetter ( String l7 , String S7 , String o9 , String Z7 , String l6 ) {  <CR> super ( l7 , S7 , o9 , Z7 , l6 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String receiverAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> String senderAddr ;  <CR> Envelop ( String e4 , String w6 , Letter z0 ) {  <CR> this . senderAddr = e4 ;  <CR> this . receiverAddr = w6 ;  <CR> this . letter = z0 ;  <CR> }  <CR> Letter letter ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> Letter ( String Y5 , String C2 , String V1 , String O2 , String x5 ) {  <CR> this . title = Y5 ;  <CR> this . receiver = C2 ;  <CR> this . content = V1 ;  <CR> this . sender = O2 ;  <CR> this . date = x5 ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> public int compareTo ( Object R1 ) {  <CR> Letter J9 = ( Letter ) R1 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> int valueOf ( String e0 ) {  <CR> int S6 = 0 ;  <CR> for ( int f3 = 0 ; f3 < e0 . length ( ) ; f3 ++ ) {  <CR> char v5 = e0 . charAt ( f3 ) ;  <CR> S6 = S6 * 10 + v5 - '0' ;  <CR> }  <CR> return S6 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> boolean same ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] v7 ) {  <CR> Letter [ ] m3 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( m3 ) ;  <CR> for ( int K8 = 0 ; K8 < 3 ; K8 ++ )  <CR> m3 [ K8 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 