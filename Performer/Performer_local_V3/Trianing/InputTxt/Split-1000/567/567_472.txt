 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String Y2 , String L7 , String P1 , String k9 , String Y9 ) {  <CR> super ( Y2 , L7 , P1 , k9 , Y9 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String n8 , String X6 , String o8 , String V9 , String j1 ) {  <CR> super ( n8 , X6 , o8 , V9 , j1 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String receiverAddr ;  <CR> Letter letter ;  <CR> Envelop ( String K5 , String S0 , Letter L9 ) {  <CR> this . senderAddr = K5 ;  <CR> this . receiverAddr = S0 ;  <CR> this . letter = L9 ;  <CR> }  <CR> String senderAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> int valueOf ( String z6 ) {  <CR> int r7 = 0 ;  <CR> for ( int G4 = 0 ; G4 < z6 . length ( ) ; G4 ++ ) {  <CR> char G5 = z6 . charAt ( G4 ) ;  <CR> r7 = r7 * 10 + G5 - '0' ;  <CR> }  <CR> return r7 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> Letter ( String K9 , String k4 , String H1 , String W2 , String d7 ) {  <CR> this . title = K9 ;  <CR> this . receiver = k4 ;  <CR> this . content = H1 ;  <CR> this . sender = W2 ;  <CR> this . date = d7 ;  <CR> }  <CR> public int compareTo ( Object E4 ) {  <CR> Letter I4 = ( Letter ) E4 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> boolean same ;  <CR> abstract protected void display ( ) ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] T7 ) {  <CR> Letter [ ] X8 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( X8 ) ;  <CR> for ( int e3 = 0 ; e3 < 3 ; e3 ++ )  <CR> X8 [ e3 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 