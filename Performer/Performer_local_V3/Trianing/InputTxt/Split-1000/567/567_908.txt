 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String p2 , String Z , String w5 , String f6 , String m8 ) {  <CR> super ( p2 , Z , w5 , f6 , m8 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String t5 , String v2 , String q , String I , String f6 ) {  <CR> super ( t5 , v2 , q , I , f6 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String receiverAddr ;  <CR> String senderAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Letter letter ;  <CR> Envelop ( String d1 , String s8 , Letter L7 ) {  <CR> this . senderAddr = d1 ;  <CR> this . receiverAddr = s8 ;  <CR> this . letter = L7 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> Letter ( String e5 , String M4 , String Q7 , String I1 , String G6 ) {  <CR> this . title = e5 ;  <CR> this . receiver = M4 ;  <CR> this . content = Q7 ;  <CR> this . sender = I1 ;  <CR> this . date = G6 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> int valueOf ( String v1 ) {  <CR> int x5 = 0 ;  <CR> for ( int j0 = 0 ; j0 < v1 . length ( ) ; j0 ++ ) {  <CR> char x0 = v1 . charAt ( j0 ) ;  <CR> x5 = x5 * 10 + x0 - '0' ;  <CR> }  <CR> return x5 ;  <CR> }  <CR> public int compareTo ( Object J7 ) {  <CR> Letter N0 = ( Letter ) J7 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> boolean same ;  <CR> abstract protected void display ( ) ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] r2 ) {  <CR> Letter [ ] N3 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( N3 ) ;  <CR> for ( int B7 = 0 ; B7 < 3 ; B7 ++ )  <CR> N3 [ B7 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 