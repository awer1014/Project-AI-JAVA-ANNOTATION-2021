 <BOC> public class ChineseLetter extends Letter {  <CR> ChineseLetter ( String D , String L3 , String x8 , String z2 , String p7 ) {  <CR> super ( D , L3 , x8 , z2 , p7 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String y0 , String i7 , String x3 , String n5 , String S2 ) {  <CR> super ( y0 , i7 , x3 , n5 , S2 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> String receiverAddr ;  <CR> Letter letter ;  <CR> Envelop ( String k7 , String o0 , Letter b6 ) {  <CR> this . senderAddr = k7 ;  <CR> this . receiverAddr = o0 ;  <CR> this . letter = b6 ;  <CR> }  <CR> String senderAddr ;  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> int valueOf ( String d5 ) {  <CR> int Z7 = 0 ;  <CR> for ( int r1 = 0 ; r1 < d5 . length ( ) ; r1 ++ ) {  <CR> char m1 = d5 . charAt ( r1 ) ;  <CR> Z7 = Z7 * 10 + m1 - '0' ;  <CR> }  <CR> return Z7 ;  <CR> }  <CR> Letter ( String N2 , String T9 , String G8 , String D3 , String B8 ) {  <CR> this . title = N2 ;  <CR> this . receiver = T9 ;  <CR> this . content = G8 ;  <CR> this . sender = D3 ;  <CR> this . date = B8 ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> boolean same ;  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> public int compareTo ( Object s9 ) {  <CR> Letter e4 = ( Letter ) s9 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] c9 ) {  <CR> Letter [ ] d3 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( d3 ) ;  <CR> for ( int P7 = 0 ; P7 < 3 ; P7 ++ )  <CR> d3 [ P7 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 