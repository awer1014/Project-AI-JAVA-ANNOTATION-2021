 <BOC> import java . util . Scanner ;  <CR> public class Keeper {  <CR> void display ( ) {  <CR> System . out . println ( "請輸入飼主身份證字號:" + id ) ;  <CR> System . out . println ( "請輸入飼主身份證字號:" + tel ) ;  <CR> }  <CR> String tel ;  <CR> void Keeper ( String c1 , String Q1 ) {  <CR> this . id = c1 ;  <CR> this . tel = Q1 ;  <CR> }  <CR> public static void main ( String [ ] X4 ) {  <CR> String c1 ;  <CR> String Q1 ;  <CR> Scanner n1 = new Scanner ( System . in ) ;  <CR> System . out . println ( "飼主身份證字號:" ) ;  <CR> c1 = n1 . nextLine ( ) ;  <CR> System . out . println ( "飼主電話:" ) ;  <CR> Q1 = n1 . nextLine ( ) ;  <CR> Keeper f5 = new Keeper ( c1 , Q1 ) ;  <CR> }  <CR> String id ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . Scanner ;  <CR> public class pet {  <CR> void display ( ) {  <CR> System . out . println ( "寵物種類:" + pid ) ;  <CR> System . out . println ( "寵物編號:" + type ) ;  <CR> System . out . println ( "寵物名稱:" + name ) ;  <CR> keeper . display ( ) ;  <CR> }  <CR> String type ;  <CR> String name ;  <CR> public static void main ( String [ ] s0 ) {  <CR> String X7 ;  <CR> String p9 ;  <CR> String D ;  <CR> String H7 ;  <CR> String M7 ;  <CR> Scanner i7 = new Scanner ( System . in ) ;  <CR> System . out . println ( "飼主身份證字號:" ) ;  <CR> H7 = i7 . nextLine ( ) ;  <CR> System . out . println ( "飼主電話:" ) ;  <CR> M7 = i7 . nextLine ( ) ;  <CR> Keeper c9 = new Keeper ( H7 , M7 ) ;  <CR> Scanner i7 = new Scanner ( System . in ) ;  <CR> System . out . println ( "請輸入寵物種類:" ) ;  <CR> X7 = i7 . nextLine ( ) ;  <CR> System . out . println ( "請輸入寵物編號:" ) ;  <CR> D = i7 . nextLine ( ) ;  <CR> System . out . println ( "請輸入寵物名稱:" ) ;  <CR> p9 = i7 . nextLine ( ) ;  <CR> pet E6 = new pet ( X7 , p9 , D , c9 ) ;  <CR> String e8 = E6 . Speak ( ) ;  <CR> System . out . println ( "您的寵物叫聲是:" + e8 ) ;  <CR> }  <CR> String pid ;  <CR> String Speak ( ) {  <CR> if ( pid . equals ( "貓" ) ) {  <CR> return "喵喵" ;  <CR> }  <CR> else if ( pid . equals ( "狗" ) ) {  <CR> return "汪汪" ;  <CR> }  <CR> }  <CR> void Pet ( String X7 , String p9 , String D , Keeper e0 ) {  <CR> count ++ ;  <CR> this . pid = X7 ;  <CR> this . name = p9 ;  <CR> this . type = D ;  <CR> this . keeper = e0 ;  <CR> }  <CR> static int count ;  <CR> Keeper keeper ;  <CR> }  <CR>  <EOC> 