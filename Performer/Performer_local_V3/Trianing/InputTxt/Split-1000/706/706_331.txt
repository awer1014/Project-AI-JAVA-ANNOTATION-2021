 <BOC> import java . util . Scanner ;  <CR> public class Keeper {  <CR> String tel ;  <CR> void display ( ) {  <CR> System . out . println ( "請輸入飼主身份證字號:" + id ) ;  <CR> System . out . println ( "請輸入飼主身份證字號:" + tel ) ;  <CR> }  <CR> public static void main ( String [ ] M2 ) {  <CR> String z9 ;  <CR> String g8 ;  <CR> Scanner w4 = new Scanner ( System . in ) ;  <CR> System . out . println ( "飼主身份證字號:" ) ;  <CR> z9 = w4 . nextLine ( ) ;  <CR> System . out . println ( "飼主電話:" ) ;  <CR> g8 = w4 . nextLine ( ) ;  <CR> Keeper q1 = new Keeper ( z9 , g8 ) ;  <CR> }  <CR> void Keeper ( String z9 , String g8 ) {  <CR> this . id = z9 ;  <CR> this . tel = g8 ;  <CR> }  <CR> String id ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . Scanner ;  <CR> public class pet {  <CR> void display ( ) {  <CR> System . out . println ( "寵物種類:" + pid ) ;  <CR> System . out . println ( "寵物編號:" + type ) ;  <CR> System . out . println ( "寵物名稱:" + name ) ;  <CR> keeper . display ( ) ;  <CR> }  <CR> String name ;  <CR> String type ;  <CR> String Speak ( ) {  <CR> if ( pid . equals ( "貓" ) ) {  <CR> return "喵喵" ;  <CR> }  <CR> else if ( pid . equals ( "狗" ) ) {  <CR> return "汪汪" ;  <CR> }  <CR> }  <CR> String pid ;  <CR> public static void main ( String [ ] k ) {  <CR> String k7 ;  <CR> String m8 ;  <CR> String j9 ;  <CR> String k6 ;  <CR> String M6 ;  <CR> Scanner J = new Scanner ( System . in ) ;  <CR> System . out . println ( "飼主身份證字號:" ) ;  <CR> k6 = J . nextLine ( ) ;  <CR> System . out . println ( "飼主電話:" ) ;  <CR> M6 = J . nextLine ( ) ;  <CR> Keeper N8 = new Keeper ( k6 , M6 ) ;  <CR> Scanner J = new Scanner ( System . in ) ;  <CR> System . out . println ( "請輸入寵物種類:" ) ;  <CR> k7 = J . nextLine ( ) ;  <CR> System . out . println ( "請輸入寵物編號:" ) ;  <CR> j9 = J . nextLine ( ) ;  <CR> System . out . println ( "請輸入寵物名稱:" ) ;  <CR> m8 = J . nextLine ( ) ;  <CR> pet Q3 = new pet ( k7 , m8 , j9 , N8 ) ;  <CR> String N2 = Q3 . Speak ( ) ;  <CR> System . out . println ( "您的寵物叫聲是:" + N2 ) ;  <CR> }  <CR> void Pet ( String k7 , String m8 , String j9 , Keeper L1 ) {  <CR> count ++ ;  <CR> this . pid = k7 ;  <CR> this . name = m8 ;  <CR> this . type = j9 ;  <CR> this . keeper = L1 ;  <CR> }  <CR> static int count ;  <CR> Keeper keeper ;  <CR> }  <CR>  <EOC> 