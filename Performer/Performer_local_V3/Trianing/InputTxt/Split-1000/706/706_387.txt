 <BOC> import java . util . Scanner ;  <CR> public class Keeper {  <CR> String tel ;  <CR> void display ( ) {  <CR> System . out . println ( "請輸入飼主身份證字號:" + id ) ;  <CR> System . out . println ( "請輸入飼主身份證字號:" + tel ) ;  <CR> }  <CR> String id ;  <CR> public static void main ( String [ ] O1 ) {  <CR> String X1 ;  <CR> String A5 ;  <CR> Scanner U9 = new Scanner ( System . in ) ;  <CR> System . out . println ( "飼主身份證字號:" ) ;  <CR> X1 = U9 . nextLine ( ) ;  <CR> System . out . println ( "飼主電話:" ) ;  <CR> A5 = U9 . nextLine ( ) ;  <CR> Keeper M8 = new Keeper ( X1 , A5 ) ;  <CR> }  <CR> void Keeper ( String X1 , String A5 ) {  <CR> this . id = X1 ;  <CR> this . tel = A5 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . Scanner ;  <CR> public class pet {  <CR> String pid ;  <CR> String type ;  <CR> public static void main ( String [ ] X3 ) {  <CR> String A7 ;  <CR> String K2 ;  <CR> String P1 ;  <CR> String E1 ;  <CR> String Q3 ;  <CR> Scanner N8 = new Scanner ( System . in ) ;  <CR> System . out . println ( "飼主身份證字號:" ) ;  <CR> E1 = N8 . nextLine ( ) ;  <CR> System . out . println ( "飼主電話:" ) ;  <CR> Q3 = N8 . nextLine ( ) ;  <CR> Keeper i9 = new Keeper ( E1 , Q3 ) ;  <CR> Scanner N8 = new Scanner ( System . in ) ;  <CR> System . out . println ( "請輸入寵物種類:" ) ;  <CR> A7 = N8 . nextLine ( ) ;  <CR> System . out . println ( "請輸入寵物編號:" ) ;  <CR> P1 = N8 . nextLine ( ) ;  <CR> System . out . println ( "請輸入寵物名稱:" ) ;  <CR> K2 = N8 . nextLine ( ) ;  <CR> pet S = new pet ( A7 , K2 , P1 , i9 ) ;  <CR> String W5 = S . Speak ( ) ;  <CR> System . out . println ( "您的寵物叫聲是:" + W5 ) ;  <CR> }  <CR> String Speak ( ) {  <CR> if ( pid . equals ( "貓" ) ) {  <CR> return "喵喵" ;  <CR> }  <CR> else if ( pid . equals ( "狗" ) ) {  <CR> return "汪汪" ;  <CR> }  <CR> }  <CR> void display ( ) {  <CR> System . out . println ( "寵物種類:" + pid ) ;  <CR> System . out . println ( "寵物編號:" + type ) ;  <CR> System . out . println ( "寵物名稱:" + name ) ;  <CR> keeper . display ( ) ;  <CR> }  <CR> String name ;  <CR> void Pet ( String A7 , String K2 , String P1 , Keeper q9 ) {  <CR> count ++ ;  <CR> this . pid = A7 ;  <CR> this . name = K2 ;  <CR> this . type = P1 ;  <CR> this . keeper = q9 ;  <CR> }  <CR> Keeper keeper ;  <CR> static int count ;  <CR> }  <CR>  <EOC> 