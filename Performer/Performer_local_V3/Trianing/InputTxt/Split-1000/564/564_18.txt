 <BOC> public class ChineseLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( getReceiver ( ) + " " + title + ", 您好" ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( getSender ( ) + " 敬上" ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public ChineseLetter ( String p8 , String j5 , String V7 , String B9 , String h2 ) {  <CR> super ( p8 , j5 , V7 , B9 , h2 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class EnglishLetter extends Evaluation {  <CR> public EnglishLetter ( String N8 , String p3 , String o1 , String L8 , String P6 ) {  <CR> super ( N8 , p3 , o1 , L8 , P6 ) ;  <CR> }  <CR> public void Display ( ) {  <CR> System . out . println ( "Dear " + title + " " + getReceiver ( ) + "," ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( "Sincerely" ) ;  <CR> System . out . println ( getSender ( ) ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Envelop {  <CR> String senderAddr , receiverAddr ;  <CR> Evaluation letter ;  <CR> public Envelop ( String f2 , String h5 , Evaluation Z3 ) {  <CR> this . senderAddr = f2 ;  <CR> this . receiverAddr = h5 ;  <CR> this . letter = Z3 ;  <CR> }  <CR> void display ( ) {  <CR> System . out . println ( "From: " + senderAddr ) ;  <CR> System . out . println ( "To: " + receiverAddr ) ;  <CR> letter . Display ( ) ;  <CR> }  <CR> public static void main ( String [ ] P7 ) {  <CR> Evaluation b5 = new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) ;  <CR> Envelop t8 = new Envelop ( "Taipei" , "Kaohsiung" , b5 ) ;  <CR> t8 . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> abstract public class Evaluation {  <CR> public Evaluation ( String e2 , String b0 , String B6 , String J2 , String j0 ) {  <CR> this . title = e2 ;  <CR> this . receiver = b0 ;  <CR> this . content = B6 ;  <CR> this . sender = J2 ;  <CR> this . date = j0 ;  <CR> }  <CR> public String getDate ( ) {  <CR> return date ;  <CR> }  <CR> protected String title , receiver , content , sender , date ;  <CR> public String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> public String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> abstract protected void Display ( ) ;  <CR> }  <CR>  <EOC>  <BOC> public class Letter implements Comparable {  <CR> public static Evaluation [ ] list = { new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> public int compareTo ( Object a9 ) {  <CR> Letter y4 = ( Letter ) a9 ;  <CR> if ( this . x > y4 . x ) return 1 ;  <CR> else return - 1 ;  <CR> }  <CR> public static void main ( String [ ] T6 ) {  <CR> int U ;  <CR> for ( U = list . length - 1 ; U >= 0 ; U -- ) {  <CR> int f = U ;  <CR> Letter m2 = new Letter ( U ) ;  <CR> Letter J9 = new Letter ( f - 1 ) ;  <CR> if ( m2 . compareTo ( J9 ) == 1 )  <CR> m2 . display ( U ) ;  <CR> }  <CR> }  <CR> public void display ( int U ) {  <CR> list [ U ] . Display ( ) ;  <CR> }  <CR> Letter ( int G6 ) {  <CR> this . x = G6 ;  <CR> }  <CR> private int x ;  <CR> }  <CR>  <EOC> 