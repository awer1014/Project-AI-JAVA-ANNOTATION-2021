 <BOC> public class ChineseLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( getReceiver ( ) + " " + title + ", 您好" ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( getSender ( ) + " 敬上" ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public ChineseLetter ( String s3 , String Z3 , String j5 , String h5 , String U8 ) {  <CR> super ( s3 , Z3 , j5 , h5 , U8 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class EnglishLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( "Dear " + title + " " + getReceiver ( ) + "," ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( "Sincerely" ) ;  <CR> System . out . println ( getSender ( ) ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public EnglishLetter ( String D6 , String S2 , String U , String G0 , String l9 ) {  <CR> super ( D6 , S2 , U , G0 , l9 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Envelop {  <CR> public static void main ( String [ ] w1 ) {  <CR> Evaluation A4 = new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) ;  <CR> Envelop Z5 = new Envelop ( "Taipei" , "Kaohsiung" , A4 ) ;  <CR> Z5 . display ( ) ;  <CR> }  <CR> String senderAddr , receiverAddr ;  <CR> Evaluation letter ;  <CR> void display ( ) {  <CR> System . out . println ( "From: " + senderAddr ) ;  <CR> System . out . println ( "To: " + receiverAddr ) ;  <CR> letter . Display ( ) ;  <CR> }  <CR> public Envelop ( String B4 , String T1 , Evaluation H0 ) {  <CR> this . senderAddr = B4 ;  <CR> this . receiverAddr = T1 ;  <CR> this . letter = H0 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> abstract public class Evaluation {  <CR> public Evaluation ( String T0 , String m6 , String Z8 , String Q5 , String O8 ) {  <CR> this . title = T0 ;  <CR> this . receiver = m6 ;  <CR> this . content = Z8 ;  <CR> this . sender = Q5 ;  <CR> this . date = O8 ;  <CR> }  <CR> public String getDate ( ) {  <CR> return date ;  <CR> }  <CR> public String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> abstract protected void Display ( ) ;  <CR> protected String title , receiver , content , sender , date ;  <CR> public String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Letter implements Comparable {  <CR> public int compareTo ( Object O3 ) {  <CR> Letter B4 = ( Letter ) O3 ;  <CR> if ( this . x > B4 . x ) return 1 ;  <CR> else return - 1 ;  <CR> }  <CR> Letter ( int q5 ) {  <CR> this . x = q5 ;  <CR> }  <CR> public static Evaluation [ ] list = { new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> private int x ;  <CR> public void display ( int B5 ) {  <CR> list [ B5 ] . Display ( ) ;  <CR> }  <CR> public static void main ( String [ ] E1 ) {  <CR> int B5 ;  <CR> for ( B5 = list . length - 1 ; B5 >= 0 ; B5 -- ) {  <CR> int F2 = B5 ;  <CR> Letter w = new Letter ( B5 ) ;  <CR> Letter N3 = new Letter ( F2 - 1 ) ;  <CR> if ( w . compareTo ( N3 ) == 1 )  <CR> w . display ( B5 ) ;  <CR> }  <CR> }  <CR> }  <CR>  <EOC> 