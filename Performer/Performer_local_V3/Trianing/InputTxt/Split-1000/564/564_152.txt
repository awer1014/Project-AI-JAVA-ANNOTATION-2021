 <BOC> public class ChineseLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( getReceiver ( ) + " " + title + ", 您好" ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( getSender ( ) + " 敬上" ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public ChineseLetter ( String E6 , String f4 , String Z9 , String r8 , String B6 ) {  <CR> super ( E6 , f4 , Z9 , r8 , B6 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class EnglishLetter extends Evaluation {  <CR> public EnglishLetter ( String H8 , String q6 , String N1 , String q7 , String X2 ) {  <CR> super ( H8 , q6 , N1 , q7 , X2 ) ;  <CR> }  <CR> public void Display ( ) {  <CR> System . out . println ( "Dear " + title + " " + getReceiver ( ) + "," ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( "Sincerely" ) ;  <CR> System . out . println ( getSender ( ) ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Envelop {  <CR> public Envelop ( String Z3 , String l , Evaluation Z7 ) {  <CR> this . senderAddr = Z3 ;  <CR> this . receiverAddr = l ;  <CR> this . letter = Z7 ;  <CR> }  <CR> public static void main ( String [ ] P3 ) {  <CR> Evaluation B = new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) ;  <CR> Envelop j1 = new Envelop ( "Taipei" , "Kaohsiung" , B ) ;  <CR> j1 . display ( ) ;  <CR> }  <CR> String senderAddr , receiverAddr ;  <CR> Evaluation letter ;  <CR> void display ( ) {  <CR> System . out . println ( "From: " + senderAddr ) ;  <CR> System . out . println ( "To: " + receiverAddr ) ;  <CR> letter . Display ( ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> abstract public class Evaluation {  <CR> public String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> protected String title , receiver , content , sender , date ;  <CR> public Evaluation ( String N5 , String N , String m , String n , String P6 ) {  <CR> this . title = N5 ;  <CR> this . receiver = N ;  <CR> this . content = m ;  <CR> this . sender = n ;  <CR> this . date = P6 ;  <CR> }  <CR> abstract protected void Display ( ) ;  <CR> public String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> public String getDate ( ) {  <CR> return date ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Letter implements Comparable {  <CR> public void display ( int P7 ) {  <CR> list [ P7 ] . Display ( ) ;  <CR> }  <CR> Letter ( int E1 ) {  <CR> this . x = E1 ;  <CR> }  <CR> public int compareTo ( Object D9 ) {  <CR> Letter l3 = ( Letter ) D9 ;  <CR> if ( this . x > l3 . x ) return 1 ;  <CR> else return - 1 ;  <CR> }  <CR> public static void main ( String [ ] x5 ) {  <CR> int P7 ;  <CR> for ( P7 = list . length - 1 ; P7 >= 0 ; P7 -- ) {  <CR> int w6 = P7 ;  <CR> Letter m = new Letter ( P7 ) ;  <CR> Letter z5 = new Letter ( w6 - 1 ) ;  <CR> if ( m . compareTo ( z5 ) == 1 )  <CR> m . display ( P7 ) ;  <CR> }  <CR> }  <CR> public static Evaluation [ ] list = { new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> private int x ;  <CR> }  <CR>  <EOC> 