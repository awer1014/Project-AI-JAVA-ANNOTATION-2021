 <BOC> public class ChineseLetter extends Evaluation {  <CR> public ChineseLetter ( String G6 , String L6 , String S1 , String c , String a9 ) {  <CR> super ( G6 , L6 , S1 , c , a9 ) ;  <CR> }  <CR> public void Display ( ) {  <CR> System . out . println ( getReceiver ( ) + " " + title + ", 您好" ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( getSender ( ) + " 敬上" ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class EnglishLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( "Dear " + title + " " + getReceiver ( ) + "," ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( "Sincerely" ) ;  <CR> System . out . println ( getSender ( ) ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public EnglishLetter ( String r5 , String J6 , String O4 , String A8 , String J0 ) {  <CR> super ( r5 , J6 , O4 , A8 , J0 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Envelop {  <CR> Evaluation letter ;  <CR> public Envelop ( String H8 , String q , Evaluation g7 ) {  <CR> this . senderAddr = H8 ;  <CR> this . receiverAddr = q ;  <CR> this . letter = g7 ;  <CR> }  <CR> void display ( ) {  <CR> System . out . println ( "From: " + senderAddr ) ;  <CR> System . out . println ( "To: " + receiverAddr ) ;  <CR> letter . Display ( ) ;  <CR> }  <CR> String senderAddr , receiverAddr ;  <CR> public static void main ( String [ ] X2 ) {  <CR> Evaluation N = new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) ;  <CR> Envelop S1 = new Envelop ( "Taipei" , "Kaohsiung" , N ) ;  <CR> S1 . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> abstract public class Evaluation {  <CR> public Evaluation ( String A , String T7 , String Y2 , String x5 , String v1 ) {  <CR> this . title = A ;  <CR> this . receiver = T7 ;  <CR> this . content = Y2 ;  <CR> this . sender = x5 ;  <CR> this . date = v1 ;  <CR> }  <CR> public String getDate ( ) {  <CR> return date ;  <CR> }  <CR> public String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> public String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> protected String title , receiver , content , sender , date ;  <CR> abstract protected void Display ( ) ;  <CR> }  <CR>  <EOC>  <BOC> public class Letter implements Comparable {  <CR> public static void main ( String [ ] Y2 ) {  <CR> int a3 ;  <CR> for ( a3 = list . length - 1 ; a3 >= 0 ; a3 -- ) {  <CR> int X4 = a3 ;  <CR> Letter c1 = new Letter ( a3 ) ;  <CR> Letter n4 = new Letter ( X4 - 1 ) ;  <CR> if ( c1 . compareTo ( n4 ) == 1 )  <CR> c1 . display ( a3 ) ;  <CR> }  <CR> }  <CR> public static Evaluation [ ] list = { new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Letter ( int x ) {  <CR> this . x = x ;  <CR> }  <CR> public int compareTo ( Object N5 ) {  <CR> Letter U4 = ( Letter ) N5 ;  <CR> if ( this . x > U4 . x ) return 1 ;  <CR> else return - 1 ;  <CR> }  <CR> private int x ;  <CR> public void display ( int a3 ) {  <CR> list [ a3 ] . Display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 