 <BOC> public class ChineseLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( getReceiver ( ) + " " + title + ", 您好" ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( getSender ( ) + " 敬上" ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public ChineseLetter ( String b8 , String v0 , String Y6 , String k9 , String C1 ) {  <CR> super ( b8 , v0 , Y6 , k9 , C1 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class EnglishLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( "Dear " + title + " " + getReceiver ( ) + "," ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( "Sincerely" ) ;  <CR> System . out . println ( getSender ( ) ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public EnglishLetter ( String k1 , String T4 , String Y5 , String y1 , String J9 ) {  <CR> super ( k1 , T4 , Y5 , y1 , J9 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Envelop {  <CR> public static void main ( String [ ] U7 ) {  <CR> Evaluation f1 = new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) ;  <CR> Envelop W1 = new Envelop ( "Taipei" , "Kaohsiung" , f1 ) ;  <CR> W1 . display ( ) ;  <CR> }  <CR> void display ( ) {  <CR> System . out . println ( "From: " + senderAddr ) ;  <CR> System . out . println ( "To: " + receiverAddr ) ;  <CR> letter . Display ( ) ;  <CR> }  <CR> Evaluation letter ;  <CR> String senderAddr , receiverAddr ;  <CR> public Envelop ( String G , String s8 , Evaluation K6 ) {  <CR> this . senderAddr = G ;  <CR> this . receiverAddr = s8 ;  <CR> this . letter = K6 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> abstract public class Evaluation {  <CR> public Evaluation ( String E7 , String V8 , String U8 , String X9 , String z9 ) {  <CR> this . title = E7 ;  <CR> this . receiver = V8 ;  <CR> this . content = U8 ;  <CR> this . sender = X9 ;  <CR> this . date = z9 ;  <CR> }  <CR> public String getDate ( ) {  <CR> return date ;  <CR> }  <CR> protected String title , receiver , content , sender , date ;  <CR> public String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> public String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> abstract protected void Display ( ) ;  <CR> }  <CR>  <EOC>  <BOC> public class Letter implements Comparable {  <CR> Letter ( int O1 ) {  <CR> this . x = O1 ;  <CR> }  <CR> private int x ;  <CR> public void display ( int A7 ) {  <CR> list [ A7 ] . Display ( ) ;  <CR> }  <CR> public int compareTo ( Object N7 ) {  <CR> Letter X5 = ( Letter ) N7 ;  <CR> if ( this . x > X5 . x ) return 1 ;  <CR> else return - 1 ;  <CR> }  <CR> public static Evaluation [ ] list = { new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> public static void main ( String [ ] t4 ) {  <CR> int A7 ;  <CR> for ( A7 = list . length - 1 ; A7 >= 0 ; A7 -- ) {  <CR> int t8 = A7 ;  <CR> Letter z3 = new Letter ( A7 ) ;  <CR> Letter L1 = new Letter ( t8 - 1 ) ;  <CR> if ( z3 . compareTo ( L1 ) == 1 )  <CR> z3 . display ( A7 ) ;  <CR> }  <CR> }  <CR> }  <CR>  <EOC> 