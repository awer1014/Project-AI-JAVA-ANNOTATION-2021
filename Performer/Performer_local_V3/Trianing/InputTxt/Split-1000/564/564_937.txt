 <BOC> public class ChineseLetter extends Evaluation {  <CR> public ChineseLetter ( String B9 , String L9 , String K4 , String Q5 , String o5 ) {  <CR> super ( B9 , L9 , K4 , Q5 , o5 ) ;  <CR> }  <CR> public void Display ( ) {  <CR> System . out . println ( getReceiver ( ) + " " + title + ", 您好" ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( getSender ( ) + " 敬上" ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class EnglishLetter extends Evaluation {  <CR> public EnglishLetter ( String w4 , String V6 , String p , String a , String N7 ) {  <CR> super ( w4 , V6 , p , a , N7 ) ;  <CR> }  <CR> public void Display ( ) {  <CR> System . out . println ( "Dear " + title + " " + getReceiver ( ) + "," ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( "Sincerely" ) ;  <CR> System . out . println ( getSender ( ) ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Envelop {  <CR> public Envelop ( String P , String y , Evaluation A2 ) {  <CR> this . senderAddr = P ;  <CR> this . receiverAddr = y ;  <CR> this . letter = A2 ;  <CR> }  <CR> void display ( ) {  <CR> System . out . println ( "From: " + senderAddr ) ;  <CR> System . out . println ( "To: " + receiverAddr ) ;  <CR> letter . Display ( ) ;  <CR> }  <CR> Evaluation letter ;  <CR> String senderAddr , receiverAddr ;  <CR> public static void main ( String [ ] k6 ) {  <CR> Evaluation Y2 = new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) ;  <CR> Envelop c6 = new Envelop ( "Taipei" , "Kaohsiung" , Y2 ) ;  <CR> c6 . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> abstract public class Evaluation {  <CR> public String getDate ( ) {  <CR> return date ;  <CR> }  <CR> public String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> protected String title , receiver , content , sender , date ;  <CR> public Evaluation ( String b5 , String m3 , String c5 , String T4 , String w8 ) {  <CR> this . title = b5 ;  <CR> this . receiver = m3 ;  <CR> this . content = c5 ;  <CR> this . sender = T4 ;  <CR> this . date = w8 ;  <CR> }  <CR> public String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> abstract protected void Display ( ) ;  <CR> }  <CR>  <EOC>  <BOC> public class Letter implements Comparable {  <CR> public static Evaluation [ ] list = { new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> public static void main ( String [ ] b9 ) {  <CR> int j3 ;  <CR> for ( j3 = list . length - 1 ; j3 >= 0 ; j3 -- ) {  <CR> int X3 = j3 ;  <CR> Letter i5 = new Letter ( j3 ) ;  <CR> Letter C0 = new Letter ( X3 - 1 ) ;  <CR> if ( i5 . compareTo ( C0 ) == 1 )  <CR> i5 . display ( j3 ) ;  <CR> }  <CR> }  <CR> public int compareTo ( Object n8 ) {  <CR> Letter b8 = ( Letter ) n8 ;  <CR> if ( this . x > b8 . x ) return 1 ;  <CR> else return - 1 ;  <CR> }  <CR> private int x ;  <CR> Letter ( int h0 ) {  <CR> this . x = h0 ;  <CR> }  <CR> public void display ( int j3 ) {  <CR> list [ j3 ] . Display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 