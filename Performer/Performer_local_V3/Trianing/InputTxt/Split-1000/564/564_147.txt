 <BOC> public class ChineseLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( getReceiver ( ) + " " + title + ", 您好" ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( getSender ( ) + " 敬上" ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public ChineseLetter ( String H3 , String S3 , String L6 , String J , String f ) {  <CR> super ( H3 , S3 , L6 , J , f ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class EnglishLetter extends Evaluation {  <CR> public EnglishLetter ( String C8 , String J2 , String f8 , String u8 , String T6 ) {  <CR> super ( C8 , J2 , f8 , u8 , T6 ) ;  <CR> }  <CR> public void Display ( ) {  <CR> System . out . println ( "Dear " + title + " " + getReceiver ( ) + "," ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( "Sincerely" ) ;  <CR> System . out . println ( getSender ( ) ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Envelop {  <CR> public Envelop ( String Z9 , String H5 , Evaluation b2 ) {  <CR> this . senderAddr = Z9 ;  <CR> this . receiverAddr = H5 ;  <CR> this . letter = b2 ;  <CR> }  <CR> Evaluation letter ;  <CR> void display ( ) {  <CR> System . out . println ( "From: " + senderAddr ) ;  <CR> System . out . println ( "To: " + receiverAddr ) ;  <CR> letter . Display ( ) ;  <CR> }  <CR> public static void main ( String [ ] A8 ) {  <CR> Evaluation S8 = new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) ;  <CR> Envelop Y9 = new Envelop ( "Taipei" , "Kaohsiung" , S8 ) ;  <CR> Y9 . display ( ) ;  <CR> }  <CR> String senderAddr , receiverAddr ;  <CR> }  <CR>  <EOC>  <BOC> abstract public class Evaluation {  <CR> public String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> protected String title , receiver , content , sender , date ;  <CR> public String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> public String getDate ( ) {  <CR> return date ;  <CR> }  <CR> public Evaluation ( String w , String l8 , String z1 , String L7 , String X7 ) {  <CR> this . title = w ;  <CR> this . receiver = l8 ;  <CR> this . content = z1 ;  <CR> this . sender = L7 ;  <CR> this . date = X7 ;  <CR> }  <CR> abstract protected void Display ( ) ;  <CR> }  <CR>  <EOC>  <BOC> public class Letter implements Comparable {  <CR> Letter ( int A9 ) {  <CR> this . x = A9 ;  <CR> }  <CR> public static Evaluation [ ] list = { new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> private int x ;  <CR> public void display ( int E7 ) {  <CR> list [ E7 ] . Display ( ) ;  <CR> }  <CR> public static void main ( String [ ] t3 ) {  <CR> int E7 ;  <CR> for ( E7 = list . length - 1 ; E7 >= 0 ; E7 -- ) {  <CR> int o9 = E7 ;  <CR> Letter l4 = new Letter ( E7 ) ;  <CR> Letter Y6 = new Letter ( o9 - 1 ) ;  <CR> if ( l4 . compareTo ( Y6 ) == 1 )  <CR> l4 . display ( E7 ) ;  <CR> }  <CR> }  <CR> public int compareTo ( Object X2 ) {  <CR> Letter T5 = ( Letter ) X2 ;  <CR> if ( this . x > T5 . x ) return 1 ;  <CR> else return - 1 ;  <CR> }  <CR> }  <CR>  <EOC> 