 <BOC> public class ChineseLetter extends Evaluation {  <CR> public ChineseLetter ( String x4 , String V , String J9 , String y2 , String A5 ) {  <CR> super ( x4 , V , J9 , y2 , A5 ) ;  <CR> }  <CR> public void Display ( ) {  <CR> System . out . println ( getReceiver ( ) + " " + title + ", 您好" ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( getSender ( ) + " 敬上" ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class EnglishLetter extends Evaluation {  <CR> public EnglishLetter ( String S1 , String b , String s7 , String F8 , String T ) {  <CR> super ( S1 , b , s7 , F8 , T ) ;  <CR> }  <CR> public void Display ( ) {  <CR> System . out . println ( "Dear " + title + " " + getReceiver ( ) + "," ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( "Sincerely" ) ;  <CR> System . out . println ( getSender ( ) ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Envelop {  <CR> Evaluation letter ;  <CR> String senderAddr , receiverAddr ;  <CR> public static void main ( String [ ] c0 ) {  <CR> Evaluation X9 = new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) ;  <CR> Envelop x1 = new Envelop ( "Taipei" , "Kaohsiung" , X9 ) ;  <CR> x1 . display ( ) ;  <CR> }  <CR> void display ( ) {  <CR> System . out . println ( "From: " + senderAddr ) ;  <CR> System . out . println ( "To: " + receiverAddr ) ;  <CR> letter . Display ( ) ;  <CR> }  <CR> public Envelop ( String r6 , String j4 , Evaluation B2 ) {  <CR> this . senderAddr = r6 ;  <CR> this . receiverAddr = j4 ;  <CR> this . letter = B2 ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> abstract public class Evaluation {  <CR> protected String title , receiver , content , sender , date ;  <CR> public String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> public Evaluation ( String B9 , String u9 , String z1 , String h8 , String n7 ) {  <CR> this . title = B9 ;  <CR> this . receiver = u9 ;  <CR> this . content = z1 ;  <CR> this . sender = h8 ;  <CR> this . date = n7 ;  <CR> }  <CR> public String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> abstract protected void Display ( ) ;  <CR> public String getDate ( ) {  <CR> return date ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Letter implements Comparable {  <CR> public static Evaluation [ ] list = { new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> public int compareTo ( Object l8 ) {  <CR> Letter a9 = ( Letter ) l8 ;  <CR> if ( this . x > a9 . x ) return 1 ;  <CR> else return - 1 ;  <CR> }  <CR> private int x ;  <CR> public void display ( int A5 ) {  <CR> list [ A5 ] . Display ( ) ;  <CR> }  <CR> Letter ( int K ) {  <CR> this . x = K ;  <CR> }  <CR> public static void main ( String [ ] P9 ) {  <CR> int A5 ;  <CR> for ( A5 = list . length - 1 ; A5 >= 0 ; A5 -- ) {  <CR> int Z5 = A5 ;  <CR> Letter U7 = new Letter ( A5 ) ;  <CR> Letter r8 = new Letter ( Z5 - 1 ) ;  <CR> if ( U7 . compareTo ( r8 ) == 1 )  <CR> U7 . display ( A5 ) ;  <CR> }  <CR> }  <CR> }  <CR>  <EOC> 