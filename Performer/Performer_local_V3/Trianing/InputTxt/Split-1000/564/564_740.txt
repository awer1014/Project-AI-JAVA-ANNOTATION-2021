 <BOC> public class ChineseLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( getReceiver ( ) + " " + title + ", 您好" ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( getSender ( ) + " 敬上" ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public ChineseLetter ( String f7 , String K8 , String g4 , String P2 , String O7 ) {  <CR> super ( f7 , K8 , g4 , P2 , O7 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class EnglishLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( "Dear " + title + " " + getReceiver ( ) + "," ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( "Sincerely" ) ;  <CR> System . out . println ( getSender ( ) ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public EnglishLetter ( String O9 , String x , String I6 , String e7 , String t8 ) {  <CR> super ( O9 , x , I6 , e7 , t8 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Envelop {  <CR> public Envelop ( String i6 , String O1 , Evaluation F7 ) {  <CR> this . senderAddr = i6 ;  <CR> this . receiverAddr = O1 ;  <CR> this . letter = F7 ;  <CR> }  <CR> public static void main ( String [ ] L1 ) {  <CR> Evaluation f = new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) ;  <CR> Envelop V2 = new Envelop ( "Taipei" , "Kaohsiung" , f ) ;  <CR> V2 . display ( ) ;  <CR> }  <CR> String senderAddr , receiverAddr ;  <CR> void display ( ) {  <CR> System . out . println ( "From: " + senderAddr ) ;  <CR> System . out . println ( "To: " + receiverAddr ) ;  <CR> letter . Display ( ) ;  <CR> }  <CR> Evaluation letter ;  <CR> }  <CR>  <EOC>  <BOC> abstract public class Evaluation {  <CR> public Evaluation ( String h3 , String v9 , String i0 , String h0 , String j3 ) {  <CR> this . title = h3 ;  <CR> this . receiver = v9 ;  <CR> this . content = i0 ;  <CR> this . sender = h0 ;  <CR> this . date = j3 ;  <CR> }  <CR> protected String title , receiver , content , sender , date ;  <CR> public String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> public String getDate ( ) {  <CR> return date ;  <CR> }  <CR> abstract protected void Display ( ) ;  <CR> public String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Letter implements Comparable {  <CR> public static Evaluation [ ] list = { new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> public static void main ( String [ ] I1 ) {  <CR> int f0 ;  <CR> for ( f0 = list . length - 1 ; f0 >= 0 ; f0 -- ) {  <CR> int c0 = f0 ;  <CR> Letter O0 = new Letter ( f0 ) ;  <CR> Letter Q0 = new Letter ( c0 - 1 ) ;  <CR> if ( O0 . compareTo ( Q0 ) == 1 )  <CR> O0 . display ( f0 ) ;  <CR> }  <CR> }  <CR> public void display ( int f0 ) {  <CR> list [ f0 ] . Display ( ) ;  <CR> }  <CR> public int compareTo ( Object u1 ) {  <CR> Letter Y0 = ( Letter ) u1 ;  <CR> if ( this . x > Y0 . x ) return 1 ;  <CR> else return - 1 ;  <CR> }  <CR> Letter ( int H7 ) {  <CR> this . x = H7 ;  <CR> }  <CR> private int x ;  <CR> }  <CR>  <EOC> 