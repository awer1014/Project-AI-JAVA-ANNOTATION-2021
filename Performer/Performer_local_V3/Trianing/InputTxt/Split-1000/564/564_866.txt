 <BOC> public class ChineseLetter extends Evaluation {  <CR> public ChineseLetter ( String T4 , String R7 , String T , String z9 , String M8 ) {  <CR> super ( T4 , R7 , T , z9 , M8 ) ;  <CR> }  <CR> public void Display ( ) {  <CR> System . out . println ( getReceiver ( ) + " " + title + ", 您好" ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( getSender ( ) + " 敬上" ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class EnglishLetter extends Evaluation {  <CR> public EnglishLetter ( String D3 , String t4 , String l9 , String w1 , String n ) {  <CR> super ( D3 , t4 , l9 , w1 , n ) ;  <CR> }  <CR> public void Display ( ) {  <CR> System . out . println ( "Dear " + title + " " + getReceiver ( ) + "," ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( "Sincerely" ) ;  <CR> System . out . println ( getSender ( ) ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Envelop {  <CR> Evaluation letter ;  <CR> public Envelop ( String Z6 , String D , Evaluation G4 ) {  <CR> this . senderAddr = Z6 ;  <CR> this . receiverAddr = D ;  <CR> this . letter = G4 ;  <CR> }  <CR> void display ( ) {  <CR> System . out . println ( "From: " + senderAddr ) ;  <CR> System . out . println ( "To: " + receiverAddr ) ;  <CR> letter . Display ( ) ;  <CR> }  <CR> String senderAddr , receiverAddr ;  <CR> public static void main ( String [ ] J4 ) {  <CR> Evaluation L0 = new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) ;  <CR> Envelop G6 = new Envelop ( "Taipei" , "Kaohsiung" , L0 ) ;  <CR> G6 . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> abstract public class Evaluation {  <CR> protected String title , receiver , content , sender , date ;  <CR> public String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> public Evaluation ( String g , String t5 , String q9 , String M , String h1 ) {  <CR> this . title = g ;  <CR> this . receiver = t5 ;  <CR> this . content = q9 ;  <CR> this . sender = M ;  <CR> this . date = h1 ;  <CR> }  <CR> public String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> abstract protected void Display ( ) ;  <CR> public String getDate ( ) {  <CR> return date ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Letter implements Comparable {  <CR> Letter ( int E9 ) {  <CR> this . x = E9 ;  <CR> }  <CR> public static void main ( String [ ] t7 ) {  <CR> int U ;  <CR> for ( U = list . length - 1 ; U >= 0 ; U -- ) {  <CR> int M6 = U ;  <CR> Letter S = new Letter ( U ) ;  <CR> Letter i0 = new Letter ( M6 - 1 ) ;  <CR> if ( S . compareTo ( i0 ) == 1 )  <CR> S . display ( U ) ;  <CR> }  <CR> }  <CR> public int compareTo ( Object m5 ) {  <CR> Letter g4 = ( Letter ) m5 ;  <CR> if ( this . x > g4 . x ) return 1 ;  <CR> else return - 1 ;  <CR> }  <CR> public static Evaluation [ ] list = { new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> private int x ;  <CR> public void display ( int U ) {  <CR> list [ U ] . Display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 