 <BOC> public class ChineseLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( getReceiver ( ) + " " + title + ", 您好" ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( getSender ( ) + " 敬上" ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public ChineseLetter ( String H7 , String K6 , String S1 , String k4 , String u8 ) {  <CR> super ( H7 , K6 , S1 , k4 , u8 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class EnglishLetter extends Evaluation {  <CR> public EnglishLetter ( String s6 , String V1 , String m6 , String G8 , String k0 ) {  <CR> super ( s6 , V1 , m6 , G8 , k0 ) ;  <CR> }  <CR> public void Display ( ) {  <CR> System . out . println ( "Dear " + title + " " + getReceiver ( ) + "," ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( "Sincerely" ) ;  <CR> System . out . println ( getSender ( ) ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Envelop {  <CR> Evaluation letter ;  <CR> public Envelop ( String C5 , String T8 , Evaluation r ) {  <CR> this . senderAddr = C5 ;  <CR> this . receiverAddr = T8 ;  <CR> this . letter = r ;  <CR> }  <CR> String senderAddr , receiverAddr ;  <CR> void display ( ) {  <CR> System . out . println ( "From: " + senderAddr ) ;  <CR> System . out . println ( "To: " + receiverAddr ) ;  <CR> letter . Display ( ) ;  <CR> }  <CR> public static void main ( String [ ] d1 ) {  <CR> Evaluation B7 = new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) ;  <CR> Envelop S = new Envelop ( "Taipei" , "Kaohsiung" , B7 ) ;  <CR> S . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> abstract public class Evaluation {  <CR> public Evaluation ( String J1 , String k6 , String C6 , String d9 , String B2 ) {  <CR> this . title = J1 ;  <CR> this . receiver = k6 ;  <CR> this . content = C6 ;  <CR> this . sender = d9 ;  <CR> this . date = B2 ;  <CR> }  <CR> public String getDate ( ) {  <CR> return date ;  <CR> }  <CR> public String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> protected String title , receiver , content , sender , date ;  <CR> public String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> abstract protected void Display ( ) ;  <CR> }  <CR>  <EOC>  <BOC> public class Letter implements Comparable {  <CR> public static void main ( String [ ] a1 ) {  <CR> int C ;  <CR> for ( C = list . length - 1 ; C >= 0 ; C -- ) {  <CR> int Z = C ;  <CR> Letter k8 = new Letter ( C ) ;  <CR> Letter d5 = new Letter ( Z - 1 ) ;  <CR> if ( k8 . compareTo ( d5 ) == 1 )  <CR> k8 . display ( C ) ;  <CR> }  <CR> }  <CR> public static Evaluation [ ] list = { new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> public int compareTo ( Object F5 ) {  <CR> Letter D2 = ( Letter ) F5 ;  <CR> if ( this . x > D2 . x ) return 1 ;  <CR> else return - 1 ;  <CR> }  <CR> private int x ;  <CR> Letter ( int i9 ) {  <CR> this . x = i9 ;  <CR> }  <CR> public void display ( int C ) {  <CR> list [ C ] . Display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 