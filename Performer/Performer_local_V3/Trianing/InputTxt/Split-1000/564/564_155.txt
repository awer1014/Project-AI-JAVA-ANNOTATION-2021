 <BOC> public class ChineseLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( getReceiver ( ) + " " + title + ", 您好" ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( getSender ( ) + " 敬上" ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public ChineseLetter ( String M3 , String I3 , String x1 , String E6 , String y3 ) {  <CR> super ( M3 , I3 , x1 , E6 , y3 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class EnglishLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( "Dear " + title + " " + getReceiver ( ) + "," ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( "Sincerely" ) ;  <CR> System . out . println ( getSender ( ) ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public EnglishLetter ( String o9 , String P6 , String m9 , String r4 , String W6 ) {  <CR> super ( o9 , P6 , m9 , r4 , W6 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Envelop {  <CR> public Envelop ( String m1 , String B9 , Evaluation d3 ) {  <CR> this . senderAddr = m1 ;  <CR> this . receiverAddr = B9 ;  <CR> this . letter = d3 ;  <CR> }  <CR> void display ( ) {  <CR> System . out . println ( "From: " + senderAddr ) ;  <CR> System . out . println ( "To: " + receiverAddr ) ;  <CR> letter . Display ( ) ;  <CR> }  <CR> String senderAddr , receiverAddr ;  <CR> public static void main ( String [ ] c9 ) {  <CR> Evaluation C6 = new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) ;  <CR> Envelop d4 = new Envelop ( "Taipei" , "Kaohsiung" , C6 ) ;  <CR> d4 . display ( ) ;  <CR> }  <CR> Evaluation letter ;  <CR> }  <CR>  <EOC>  <BOC> abstract public class Evaluation {  <CR> public String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> abstract protected void Display ( ) ;  <CR> protected String title , receiver , content , sender , date ;  <CR> public Evaluation ( String w , String S1 , String L , String K4 , String e0 ) {  <CR> this . title = w ;  <CR> this . receiver = S1 ;  <CR> this . content = L ;  <CR> this . sender = K4 ;  <CR> this . date = e0 ;  <CR> }  <CR> public String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> public String getDate ( ) {  <CR> return date ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Letter implements Comparable {  <CR> public static Evaluation [ ] list = { new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> private int x ;  <CR> public void display ( int U4 ) {  <CR> list [ U4 ] . Display ( ) ;  <CR> }  <CR> Letter ( int Z9 ) {  <CR> this . x = Z9 ;  <CR> }  <CR> public static void main ( String [ ] p1 ) {  <CR> int U4 ;  <CR> for ( U4 = list . length - 1 ; U4 >= 0 ; U4 -- ) {  <CR> int i8 = U4 ;  <CR> Letter c7 = new Letter ( U4 ) ;  <CR> Letter Z8 = new Letter ( i8 - 1 ) ;  <CR> if ( c7 . compareTo ( Z8 ) == 1 )  <CR> c7 . display ( U4 ) ;  <CR> }  <CR> }  <CR> public int compareTo ( Object t3 ) {  <CR> Letter B2 = ( Letter ) t3 ;  <CR> if ( this . x > B2 . x ) return 1 ;  <CR> else return - 1 ;  <CR> }  <CR> }  <CR>  <EOC> 