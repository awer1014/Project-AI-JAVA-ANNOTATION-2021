 <BOC> public class ChineseLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( getReceiver ( ) + " " + title + ", 您好" ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( getSender ( ) + " 敬上" ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public ChineseLetter ( String K1 , String T3 , String L4 , String Y5 , String v3 ) {  <CR> super ( K1 , T3 , L4 , Y5 , v3 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class EnglishLetter extends Evaluation {  <CR> public EnglishLetter ( String Y7 , String B1 , String s9 , String j4 , String A3 ) {  <CR> super ( Y7 , B1 , s9 , j4 , A3 ) ;  <CR> }  <CR> public void Display ( ) {  <CR> System . out . println ( "Dear " + title + " " + getReceiver ( ) + "," ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( "Sincerely" ) ;  <CR> System . out . println ( getSender ( ) ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Envelop {  <CR> Evaluation letter ;  <CR> public Envelop ( String d6 , String o0 , Evaluation B5 ) {  <CR> this . senderAddr = d6 ;  <CR> this . receiverAddr = o0 ;  <CR> this . letter = B5 ;  <CR> }  <CR> String senderAddr , receiverAddr ;  <CR> void display ( ) {  <CR> System . out . println ( "From: " + senderAddr ) ;  <CR> System . out . println ( "To: " + receiverAddr ) ;  <CR> letter . Display ( ) ;  <CR> }  <CR> public static void main ( String [ ] Z1 ) {  <CR> Evaluation T6 = new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) ;  <CR> Envelop k1 = new Envelop ( "Taipei" , "Kaohsiung" , T6 ) ;  <CR> k1 . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> abstract public class Evaluation {  <CR> public String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> abstract protected void Display ( ) ;  <CR> public String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> public Evaluation ( String c2 , String v3 , String S5 , String P2 , String p6 ) {  <CR> this . title = c2 ;  <CR> this . receiver = v3 ;  <CR> this . content = S5 ;  <CR> this . sender = P2 ;  <CR> this . date = p6 ;  <CR> }  <CR> public String getDate ( ) {  <CR> return date ;  <CR> }  <CR> protected String title , receiver , content , sender , date ;  <CR> }  <CR>  <EOC>  <BOC> public class Letter implements Comparable {  <CR> public static Evaluation [ ] list = { new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Letter ( int N3 ) {  <CR> this . x = N3 ;  <CR> }  <CR> private int x ;  <CR> public void display ( int g8 ) {  <CR> list [ g8 ] . Display ( ) ;  <CR> }  <CR> public int compareTo ( Object n4 ) {  <CR> Letter E1 = ( Letter ) n4 ;  <CR> if ( this . x > E1 . x ) return 1 ;  <CR> else return - 1 ;  <CR> }  <CR> public static void main ( String [ ] F5 ) {  <CR> int g8 ;  <CR> for ( g8 = list . length - 1 ; g8 >= 0 ; g8 -- ) {  <CR> int Z0 = g8 ;  <CR> Letter n5 = new Letter ( g8 ) ;  <CR> Letter H0 = new Letter ( Z0 - 1 ) ;  <CR> if ( n5 . compareTo ( H0 ) == 1 )  <CR> n5 . display ( g8 ) ;  <CR> }  <CR> }  <CR> }  <CR>  <EOC> 