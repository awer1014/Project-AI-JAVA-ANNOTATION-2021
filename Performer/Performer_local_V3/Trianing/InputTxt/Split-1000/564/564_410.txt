 <BOC> public class ChineseLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( getReceiver ( ) + " " + title + ", 您好" ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( getSender ( ) + " 敬上" ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public ChineseLetter ( String V2 , String a0 , String A9 , String b5 , String Q ) {  <CR> super ( V2 , a0 , A9 , b5 , Q ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class EnglishLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( "Dear " + title + " " + getReceiver ( ) + "," ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( "Sincerely" ) ;  <CR> System . out . println ( getSender ( ) ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public EnglishLetter ( String v6 , String J9 , String f0 , String z9 , String H1 ) {  <CR> super ( v6 , J9 , f0 , z9 , H1 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Envelop {  <CR> public Envelop ( String J , String E4 , Evaluation R9 ) {  <CR> this . senderAddr = J ;  <CR> this . receiverAddr = E4 ;  <CR> this . letter = R9 ;  <CR> }  <CR> Evaluation letter ;  <CR> void display ( ) {  <CR> System . out . println ( "From: " + senderAddr ) ;  <CR> System . out . println ( "To: " + receiverAddr ) ;  <CR> letter . Display ( ) ;  <CR> }  <CR> String senderAddr , receiverAddr ;  <CR> public static void main ( String [ ] m3 ) {  <CR> Evaluation N3 = new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) ;  <CR> Envelop l2 = new Envelop ( "Taipei" , "Kaohsiung" , N3 ) ;  <CR> l2 . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> abstract public class Evaluation {  <CR> public String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> public String getDate ( ) {  <CR> return date ;  <CR> }  <CR> public Evaluation ( String O9 , String i1 , String H9 , String Q8 , String N1 ) {  <CR> this . title = O9 ;  <CR> this . receiver = i1 ;  <CR> this . content = H9 ;  <CR> this . sender = Q8 ;  <CR> this . date = N1 ;  <CR> }  <CR> protected String title , receiver , content , sender , date ;  <CR> public String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> abstract protected void Display ( ) ;  <CR> }  <CR>  <EOC>  <BOC> public class Letter implements Comparable {  <CR> public static void main ( String [ ] x3 ) {  <CR> int z3 ;  <CR> for ( z3 = list . length - 1 ; z3 >= 0 ; z3 -- ) {  <CR> int D5 = z3 ;  <CR> Letter U4 = new Letter ( z3 ) ;  <CR> Letter m6 = new Letter ( D5 - 1 ) ;  <CR> if ( U4 . compareTo ( m6 ) == 1 )  <CR> U4 . display ( z3 ) ;  <CR> }  <CR> }  <CR> public void display ( int z3 ) {  <CR> list [ z3 ] . Display ( ) ;  <CR> }  <CR> public static Evaluation [ ] list = { new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Letter ( int X7 ) {  <CR> this . x = X7 ;  <CR> }  <CR> private int x ;  <CR> public int compareTo ( Object A1 ) {  <CR> Letter n8 = ( Letter ) A1 ;  <CR> if ( this . x > n8 . x ) return 1 ;  <CR> else return - 1 ;  <CR> }  <CR> }  <CR>  <EOC> 