 <BOC> public class ChineseLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( getReceiver ( ) + " " + title + ", 您好" ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( getSender ( ) + " 敬上" ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public ChineseLetter ( String c3 , String P6 , String I2 , String s6 , String G6 ) {  <CR> super ( c3 , P6 , I2 , s6 , G6 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class EnglishLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( "Dear " + title + " " + getReceiver ( ) + "," ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( "Sincerely" ) ;  <CR> System . out . println ( getSender ( ) ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public EnglishLetter ( String v7 , String L , String P5 , String s2 , String F2 ) {  <CR> super ( v7 , L , P5 , s2 , F2 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Envelop {  <CR> public static void main ( String [ ] j2 ) {  <CR> Evaluation l1 = new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) ;  <CR> Envelop A0 = new Envelop ( "Taipei" , "Kaohsiung" , l1 ) ;  <CR> A0 . display ( ) ;  <CR> }  <CR> void display ( ) {  <CR> System . out . println ( "From: " + senderAddr ) ;  <CR> System . out . println ( "To: " + receiverAddr ) ;  <CR> letter . Display ( ) ;  <CR> }  <CR> String senderAddr , receiverAddr ;  <CR> public Envelop ( String K8 , String q4 , Evaluation b3 ) {  <CR> this . senderAddr = K8 ;  <CR> this . receiverAddr = q4 ;  <CR> this . letter = b3 ;  <CR> }  <CR> Evaluation letter ;  <CR> }  <CR>  <EOC>  <BOC> abstract public class Evaluation {  <CR> public Evaluation ( String Q8 , String i , String Q1 , String T4 , String H9 ) {  <CR> this . title = Q8 ;  <CR> this . receiver = i ;  <CR> this . content = Q1 ;  <CR> this . sender = T4 ;  <CR> this . date = H9 ;  <CR> }  <CR> protected String title , receiver , content , sender , date ;  <CR> public String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> public String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> public String getDate ( ) {  <CR> return date ;  <CR> }  <CR> abstract protected void Display ( ) ;  <CR> }  <CR>  <EOC>  <BOC> public class Letter implements Comparable {  <CR> public void display ( int a6 ) {  <CR> list [ a6 ] . Display ( ) ;  <CR> }  <CR> Letter ( int g8 ) {  <CR> this . x = g8 ;  <CR> }  <CR> public int compareTo ( Object l ) {  <CR> Letter M8 = ( Letter ) l ;  <CR> if ( this . x > M8 . x ) return 1 ;  <CR> else return - 1 ;  <CR> }  <CR> public static Evaluation [ ] list = { new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> private int x ;  <CR> public static void main ( String [ ] c3 ) {  <CR> int a6 ;  <CR> for ( a6 = list . length - 1 ; a6 >= 0 ; a6 -- ) {  <CR> int z3 = a6 ;  <CR> Letter n = new Letter ( a6 ) ;  <CR> Letter m3 = new Letter ( z3 - 1 ) ;  <CR> if ( n . compareTo ( m3 ) == 1 )  <CR> n . display ( a6 ) ;  <CR> }  <CR> }  <CR> }  <CR>  <EOC> 