 <BOC> public class ChineseLetter extends Evaluation {  <CR> public ChineseLetter ( String L8 , String d4 , String u , String n9 , String n0 ) {  <CR> super ( L8 , d4 , u , n9 , n0 ) ;  <CR> }  <CR> public void Display ( ) {  <CR> System . out . println ( getReceiver ( ) + " " + title + ", 您好" ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( getSender ( ) + " 敬上" ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class EnglishLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( "Dear " + title + " " + getReceiver ( ) + "," ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( "Sincerely" ) ;  <CR> System . out . println ( getSender ( ) ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public EnglishLetter ( String M , String x3 , String X2 , String K0 , String W4 ) {  <CR> super ( M , x3 , X2 , K0 , W4 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Envelop {  <CR> public Envelop ( String I2 , String I , Evaluation c ) {  <CR> this . senderAddr = I2 ;  <CR> this . receiverAddr = I ;  <CR> this . letter = c ;  <CR> }  <CR> Evaluation letter ;  <CR> void display ( ) {  <CR> System . out . println ( "From: " + senderAddr ) ;  <CR> System . out . println ( "To: " + receiverAddr ) ;  <CR> letter . Display ( ) ;  <CR> }  <CR> public static void main ( String [ ] I6 ) {  <CR> Evaluation A6 = new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) ;  <CR> Envelop a2 = new Envelop ( "Taipei" , "Kaohsiung" , A6 ) ;  <CR> a2 . display ( ) ;  <CR> }  <CR> String senderAddr , receiverAddr ;  <CR> }  <CR>  <EOC>  <BOC> abstract public class Evaluation {  <CR> public String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> public String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> public Evaluation ( String W2 , String Q5 , String l5 , String c4 , String R6 ) {  <CR> this . title = W2 ;  <CR> this . receiver = Q5 ;  <CR> this . content = l5 ;  <CR> this . sender = c4 ;  <CR> this . date = R6 ;  <CR> }  <CR> abstract protected void Display ( ) ;  <CR> public String getDate ( ) {  <CR> return date ;  <CR> }  <CR> protected String title , receiver , content , sender , date ;  <CR> }  <CR>  <EOC>  <BOC> public class Letter implements Comparable {  <CR> Letter ( int q2 ) {  <CR> this . x = q2 ;  <CR> }  <CR> public static void main ( String [ ] A3 ) {  <CR> int x7 ;  <CR> for ( x7 = list . length - 1 ; x7 >= 0 ; x7 -- ) {  <CR> int a0 = x7 ;  <CR> Letter d2 = new Letter ( x7 ) ;  <CR> Letter W7 = new Letter ( a0 - 1 ) ;  <CR> if ( d2 . compareTo ( W7 ) == 1 )  <CR> d2 . display ( x7 ) ;  <CR> }  <CR> }  <CR> public void display ( int x7 ) {  <CR> list [ x7 ] . Display ( ) ;  <CR> }  <CR> public static Evaluation [ ] list = { new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> public int compareTo ( Object t2 ) {  <CR> Letter c1 = ( Letter ) t2 ;  <CR> if ( this . x > c1 . x ) return 1 ;  <CR> else return - 1 ;  <CR> }  <CR> private int x ;  <CR> }  <CR>  <EOC> 