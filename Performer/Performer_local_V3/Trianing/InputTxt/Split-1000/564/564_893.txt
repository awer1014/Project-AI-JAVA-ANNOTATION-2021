 <BOC> public class ChineseLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( getReceiver ( ) + " " + title + ", 您好" ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( getSender ( ) + " 敬上" ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public ChineseLetter ( String V9 , String F4 , String b2 , String H6 , String n4 ) {  <CR> super ( V9 , F4 , b2 , H6 , n4 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class EnglishLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( "Dear " + title + " " + getReceiver ( ) + "," ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( "Sincerely" ) ;  <CR> System . out . println ( getSender ( ) ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public EnglishLetter ( String s5 , String g5 , String L8 , String t3 , String w9 ) {  <CR> super ( s5 , g5 , L8 , t3 , w9 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Envelop {  <CR> public Envelop ( String g4 , String f , Evaluation G1 ) {  <CR> this . senderAddr = g4 ;  <CR> this . receiverAddr = f ;  <CR> this . letter = G1 ;  <CR> }  <CR> String senderAddr , receiverAddr ;  <CR> void display ( ) {  <CR> System . out . println ( "From: " + senderAddr ) ;  <CR> System . out . println ( "To: " + receiverAddr ) ;  <CR> letter . Display ( ) ;  <CR> }  <CR> public static void main ( String [ ] P2 ) {  <CR> Evaluation m4 = new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) ;  <CR> Envelop r6 = new Envelop ( "Taipei" , "Kaohsiung" , m4 ) ;  <CR> r6 . display ( ) ;  <CR> }  <CR> Evaluation letter ;  <CR> }  <CR>  <EOC>  <BOC> abstract public class Evaluation {  <CR> public Evaluation ( String h3 , String v3 , String Q2 , String C2 , String w5 ) {  <CR> this . title = h3 ;  <CR> this . receiver = v3 ;  <CR> this . content = Q2 ;  <CR> this . sender = C2 ;  <CR> this . date = w5 ;  <CR> }  <CR> public String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> protected String title , receiver , content , sender , date ;  <CR> public String getDate ( ) {  <CR> return date ;  <CR> }  <CR> abstract protected void Display ( ) ;  <CR> public String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Letter implements Comparable {  <CR> public static Evaluation [ ] list = { new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> public static void main ( String [ ] w1 ) {  <CR> int H9 ;  <CR> for ( H9 = list . length - 1 ; H9 >= 0 ; H9 -- ) {  <CR> int i2 = H9 ;  <CR> Letter W5 = new Letter ( H9 ) ;  <CR> Letter Q7 = new Letter ( i2 - 1 ) ;  <CR> if ( W5 . compareTo ( Q7 ) == 1 )  <CR> W5 . display ( H9 ) ;  <CR> }  <CR> }  <CR> public int compareTo ( Object y0 ) {  <CR> Letter x9 = ( Letter ) y0 ;  <CR> if ( this . x > x9 . x ) return 1 ;  <CR> else return - 1 ;  <CR> }  <CR> public void display ( int H9 ) {  <CR> list [ H9 ] . Display ( ) ;  <CR> }  <CR> private int x ;  <CR> Letter ( int A1 ) {  <CR> this . x = A1 ;  <CR> }  <CR> }  <CR>  <EOC> 