 <BOC> public class ChineseLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( getReceiver ( ) + " " + title + ", 您好" ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( getSender ( ) + " 敬上" ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public ChineseLetter ( String I8 , String k7 , String y7 , String k3 , String v3 ) {  <CR> super ( I8 , k7 , y7 , k3 , v3 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class EnglishLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( "Dear " + title + " " + getReceiver ( ) + "," ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( "Sincerely" ) ;  <CR> System . out . println ( getSender ( ) ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public EnglishLetter ( String g5 , String B6 , String U2 , String D3 , String G8 ) {  <CR> super ( g5 , B6 , U2 , D3 , G8 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Envelop {  <CR> public Envelop ( String Q0 , String b1 , Evaluation w7 ) {  <CR> this . senderAddr = Q0 ;  <CR> this . receiverAddr = b1 ;  <CR> this . letter = w7 ;  <CR> }  <CR> String senderAddr , receiverAddr ;  <CR> Evaluation letter ;  <CR> void display ( ) {  <CR> System . out . println ( "From: " + senderAddr ) ;  <CR> System . out . println ( "To: " + receiverAddr ) ;  <CR> letter . Display ( ) ;  <CR> }  <CR> public static void main ( String [ ] g0 ) {  <CR> Evaluation G = new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) ;  <CR> Envelop G4 = new Envelop ( "Taipei" , "Kaohsiung" , G ) ;  <CR> G4 . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> abstract public class Evaluation {  <CR> abstract protected void Display ( ) ;  <CR> public String getDate ( ) {  <CR> return date ;  <CR> }  <CR> public Evaluation ( String A4 , String W0 , String d2 , String S4 , String j5 ) {  <CR> this . title = A4 ;  <CR> this . receiver = W0 ;  <CR> this . content = d2 ;  <CR> this . sender = S4 ;  <CR> this . date = j5 ;  <CR> }  <CR> protected String title , receiver , content , sender , date ;  <CR> public String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> public String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Letter implements Comparable {  <CR> public static void main ( String [ ] B6 ) {  <CR> int h3 ;  <CR> for ( h3 = list . length - 1 ; h3 >= 0 ; h3 -- ) {  <CR> int Y7 = h3 ;  <CR> Letter l2 = new Letter ( h3 ) ;  <CR> Letter U9 = new Letter ( Y7 - 1 ) ;  <CR> if ( l2 . compareTo ( U9 ) == 1 )  <CR> l2 . display ( h3 ) ;  <CR> }  <CR> }  <CR> Letter ( int c5 ) {  <CR> this . x = c5 ;  <CR> }  <CR> private int x ;  <CR> public static Evaluation [ ] list = { new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> public int compareTo ( Object I5 ) {  <CR> Letter r4 = ( Letter ) I5 ;  <CR> if ( this . x > r4 . x ) return 1 ;  <CR> else return - 1 ;  <CR> }  <CR> public void display ( int h3 ) {  <CR> list [ h3 ] . Display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 