 <BOC> public class ChineseLetter extends Evaluation {  <CR> public ChineseLetter ( String j4 , String Y7 , String s9 , String c , String Z3 ) {  <CR> super ( j4 , Y7 , s9 , c , Z3 ) ;  <CR> }  <CR> public void Display ( ) {  <CR> System . out . println ( getReceiver ( ) + " " + title + ", 您好" ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( getSender ( ) + " 敬上" ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class EnglishLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( "Dear " + title + " " + getReceiver ( ) + "," ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( "Sincerely" ) ;  <CR> System . out . println ( getSender ( ) ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public EnglishLetter ( String P5 , String T0 , String l3 , String O7 , String H1 ) {  <CR> super ( P5 , T0 , l3 , O7 , H1 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Envelop {  <CR> public static void main ( String [ ] i9 ) {  <CR> Evaluation l7 = new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) ;  <CR> Envelop M5 = new Envelop ( "Taipei" , "Kaohsiung" , l7 ) ;  <CR> M5 . display ( ) ;  <CR> }  <CR> public Envelop ( String d2 , String x , Evaluation D3 ) {  <CR> this . senderAddr = d2 ;  <CR> this . receiverAddr = x ;  <CR> this . letter = D3 ;  <CR> }  <CR> String senderAddr , receiverAddr ;  <CR> void display ( ) {  <CR> System . out . println ( "From: " + senderAddr ) ;  <CR> System . out . println ( "To: " + receiverAddr ) ;  <CR> letter . Display ( ) ;  <CR> }  <CR> Evaluation letter ;  <CR> }  <CR>  <EOC>  <BOC> abstract public class Evaluation {  <CR> public String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> public Evaluation ( String p6 , String U8 , String j6 , String y , String Z2 ) {  <CR> this . title = p6 ;  <CR> this . receiver = U8 ;  <CR> this . content = j6 ;  <CR> this . sender = y ;  <CR> this . date = Z2 ;  <CR> }  <CR> public String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> public String getDate ( ) {  <CR> return date ;  <CR> }  <CR> protected String title , receiver , content , sender , date ;  <CR> abstract protected void Display ( ) ;  <CR> }  <CR>  <EOC>  <BOC> public class Letter implements Comparable {  <CR> public static Evaluation [ ] list = { new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Letter ( int B1 ) {  <CR> this . x = B1 ;  <CR> }  <CR> public static void main ( String [ ] b1 ) {  <CR> int m4 ;  <CR> for ( m4 = list . length - 1 ; m4 >= 0 ; m4 -- ) {  <CR> int K5 = m4 ;  <CR> Letter C4 = new Letter ( m4 ) ;  <CR> Letter a7 = new Letter ( K5 - 1 ) ;  <CR> if ( C4 . compareTo ( a7 ) == 1 )  <CR> C4 . display ( m4 ) ;  <CR> }  <CR> }  <CR> public int compareTo ( Object S3 ) {  <CR> Letter P1 = ( Letter ) S3 ;  <CR> if ( this . x > P1 . x ) return 1 ;  <CR> else return - 1 ;  <CR> }  <CR> private int x ;  <CR> public void display ( int m4 ) {  <CR> list [ m4 ] . Display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 