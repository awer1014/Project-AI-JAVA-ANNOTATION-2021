 <BOC> public class ChineseLetter extends Evaluation {  <CR> public ChineseLetter ( String u4 , String F0 , String e9 , String f7 , String a ) {  <CR> super ( u4 , F0 , e9 , f7 , a ) ;  <CR> }  <CR> public void Display ( ) {  <CR> System . out . println ( getReceiver ( ) + " " + title + ", 您好" ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( getSender ( ) + " 敬上" ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class EnglishLetter extends Evaluation {  <CR> public EnglishLetter ( String P3 , String K5 , String b4 , String j7 , String h5 ) {  <CR> super ( P3 , K5 , b4 , j7 , h5 ) ;  <CR> }  <CR> public void Display ( ) {  <CR> System . out . println ( "Dear " + title + " " + getReceiver ( ) + "," ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( "Sincerely" ) ;  <CR> System . out . println ( getSender ( ) ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Envelop {  <CR> public Envelop ( String S7 , String f6 , Evaluation X6 ) {  <CR> this . senderAddr = S7 ;  <CR> this . receiverAddr = f6 ;  <CR> this . letter = X6 ;  <CR> }  <CR> void display ( ) {  <CR> System . out . println ( "From: " + senderAddr ) ;  <CR> System . out . println ( "To: " + receiverAddr ) ;  <CR> letter . Display ( ) ;  <CR> }  <CR> Evaluation letter ;  <CR> public static void main ( String [ ] X3 ) {  <CR> Evaluation t4 = new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) ;  <CR> Envelop C5 = new Envelop ( "Taipei" , "Kaohsiung" , t4 ) ;  <CR> C5 . display ( ) ;  <CR> }  <CR> String senderAddr , receiverAddr ;  <CR> }  <CR>  <EOC>  <BOC> abstract public class Evaluation {  <CR> public Evaluation ( String J2 , String n , String T8 , String X3 , String w3 ) {  <CR> this . title = J2 ;  <CR> this . receiver = n ;  <CR> this . content = T8 ;  <CR> this . sender = X3 ;  <CR> this . date = w3 ;  <CR> }  <CR> protected String title , receiver , content , sender , date ;  <CR> public String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> public String getDate ( ) {  <CR> return date ;  <CR> }  <CR> abstract protected void Display ( ) ;  <CR> public String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Letter implements Comparable {  <CR> public static void main ( String [ ] h0 ) {  <CR> int A0 ;  <CR> for ( A0 = list . length - 1 ; A0 >= 0 ; A0 -- ) {  <CR> int R4 = A0 ;  <CR> Letter Y8 = new Letter ( A0 ) ;  <CR> Letter n1 = new Letter ( R4 - 1 ) ;  <CR> if ( Y8 . compareTo ( n1 ) == 1 )  <CR> Y8 . display ( A0 ) ;  <CR> }  <CR> }  <CR> public static Evaluation [ ] list = { new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Letter ( int O4 ) {  <CR> this . x = O4 ;  <CR> }  <CR> public void display ( int A0 ) {  <CR> list [ A0 ] . Display ( ) ;  <CR> }  <CR> private int x ;  <CR> public int compareTo ( Object S2 ) {  <CR> Letter m5 = ( Letter ) S2 ;  <CR> if ( this . x > m5 . x ) return 1 ;  <CR> else return - 1 ;  <CR> }  <CR> }  <CR>  <EOC> 