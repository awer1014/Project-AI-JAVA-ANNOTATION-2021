 <BOC> public class ChineseLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( getReceiver ( ) + " " + title + ", 您好" ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( getSender ( ) + " 敬上" ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public ChineseLetter ( String R1 , String p9 , String Q , String S4 , String a9 ) {  <CR> super ( R1 , p9 , Q , S4 , a9 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class EnglishLetter extends Evaluation {  <CR> public EnglishLetter ( String Z0 , String L , String V9 , String n1 , String P2 ) {  <CR> super ( Z0 , L , V9 , n1 , P2 ) ;  <CR> }  <CR> public void Display ( ) {  <CR> System . out . println ( "Dear " + title + " " + getReceiver ( ) + "," ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( "Sincerely" ) ;  <CR> System . out . println ( getSender ( ) ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Envelop {  <CR> public static void main ( String [ ] x4 ) {  <CR> Evaluation l1 = new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) ;  <CR> Envelop o8 = new Envelop ( "Taipei" , "Kaohsiung" , l1 ) ;  <CR> o8 . display ( ) ;  <CR> }  <CR> void display ( ) {  <CR> System . out . println ( "From: " + senderAddr ) ;  <CR> System . out . println ( "To: " + receiverAddr ) ;  <CR> letter . Display ( ) ;  <CR> }  <CR> public Envelop ( String g4 , String E2 , Evaluation H ) {  <CR> this . senderAddr = g4 ;  <CR> this . receiverAddr = E2 ;  <CR> this . letter = H ;  <CR> }  <CR> String senderAddr , receiverAddr ;  <CR> Evaluation letter ;  <CR> }  <CR>  <EOC>  <BOC> abstract public class Evaluation {  <CR> public Evaluation ( String X4 , String A , String K4 , String z1 , String C3 ) {  <CR> this . title = X4 ;  <CR> this . receiver = A ;  <CR> this . content = K4 ;  <CR> this . sender = z1 ;  <CR> this . date = C3 ;  <CR> }  <CR> protected String title , receiver , content , sender , date ;  <CR> public String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> public String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> abstract protected void Display ( ) ;  <CR> public String getDate ( ) {  <CR> return date ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Letter implements Comparable {  <CR> public static Evaluation [ ] list = { new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> public void display ( int c9 ) {  <CR> list [ c9 ] . Display ( ) ;  <CR> }  <CR> private int x ;  <CR> Letter ( int A4 ) {  <CR> this . x = A4 ;  <CR> }  <CR> public int compareTo ( Object v4 ) {  <CR> Letter y4 = ( Letter ) v4 ;  <CR> if ( this . x > y4 . x ) return 1 ;  <CR> else return - 1 ;  <CR> }  <CR> public static void main ( String [ ] L8 ) {  <CR> int c9 ;  <CR> for ( c9 = list . length - 1 ; c9 >= 0 ; c9 -- ) {  <CR> int b5 = c9 ;  <CR> Letter c7 = new Letter ( c9 ) ;  <CR> Letter j1 = new Letter ( b5 - 1 ) ;  <CR> if ( c7 . compareTo ( j1 ) == 1 )  <CR> c7 . display ( c9 ) ;  <CR> }  <CR> }  <CR> }  <CR>  <EOC> 