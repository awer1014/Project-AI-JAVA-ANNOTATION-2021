 <BOC> public class ChineseLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( getReceiver ( ) + " " + title + ", 您好" ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( getSender ( ) + " 敬上" ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public ChineseLetter ( String H7 , String R2 , String x7 , String L4 , String Y0 ) {  <CR> super ( H7 , R2 , x7 , L4 , Y0 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class EnglishLetter extends Evaluation {  <CR> public EnglishLetter ( String s9 , String O8 , String y5 , String b2 , String p ) {  <CR> super ( s9 , O8 , y5 , b2 , p ) ;  <CR> }  <CR> public void Display ( ) {  <CR> System . out . println ( "Dear " + title + " " + getReceiver ( ) + "," ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( "Sincerely" ) ;  <CR> System . out . println ( getSender ( ) ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Envelop {  <CR> public static void main ( String [ ] H1 ) {  <CR> Evaluation i9 = new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) ;  <CR> Envelop e5 = new Envelop ( "Taipei" , "Kaohsiung" , i9 ) ;  <CR> e5 . display ( ) ;  <CR> }  <CR> void display ( ) {  <CR> System . out . println ( "From: " + senderAddr ) ;  <CR> System . out . println ( "To: " + receiverAddr ) ;  <CR> letter . Display ( ) ;  <CR> }  <CR> Evaluation letter ;  <CR> public Envelop ( String G9 , String Y , Evaluation z9 ) {  <CR> this . senderAddr = G9 ;  <CR> this . receiverAddr = Y ;  <CR> this . letter = z9 ;  <CR> }  <CR> String senderAddr , receiverAddr ;  <CR> }  <CR>  <EOC>  <BOC> abstract public class Evaluation {  <CR> public Evaluation ( String u1 , String t5 , String c , String I8 , String X4 ) {  <CR> this . title = u1 ;  <CR> this . receiver = t5 ;  <CR> this . content = c ;  <CR> this . sender = I8 ;  <CR> this . date = X4 ;  <CR> }  <CR> public String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> public String getDate ( ) {  <CR> return date ;  <CR> }  <CR> public String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> abstract protected void Display ( ) ;  <CR> protected String title , receiver , content , sender , date ;  <CR> }  <CR>  <EOC>  <BOC> public class Letter implements Comparable {  <CR> public void display ( int B1 ) {  <CR> list [ B1 ] . Display ( ) ;  <CR> }  <CR> public int compareTo ( Object B3 ) {  <CR> Letter b9 = ( Letter ) B3 ;  <CR> if ( this . x > b9 . x ) return 1 ;  <CR> else return - 1 ;  <CR> }  <CR> Letter ( int M0 ) {  <CR> this . x = M0 ;  <CR> }  <CR> public static Evaluation [ ] list = { new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> public static void main ( String [ ] D3 ) {  <CR> int B1 ;  <CR> for ( B1 = list . length - 1 ; B1 >= 0 ; B1 -- ) {  <CR> int X = B1 ;  <CR> Letter O7 = new Letter ( B1 ) ;  <CR> Letter c = new Letter ( X - 1 ) ;  <CR> if ( O7 . compareTo ( c ) == 1 )  <CR> O7 . display ( B1 ) ;  <CR> }  <CR> }  <CR> private int x ;  <CR> }  <CR>  <EOC> 