 <BOC> public class ChineseLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( getReceiver ( ) + " " + title + ", 您好" ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( getSender ( ) + " 敬上" ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public ChineseLetter ( String W3 , String a7 , String R7 , String X4 , String e2 ) {  <CR> super ( W3 , a7 , R7 , X4 , e2 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class EnglishLetter extends Evaluation {  <CR> public EnglishLetter ( String O2 , String M5 , String L3 , String h8 , String w5 ) {  <CR> super ( O2 , M5 , L3 , h8 , w5 ) ;  <CR> }  <CR> public void Display ( ) {  <CR> System . out . println ( "Dear " + title + " " + getReceiver ( ) + "," ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( "Sincerely" ) ;  <CR> System . out . println ( getSender ( ) ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Envelop {  <CR> public Envelop ( String g2 , String r9 , Evaluation x3 ) {  <CR> this . senderAddr = g2 ;  <CR> this . receiverAddr = r9 ;  <CR> this . letter = x3 ;  <CR> }  <CR> Evaluation letter ;  <CR> void display ( ) {  <CR> System . out . println ( "From: " + senderAddr ) ;  <CR> System . out . println ( "To: " + receiverAddr ) ;  <CR> letter . Display ( ) ;  <CR> }  <CR> public static void main ( String [ ] j ) {  <CR> Evaluation S0 = new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) ;  <CR> Envelop V1 = new Envelop ( "Taipei" , "Kaohsiung" , S0 ) ;  <CR> V1 . display ( ) ;  <CR> }  <CR> String senderAddr , receiverAddr ;  <CR> }  <CR>  <EOC>  <BOC> abstract public class Evaluation {  <CR> public String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> public Evaluation ( String w9 , String Z4 , String o8 , String b8 , String K8 ) {  <CR> this . title = w9 ;  <CR> this . receiver = Z4 ;  <CR> this . content = o8 ;  <CR> this . sender = b8 ;  <CR> this . date = K8 ;  <CR> }  <CR> abstract protected void Display ( ) ;  <CR> protected String title , receiver , content , sender , date ;  <CR> public String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> public String getDate ( ) {  <CR> return date ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Letter implements Comparable {  <CR> public static Evaluation [ ] list = { new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> private int x ;  <CR> public static void main ( String [ ] n8 ) {  <CR> int M9 ;  <CR> for ( M9 = list . length - 1 ; M9 >= 0 ; M9 -- ) {  <CR> int m0 = M9 ;  <CR> Letter t1 = new Letter ( M9 ) ;  <CR> Letter X7 = new Letter ( m0 - 1 ) ;  <CR> if ( t1 . compareTo ( X7 ) == 1 )  <CR> t1 . display ( M9 ) ;  <CR> }  <CR> }  <CR> public int compareTo ( Object J7 ) {  <CR> Letter Y = ( Letter ) J7 ;  <CR> if ( this . x > Y . x ) return 1 ;  <CR> else return - 1 ;  <CR> }  <CR> Letter ( int W7 ) {  <CR> this . x = W7 ;  <CR> }  <CR> public void display ( int M9 ) {  <CR> list [ M9 ] . Display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 