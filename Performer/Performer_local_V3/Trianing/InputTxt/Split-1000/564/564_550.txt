 <BOC> public class ChineseLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( getReceiver ( ) + " " + title + ", 您好" ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( getSender ( ) + " 敬上" ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public ChineseLetter ( String v6 , String t7 , String p4 , String B6 , String v9 ) {  <CR> super ( v6 , t7 , p4 , B6 , v9 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class EnglishLetter extends Evaluation {  <CR> public void Display ( ) {  <CR> System . out . println ( "Dear " + title + " " + getReceiver ( ) + "," ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( "Sincerely" ) ;  <CR> System . out . println ( getSender ( ) ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> public EnglishLetter ( String P9 , String H , String A9 , String m5 , String r7 ) {  <CR> super ( P9 , H , A9 , m5 , r7 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Envelop {  <CR> public static void main ( String [ ] K7 ) {  <CR> Evaluation m8 = new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) ;  <CR> Envelop i8 = new Envelop ( "Taipei" , "Kaohsiung" , m8 ) ;  <CR> i8 . display ( ) ;  <CR> }  <CR> String senderAddr , receiverAddr ;  <CR> Evaluation letter ;  <CR> public Envelop ( String A , String X0 , Evaluation t2 ) {  <CR> this . senderAddr = A ;  <CR> this . receiverAddr = X0 ;  <CR> this . letter = t2 ;  <CR> }  <CR> void display ( ) {  <CR> System . out . println ( "From: " + senderAddr ) ;  <CR> System . out . println ( "To: " + receiverAddr ) ;  <CR> letter . Display ( ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> abstract public class Evaluation {  <CR> public Evaluation ( String w8 , String E3 , String K5 , String b0 , String L4 ) {  <CR> this . title = w8 ;  <CR> this . receiver = E3 ;  <CR> this . content = K5 ;  <CR> this . sender = b0 ;  <CR> this . date = L4 ;  <CR> }  <CR> protected String title , receiver , content , sender , date ;  <CR> public String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> public String getDate ( ) {  <CR> return date ;  <CR> }  <CR> abstract protected void Display ( ) ;  <CR> public String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Letter implements Comparable {  <CR> Letter ( int h ) {  <CR> this . x = h ;  <CR> }  <CR> private int x ;  <CR> public static void main ( String [ ] C7 ) {  <CR> int N0 ;  <CR> for ( N0 = list . length - 1 ; N0 >= 0 ; N0 -- ) {  <CR> int p7 = N0 ;  <CR> Letter E9 = new Letter ( N0 ) ;  <CR> Letter B2 = new Letter ( p7 - 1 ) ;  <CR> if ( E9 . compareTo ( B2 ) == 1 )  <CR> E9 . display ( N0 ) ;  <CR> }  <CR> }  <CR> public static Evaluation [ ] list = { new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> public int compareTo ( Object U4 ) {  <CR> Letter X9 = ( Letter ) U4 ;  <CR> if ( this . x > X9 . x ) return 1 ;  <CR> else return - 1 ;  <CR> }  <CR> public void display ( int N0 ) {  <CR> list [ N0 ] . Display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 