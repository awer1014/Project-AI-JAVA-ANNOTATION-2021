<BOC> abstract public class Evaluation { <CR> public void print ( ) { <CR> String m 2 = <STRING> ; <CR> if ( kind . equals ( <STRING> ) ) <CR> m 2 += <STRING> ; <CR> else if ( kind . equals ( <STRING> ) ) <CR> m 2 += <STRING> ; <CR> else if ( kind . equals ( <STRING> ) ) <CR> m 2 += <STRING> ; <CR> System . out . println ( <STRING> + m 2 ) ; <CR> } <CR> private String kind ; <CR> public Evaluation ( String k 8 ) { <CR> kind = k 8 ; <CR> } <CR> abstract public void ask ( ) ; <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> public Exam ( String U 0 , String Y 4 ) { <CR> super ( U 0 , Y 4 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class HomeWork extends Evaluation { <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> public HomeWork ( String R , String J 4 ) { <CR> super ( R , J 4 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Report extends Evaluation { <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> public Report ( String w , String R 7 ) { <CR> super ( w , R 7 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Student { <CR> private String id , name , score , prop ; <CR> public void print ( ) { <CR> System . out . println ( <STRING> + id ) ; <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + score ) ; <CR> System . out . println ( <STRING> + prop ) ; <CR> } <CR> public Student ( String R 0 , String C , String E 7 , String H 3 ) { <CR> id = R 0 ; <CR> name = C ; <CR> score = E 7 ; <CR> prop = H 3 ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] c 0 ) { <CR> Scanner X 1 = new Scanner ( System . in ) ; <CR> boolean x 6 = <STRING> ; <CR> while ( x 6 ) { <CR> System . out . println ( <STRING> ) ; <CR> String l 8 = X 1 . nextLine ( ) ; <CR> if ( l 8 . equals ( <STRING> ) ) { <CR> x 6 = <STRING> ; <CR> break ; <CR> } <CR> System . out . println ( <STRING> ) ; <CR> String M 5 = X 1 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String B 8 = X 1 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String I 3 = X 1 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String h 8 = X 1 . nextLine ( ) ; <CR> Student l = new Student ( M 5 , B 8 , I 3 , h 8 ) ; <CR> Evaluation A 5 = new Evaluation ( l 8 ) ; <CR> Evaluation L 5 = <STRING> ; <CR> String P 4 , K 8 ; <CR> if ( l 8 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> P 4 = X 1 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> K 8 = X 1 . nextLine ( ) ; <CR> L 5 = new Exam ( P 4 , K 8 ) ; <CR> } <CR> else if ( l 8 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> P 4 = X 1 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> K 8 = X 1 . nextLine ( ) ; <CR> L 5 = new HomeWork ( P 4 , K 8 ) ; <CR> } <CR> else if ( l 8 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> P 4 = X 1 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> K 8 = X 1 . nextLine ( ) ; <CR> L 5 = new Report ( P 4 , K 8 ) ; <CR> } <CR> System . out . println ( <STRING> ) ; <CR> if ( L 5 ! = <STRING> ) { <CR> A 5 . print ( ) ; <CR> l . print ( ) ; <CR> L 5 . ask ( ) ; <CR> } <CR> System . out . print ( <STRING> ) ; <CR> } <CR> } <CR> } <CR> <EOC>