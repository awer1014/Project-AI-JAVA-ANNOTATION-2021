<BOC> abstract public class Evaluation { <CR> abstract public void printa ( ) ; <CR> public void print ( ) { <CR> System . out . println ( <STRING> + type ) ; <CR> System . out . println ( <STRING> + sid ) ; <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + grade ) ; <CR> System . out . println ( <STRING> + gradepc ) ; <CR> } <CR> public Evaluation ( String h 8 , String v 4 , String w 2 , double l , double U 3 ) { <CR> sid = h 8 ; <CR> name = v 4 ; <CR> type = w 2 ; <CR> this . grade = l ; <CR> this . gradepc = U 3 ; <CR> } <CR> private String sid , name , type ; <CR> protected double grade , gradepc ; <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> public void printa ( ) { <CR> System . out . println ( <STRING> + date ) ; <CR> System . out . println ( <STRING> + range ) ; <CR> } <CR> String date ; <CR> public Exam ( String I 0 , String K 8 , String P 6 , double c 1 , double o 1 ) { <CR> super ( I 0 , K 8 , P 6 , c 1 , o 1 ) ; <CR> } <CR> String range ; <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] s 8 ) { <CR> Scanner O 9 = new Scanner ( System . in ) ; <CR> System . out . println ( <STRING> ) ; <CR> int e 3 = <STRING> ; <CR> do <CR> { <CR> e 3 = O 9 . nextInt ( ) ; <CR> } <CR> while ( e 3 > <STRING> || e 3 < <STRING> ) ; <CR> return mapEvaluation ( e 3 ) ; <CR> } <CR> static Evaluation mapEvaluation ( int e 3 ) { <CR> Evaluation i 0 = <STRING> ; <CR> switch ( e 3 ) { <CR> case <STRING> : <CR> i 0 = new Exam ( <STRING> ) ; <CR> break ; <CR> } <CR> } <CR> } <CR> <EOC>