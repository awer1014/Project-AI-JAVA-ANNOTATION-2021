<BOC> import java . util . Scanner ; <CR> import java . util . Random ; <CR> public class input { <CR> static Scanner keyboard = new Scanner ( System . in ) ; <CR> public static void main ( String [ ] N 1 ) { <CR> System . out . print ( <STRING> ) ; <CR> String E 2 = keyboard . nextLine ( ) ; <CR> while ( E 2 ! = <STRING> ) { <CR> System . out . print ( <STRING> ) ; <CR> String p = keyboard . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String N 2 = keyboard . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String j 5 = keyboard . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String M 5 = keyboard . nextLine ( ) ; <CR> } <CR> if ( E 2 == <STRING> ) { <CR> } <CR> } <CR> static int count = <STRING> ; <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Keeper { <CR> static String tel ; <CR> public void display ( String c 7 , String b 3 ) { <CR> System . out . println ( <STRING> + c 7 ) ; <CR> System . out . println ( <STRING> + b 3 ) ; <CR> } <CR> public String getId ( ) { <CR> return id ; <CR> } <CR> static String id ; <CR> public String getTel ( ) { <CR> return tel ; <CR> } <CR> public Keeper ( String c 7 , String b 3 ) { <CR> this . id = c 7 ; <CR> this . tel = b 3 ; <CR> } <CR> } <CR> <EOC> <BOC> public class Pet { <CR> public String getName ( ) { <CR> return name ; <CR> } <CR> public void speek ( String N ) { <CR> if ( N == <STRING> ) { <CR> System . out . println ( <STRING> ) ; <CR> } <CR> if ( N == <STRING> ) { <CR> System . out . println ( <STRING> ) ; <CR> } <CR> } <CR> public String getPid ( ) { <CR> return pid ; <CR> } <CR> private String type ; <CR> public Pet ( String q 4 , String X 8 , String N ) { <CR> this . pid = q 4 ; <CR> this . name = X 8 ; <CR> this . type = N ; <CR> } <CR> private String pid ; <CR> public void display ( ) { <CR> System . out . println ( <STRING> + pid ) ; <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + type ) ; <CR> } <CR> private String name ; <CR> public String getType ( ) { <CR> return type ; <CR> } <CR> } <CR> <EOC>