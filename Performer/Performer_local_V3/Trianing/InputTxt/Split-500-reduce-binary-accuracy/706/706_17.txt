<BOC> import java . util . Scanner ; <CR> public class Keeper { <CR> String tel ; <CR> void Keeper ( String w 9 , String v 4 ) { <CR> this . id = w 9 ; <CR> this . tel = v 4 ; <CR> } <CR> public static void main ( String [ ] S 7 ) { <CR> String w 9 ; <CR> String v 4 ; <CR> Scanner j 0 = new Scanner ( System . in ) ; <CR> System . out . println ( <STRING> ) ; <CR> w 9 = j 0 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> v 4 = j 0 . nextLine ( ) ; <CR> Keeper q 2 = new Keeper ( w 9 , v 4 ) ; <CR> } <CR> void display ( ) { <CR> System . out . println ( <STRING> + id ) ; <CR> System . out . println ( <STRING> + tel ) ; <CR> } <CR> String id ; <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class pet { <CR> String Speak ( ) { <CR> if ( pid . equals ( <STRING> ) ) { <CR> return <STRING> ; <CR> } <CR> else if ( pid . equals ( <STRING> ) ) { <CR> return <STRING> ; <CR> } <CR> } <CR> String name ; <CR> static int count ; <CR> String type ; <CR> public static void main ( String [ ] z 0 ) { <CR> String x 3 ; <CR> String N ; <CR> String V 7 ; <CR> String D 7 ; <CR> String X 3 ; <CR> Scanner V 0 = new Scanner ( System . in ) ; <CR> System . out . println ( <STRING> ) ; <CR> D 7 = V 0 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> X 3 = V 0 . nextLine ( ) ; <CR> Keeper T 2 = new Keeper ( D 7 , X 3 ) ; <CR> Scanner V 0 = new Scanner ( System . in ) ; <CR> System . out . println ( <STRING> ) ; <CR> x 3 = V 0 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> V 7 = V 0 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> N = V 0 . nextLine ( ) ; <CR> pet b = new pet ( x 3 , N , V 7 , T 2 ) ; <CR> String U 0 = b . Speak ( ) ; <CR> System . out . println ( <STRING> + U 0 ) ; <CR> } <CR> String pid ; <CR> void Pet ( String x 3 , String N , String V 7 , Keeper t 6 ) { <CR> count ++ ; <CR> this . pid = x 3 ; <CR> this . name = N ; <CR> this . type = V 7 ; <CR> this . keeper = t 6 ; <CR> } <CR> void display ( ) { <CR> System . out . println ( <STRING> + pid ) ; <CR> System . out . println ( <STRING> + type ) ; <CR> System . out . println ( <STRING> + name ) ; <CR> keeper . display ( ) ; <CR> } <CR> Keeper keeper ; <CR> } <CR> <EOC>