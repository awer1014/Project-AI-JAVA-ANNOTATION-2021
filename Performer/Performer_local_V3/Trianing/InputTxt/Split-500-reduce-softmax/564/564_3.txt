<BOC> public class ChineseLetter extends Evaluation { <CR> public ChineseLetter ( String j 4 , String F 9 , String q 4 , String h 8 , String y ) { <CR> super ( j 4 , F 9 , q 4 , h 8 , y ) ; <CR> } <CR> public void Display ( ) { <CR> System . out . println ( getReceiver ( ) + <STRING> + title + <STRING> ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( getSender ( ) + <STRING> ) ; <CR> System . out . println ( getDate ( ) ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class EnglishLetter extends Evaluation { <CR> public EnglishLetter ( String w 9 , String j 0 , String U 5 , String n 3 , String t ) { <CR> super ( w 9 , j 0 , U 5 , n 3 , t ) ; <CR> } <CR> public void Display ( ) { <CR> System . out . println ( <STRING> + title + <STRING> + getReceiver ( ) + <STRING> ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( getSender ( ) ) ; <CR> System . out . println ( getDate ( ) ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Envelop { <CR> Evaluation letter ; <CR> public static void main ( String [ ] x 4 ) { <CR> Evaluation j 5 = new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Envelop N 5 = new Envelop ( <STRING> , <STRING> , j 5 ) ; <CR> N 5 . display ( ) ; <CR> } <CR> void display ( ) { <CR> System . out . println ( <STRING> + senderAddr ) ; <CR> System . out . println ( <STRING> + receiverAddr ) ; <CR> letter . Display ( ) ; <CR> } <CR> String senderAddr , receiverAddr ; <CR> public Envelop ( String C 2 , String p 6 , Evaluation d 1 ) { <CR> this . senderAddr = C 2 ; <CR> this . receiverAddr = p 6 ; <CR> this . letter = d 1 ; <CR> } <CR> } <CR> <EOC> <BOC> abstract public class Evaluation { <CR> public String getSender ( ) { <CR> return sender ; <CR> } <CR> protected String title , receiver , content , sender , date ; <CR> public String getReceiver ( ) { <CR> return receiver ; <CR> } <CR> public Evaluation ( String A 8 , String p 5 , String x 7 , String D 8 , String a 5 ) { <CR> this . title = A 8 ; <CR> this . receiver = p 5 ; <CR> this . content = x 7 ; <CR> this . sender = D 8 ; <CR> this . date = a 5 ; <CR> } <CR> public String getDate ( ) { <CR> return date ; <CR> } <CR> abstract protected void Display ( ) ; <CR> } <CR> <EOC> <BOC> public class Letter implements Comparable { <CR> private int x ; <CR> Letter ( int S 9 ) { <CR> this . x = S 9 ; <CR> } <CR> public void display ( int O 6 ) { <CR> list [ O 6 ] . Display ( ) ; <CR> } <CR> public static void main ( String [ ] Y 0 ) { <CR> int O 6 ; <CR> for ( O 6 = list . length - <STRING> ; O 6 > = <STRING> ; O 6 -- ) { <CR> int v 8 = O 6 ; <CR> Letter F 8 = new Letter ( O 6 ) ; <CR> Letter e 6 = new Letter ( v 8 - <STRING> ) ; <CR> if ( F 8 . compareTo ( e 6 ) == <STRING> ) <CR> F 8 . display ( O 6 ) ; <CR> } <CR> } <CR> public static Evaluation [ ] list = { new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) , new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) , new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) } ; <CR> public int compareTo ( Object I 4 ) { <CR> Letter n 2 = ( Letter ) I 4 ; <CR> if ( this . x > n 2 . x ) <CR> return <STRING> ; <CR> else <CR> return - <STRING> ; <CR> } <CR> } <CR> <EOC>