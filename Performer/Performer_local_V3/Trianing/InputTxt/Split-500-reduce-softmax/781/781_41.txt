<BOC> abstract public class Evaluation { <CR> public void print ( ) { <CR> String W 8 = <STRING> ; <CR> if ( kind . equals ( <STRING> ) ) <CR> W 8 += <STRING> ; <CR> else if ( kind . equals ( <STRING> ) ) <CR> W 8 += <STRING> ; <CR> else if ( kind . equals ( <STRING> ) ) <CR> W 8 += <STRING> ; <CR> System . out . println ( <STRING> + W 8 ) ; <CR> } <CR> public Evaluation ( String J 0 ) { <CR> kind = J 0 ; <CR> } <CR> abstract public void ask ( ) ; <CR> private String kind ; <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> public Exam ( String K 6 , String R 4 ) { <CR> super ( K 6 , R 4 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class HomeWork extends Evaluation { <CR> public HomeWork ( String D 5 , String p 5 ) { <CR> super ( D 5 , p 5 ) ; <CR> } <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Report extends Evaluation { <CR> public Report ( String g 2 , String E 5 ) { <CR> super ( g 2 , E 5 ) ; <CR> } <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Student { <CR> public Student ( String i , String u 3 , String h 0 , String U 8 ) { <CR> id = i ; <CR> name = u 3 ; <CR> score = h 0 ; <CR> prop = U 8 ; <CR> } <CR> private String id , name , score , prop ; <CR> public void print ( ) { <CR> System . out . println ( <STRING> + id ) ; <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + score ) ; <CR> System . out . println ( <STRING> + prop ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] z 2 ) { <CR> Scanner I 8 = new Scanner ( System . in ) ; <CR> boolean l 6 = <STRING> ; <CR> while ( l 6 ) { <CR> System . out . println ( <STRING> ) ; <CR> String U 8 = I 8 . nextLine ( ) ; <CR> if ( U 8 . equals ( <STRING> ) ) { <CR> l 6 = <STRING> ; <CR> break ; <CR> } <CR> System . out . println ( <STRING> ) ; <CR> String Y 9 = I 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String E 7 = I 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String Z 1 = I 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String l 5 = I 8 . nextLine ( ) ; <CR> Student e 1 = new Student ( Y 9 , E 7 , Z 1 , l 5 ) ; <CR> Evaluation I 6 = new Evaluation ( U 8 ) ; <CR> Evaluation d 6 = <STRING> ; <CR> String s 9 , o 7 ; <CR> if ( U 8 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> s 9 = I 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> o 7 = I 8 . nextLine ( ) ; <CR> d 6 = new Exam ( s 9 , o 7 ) ; <CR> } <CR> else if ( U 8 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> s 9 = I 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> o 7 = I 8 . nextLine ( ) ; <CR> d 6 = new HomeWork ( s 9 , o 7 ) ; <CR> } <CR> else if ( U 8 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> s 9 = I 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> o 7 = I 8 . nextLine ( ) ; <CR> d 6 = new Report ( s 9 , o 7 ) ; <CR> } <CR> System . out . println ( <STRING> ) ; <CR> if ( d 6 ! = <STRING> ) { <CR> I 6 . print ( ) ; <CR> e 1 . print ( ) ; <CR> d 6 . ask ( ) ; <CR> } <CR> System . out . print ( <STRING> ) ; <CR> } <CR> } <CR> } <CR> <EOC>