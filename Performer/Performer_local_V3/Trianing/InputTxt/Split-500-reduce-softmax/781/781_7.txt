<BOC> abstract public class Evaluation { <CR> private String kind ; <CR> abstract public void ask ( ) ; <CR> public void print ( ) { <CR> String I = <STRING> ; <CR> if ( kind . equals ( <STRING> ) ) <CR> I += <STRING> ; <CR> else if ( kind . equals ( <STRING> ) ) <CR> I += <STRING> ; <CR> else if ( kind . equals ( <STRING> ) ) <CR> I += <STRING> ; <CR> System . out . println ( <STRING> + I ) ; <CR> } <CR> public Evaluation ( String L 9 ) { <CR> kind = L 9 ; <CR> } <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> public Exam ( String y 0 , String C 7 ) { <CR> super ( y 0 , C 7 ) ; <CR> } <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class HomeWork extends Evaluation { <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> public HomeWork ( String g 2 , String V 5 ) { <CR> super ( g 2 , V 5 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Report extends Evaluation { <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> public Report ( String a , String G 5 ) { <CR> super ( a , G 5 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Student { <CR> public void print ( ) { <CR> System . out . println ( <STRING> + id ) ; <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + score ) ; <CR> System . out . println ( <STRING> + prop ) ; <CR> } <CR> public Student ( String B 2 , String I 9 , String H 4 , String C 2 ) { <CR> id = B 2 ; <CR> name = I 9 ; <CR> score = H 4 ; <CR> prop = C 2 ; <CR> } <CR> private String id , name , score , prop ; <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] g 3 ) { <CR> Scanner C 8 = new Scanner ( System . in ) ; <CR> boolean i 0 = <STRING> ; <CR> while ( i 0 ) { <CR> System . out . println ( <STRING> ) ; <CR> String A 1 = C 8 . nextLine ( ) ; <CR> if ( A 1 . equals ( <STRING> ) ) { <CR> i 0 = <STRING> ; <CR> break ; <CR> } <CR> System . out . println ( <STRING> ) ; <CR> String T 9 = C 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String z 6 = C 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String u 3 = C 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String W 4 = C 8 . nextLine ( ) ; <CR> Student Z 2 = new Student ( T 9 , z 6 , u 3 , W 4 ) ; <CR> Evaluation t 1 = new Evaluation ( A 1 ) ; <CR> Evaluation m 6 = <STRING> ; <CR> String x 8 , U 8 ; <CR> if ( A 1 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> x 8 = C 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> U 8 = C 8 . nextLine ( ) ; <CR> m 6 = new Exam ( x 8 , U 8 ) ; <CR> } <CR> else if ( A 1 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> x 8 = C 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> U 8 = C 8 . nextLine ( ) ; <CR> m 6 = new HomeWork ( x 8 , U 8 ) ; <CR> } <CR> else if ( A 1 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> x 8 = C 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> U 8 = C 8 . nextLine ( ) ; <CR> m 6 = new Report ( x 8 , U 8 ) ; <CR> } <CR> System . out . println ( <STRING> ) ; <CR> if ( m 6 ! = <STRING> ) { <CR> t 1 . print ( ) ; <CR> Z 2 . print ( ) ; <CR> m 6 . ask ( ) ; <CR> } <CR> System . out . print ( <STRING> ) ; <CR> } <CR> } <CR> } <CR> <EOC>