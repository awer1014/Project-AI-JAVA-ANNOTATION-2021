<BOC> abstract public class Evaluation { <CR> public Evaluation ( String y ) { <CR> kind = y ; <CR> } <CR> private String kind ; <CR> public void print ( ) { <CR> String A 6 = <STRING> ; <CR> if ( kind . equals ( <STRING> ) ) <CR> A 6 += <STRING> ; <CR> else if ( kind . equals ( <STRING> ) ) <CR> A 6 += <STRING> ; <CR> else if ( kind . equals ( <STRING> ) ) <CR> A 6 += <STRING> ; <CR> System . out . println ( <STRING> + A 6 ) ; <CR> } <CR> abstract public void ask ( ) ; <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> public Exam ( String b 7 , String k 9 ) { <CR> super ( b 7 , k 9 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class HomeWork extends Evaluation { <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> public HomeWork ( String W 4 , String u 1 ) { <CR> super ( W 4 , u 1 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Report extends Evaluation { <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> public Report ( String y 4 , String S 0 ) { <CR> super ( y 4 , S 0 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Student { <CR> public void print ( ) { <CR> System . out . println ( <STRING> + id ) ; <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + score ) ; <CR> System . out . println ( <STRING> + prop ) ; <CR> } <CR> public Student ( String u 8 , String a 8 , String M , String w 6 ) { <CR> id = u 8 ; <CR> name = a 8 ; <CR> score = M ; <CR> prop = w 6 ; <CR> } <CR> private String id , name , score , prop ; <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] b 5 ) { <CR> Scanner w 2 = new Scanner ( System . in ) ; <CR> boolean L = <STRING> ; <CR> while ( L ) { <CR> System . out . println ( <STRING> ) ; <CR> String G 7 = w 2 . nextLine ( ) ; <CR> if ( G 7 . equals ( <STRING> ) ) { <CR> L = <STRING> ; <CR> break ; <CR> } <CR> System . out . println ( <STRING> ) ; <CR> String v 0 = w 2 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String L 5 = w 2 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String l 5 = w 2 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String T 1 = w 2 . nextLine ( ) ; <CR> Student k 8 = new Student ( v 0 , L 5 , l 5 , T 1 ) ; <CR> Evaluation h 6 = new Evaluation ( G 7 ) ; <CR> Evaluation P 0 = <STRING> ; <CR> String C 1 , U 8 ; <CR> if ( G 7 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> C 1 = w 2 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> U 8 = w 2 . nextLine ( ) ; <CR> P 0 = new Exam ( C 1 , U 8 ) ; <CR> } <CR> else if ( G 7 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> C 1 = w 2 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> U 8 = w 2 . nextLine ( ) ; <CR> P 0 = new HomeWork ( C 1 , U 8 ) ; <CR> } <CR> else if ( G 7 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> C 1 = w 2 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> U 8 = w 2 . nextLine ( ) ; <CR> P 0 = new Report ( C 1 , U 8 ) ; <CR> } <CR> System . out . println ( <STRING> ) ; <CR> if ( P 0 ! = <STRING> ) { <CR> h 6 . print ( ) ; <CR> k 8 . print ( ) ; <CR> P 0 . ask ( ) ; <CR> } <CR> System . out . print ( <STRING> ) ; <CR> } <CR> } <CR> } <CR> <EOC>