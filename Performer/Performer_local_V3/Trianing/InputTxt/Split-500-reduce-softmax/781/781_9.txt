<BOC> abstract public class Evaluation { <CR> private String kind ; <CR> abstract public void ask ( ) ; <CR> public Evaluation ( String o 7 ) { <CR> kind = o 7 ; <CR> } <CR> public void print ( ) { <CR> String P 3 = <STRING> ; <CR> if ( kind . equals ( <STRING> ) ) <CR> P 3 += <STRING> ; <CR> else if ( kind . equals ( <STRING> ) ) <CR> P 3 += <STRING> ; <CR> else if ( kind . equals ( <STRING> ) ) <CR> P 3 += <STRING> ; <CR> System . out . println ( <STRING> + P 3 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> public Exam ( String p 5 , String B 3 ) { <CR> super ( p 5 , B 3 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class HomeWork extends Evaluation { <CR> public HomeWork ( String e , String V 3 ) { <CR> super ( e , V 3 ) ; <CR> } <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Report extends Evaluation { <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> public Report ( String r 6 , String K 4 ) { <CR> super ( r 6 , K 4 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Student { <CR> public void print ( ) { <CR> System . out . println ( <STRING> + id ) ; <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + score ) ; <CR> System . out . println ( <STRING> + prop ) ; <CR> } <CR> public Student ( String s 3 , String R 7 , String L 7 , String n 2 ) { <CR> id = s 3 ; <CR> name = R 7 ; <CR> score = L 7 ; <CR> prop = n 2 ; <CR> } <CR> private String id , name , score , prop ; <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] t 0 ) { <CR> Scanner F 5 = new Scanner ( System . in ) ; <CR> boolean f 8 = <STRING> ; <CR> while ( f 8 ) { <CR> System . out . println ( <STRING> ) ; <CR> String K = F 5 . nextLine ( ) ; <CR> if ( K . equals ( <STRING> ) ) { <CR> f 8 = <STRING> ; <CR> break ; <CR> } <CR> System . out . println ( <STRING> ) ; <CR> String D 0 = F 5 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String V 4 = F 5 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String z 2 = F 5 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String M = F 5 . nextLine ( ) ; <CR> Student v 2 = new Student ( D 0 , V 4 , z 2 , M ) ; <CR> Evaluation L 2 = new Evaluation ( K ) ; <CR> Evaluation i 9 = <STRING> ; <CR> String n 2 , c 1 ; <CR> if ( K . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> n 2 = F 5 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> c 1 = F 5 . nextLine ( ) ; <CR> i 9 = new Exam ( n 2 , c 1 ) ; <CR> } <CR> else if ( K . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> n 2 = F 5 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> c 1 = F 5 . nextLine ( ) ; <CR> i 9 = new HomeWork ( n 2 , c 1 ) ; <CR> } <CR> else if ( K . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> n 2 = F 5 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> c 1 = F 5 . nextLine ( ) ; <CR> i 9 = new Report ( n 2 , c 1 ) ; <CR> } <CR> System . out . println ( <STRING> ) ; <CR> if ( i 9 ! = <STRING> ) { <CR> L 2 . print ( ) ; <CR> v 2 . print ( ) ; <CR> i 9 . ask ( ) ; <CR> } <CR> System . out . print ( <STRING> ) ; <CR> } <CR> } <CR> } <CR> <EOC>