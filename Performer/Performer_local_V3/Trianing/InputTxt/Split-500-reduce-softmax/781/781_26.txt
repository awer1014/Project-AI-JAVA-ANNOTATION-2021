<BOC> abstract public class Evaluation { <CR> abstract public void ask ( ) ; <CR> private String kind ; <CR> public void print ( ) { <CR> String e 7 = <STRING> ; <CR> if ( kind . equals ( <STRING> ) ) <CR> e 7 += <STRING> ; <CR> else if ( kind . equals ( <STRING> ) ) <CR> e 7 += <STRING> ; <CR> else if ( kind . equals ( <STRING> ) ) <CR> e 7 += <STRING> ; <CR> System . out . println ( <STRING> + e 7 ) ; <CR> } <CR> public Evaluation ( String s 1 ) { <CR> kind = s 1 ; <CR> } <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> public Exam ( String B , String U 8 ) { <CR> super ( B , U 8 ) ; <CR> } <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class HomeWork extends Evaluation { <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> public HomeWork ( String i 5 , String r 4 ) { <CR> super ( i 5 , r 4 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Report extends Evaluation { <CR> public Report ( String T 5 , String G 1 ) { <CR> super ( T 5 , G 1 ) ; <CR> } <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Student { <CR> private String id , name , score , prop ; <CR> public Student ( String t , String y 6 , String i 0 , String Y 8 ) { <CR> id = t ; <CR> name = y 6 ; <CR> score = i 0 ; <CR> prop = Y 8 ; <CR> } <CR> public void print ( ) { <CR> System . out . println ( <STRING> + id ) ; <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + score ) ; <CR> System . out . println ( <STRING> + prop ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] G 7 ) { <CR> Scanner P 8 = new Scanner ( System . in ) ; <CR> boolean q 9 = <STRING> ; <CR> while ( q 9 ) { <CR> System . out . println ( <STRING> ) ; <CR> String k = P 8 . nextLine ( ) ; <CR> if ( k . equals ( <STRING> ) ) { <CR> q 9 = <STRING> ; <CR> break ; <CR> } <CR> System . out . println ( <STRING> ) ; <CR> String P 1 = P 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String f 9 = P 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String H = P 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String B 7 = P 8 . nextLine ( ) ; <CR> Student h 1 = new Student ( P 1 , f 9 , H , B 7 ) ; <CR> Evaluation U 2 = new Evaluation ( k ) ; <CR> Evaluation d 2 = <STRING> ; <CR> String D 2 , A 0 ; <CR> if ( k . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> D 2 = P 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> A 0 = P 8 . nextLine ( ) ; <CR> d 2 = new Exam ( D 2 , A 0 ) ; <CR> } <CR> else if ( k . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> D 2 = P 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> A 0 = P 8 . nextLine ( ) ; <CR> d 2 = new HomeWork ( D 2 , A 0 ) ; <CR> } <CR> else if ( k . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> D 2 = P 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> A 0 = P 8 . nextLine ( ) ; <CR> d 2 = new Report ( D 2 , A 0 ) ; <CR> } <CR> System . out . println ( <STRING> ) ; <CR> if ( d 2 ! = <STRING> ) { <CR> U 2 . print ( ) ; <CR> h 1 . print ( ) ; <CR> d 2 . ask ( ) ; <CR> } <CR> System . out . print ( <STRING> ) ; <CR> } <CR> } <CR> } <CR> <EOC>