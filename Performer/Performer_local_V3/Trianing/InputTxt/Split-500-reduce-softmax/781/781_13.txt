<BOC> abstract public class Evaluation { <CR> abstract public void ask ( ) ; <CR> public void print ( ) { <CR> String Q 7 = <STRING> ; <CR> if ( kind . equals ( <STRING> ) ) <CR> Q 7 += <STRING> ; <CR> else if ( kind . equals ( <STRING> ) ) <CR> Q 7 += <STRING> ; <CR> else if ( kind . equals ( <STRING> ) ) <CR> Q 7 += <STRING> ; <CR> System . out . println ( <STRING> + Q 7 ) ; <CR> } <CR> private String kind ; <CR> public Evaluation ( String j 8 ) { <CR> kind = j 8 ; <CR> } <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> public Exam ( String y , String J 0 ) { <CR> super ( y , J 0 ) ; <CR> } <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class HomeWork extends Evaluation { <CR> public HomeWork ( String K 7 , String U 5 ) { <CR> super ( K 7 , U 5 ) ; <CR> } <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Report extends Evaluation { <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> public Report ( String K , String z 2 ) { <CR> super ( K , z 2 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Student { <CR> public Student ( String a 9 , String W 4 , String C 6 , String y 5 ) { <CR> id = a 9 ; <CR> name = W 4 ; <CR> score = C 6 ; <CR> prop = y 5 ; <CR> } <CR> private String id , name , score , prop ; <CR> public void print ( ) { <CR> System . out . println ( <STRING> + id ) ; <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + score ) ; <CR> System . out . println ( <STRING> + prop ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] E 8 ) { <CR> Scanner A = new Scanner ( System . in ) ; <CR> boolean y 2 = <STRING> ; <CR> while ( y 2 ) { <CR> System . out . println ( <STRING> ) ; <CR> String t 5 = A . nextLine ( ) ; <CR> if ( t 5 . equals ( <STRING> ) ) { <CR> y 2 = <STRING> ; <CR> break ; <CR> } <CR> System . out . println ( <STRING> ) ; <CR> String a 3 = A . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String L = A . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String L 6 = A . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String e 1 = A . nextLine ( ) ; <CR> Student p 2 = new Student ( a 3 , L , L 6 , e 1 ) ; <CR> Evaluation L 9 = new Evaluation ( t 5 ) ; <CR> Evaluation O 8 = <STRING> ; <CR> String e 4 , e 8 ; <CR> if ( t 5 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> e 4 = A . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> e 8 = A . nextLine ( ) ; <CR> O 8 = new Exam ( e 4 , e 8 ) ; <CR> } <CR> else if ( t 5 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> e 4 = A . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> e 8 = A . nextLine ( ) ; <CR> O 8 = new HomeWork ( e 4 , e 8 ) ; <CR> } <CR> else if ( t 5 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> e 4 = A . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> e 8 = A . nextLine ( ) ; <CR> O 8 = new Report ( e 4 , e 8 ) ; <CR> } <CR> System . out . println ( <STRING> ) ; <CR> if ( O 8 ! = <STRING> ) { <CR> L 9 . print ( ) ; <CR> p 2 . print ( ) ; <CR> O 8 . ask ( ) ; <CR> } <CR> System . out . print ( <STRING> ) ; <CR> } <CR> } <CR> } <CR> <EOC>