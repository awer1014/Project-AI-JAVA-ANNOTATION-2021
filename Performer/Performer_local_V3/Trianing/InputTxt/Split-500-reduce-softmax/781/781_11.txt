<BOC> abstract public class Evaluation { <CR> abstract public void ask ( ) ; <CR> public void print ( ) { <CR> String T 4 = <STRING> ; <CR> if ( kind . equals ( <STRING> ) ) <CR> T 4 += <STRING> ; <CR> else if ( kind . equals ( <STRING> ) ) <CR> T 4 += <STRING> ; <CR> else if ( kind . equals ( <STRING> ) ) <CR> T 4 += <STRING> ; <CR> System . out . println ( <STRING> + T 4 ) ; <CR> } <CR> public Evaluation ( String V 1 ) { <CR> kind = V 1 ; <CR> } <CR> private String kind ; <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> public Exam ( String z 5 , String k 8 ) { <CR> super ( z 5 , k 8 ) ; <CR> } <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class HomeWork extends Evaluation { <CR> public HomeWork ( String d 1 , String c 1 ) { <CR> super ( d 1 , c 1 ) ; <CR> } <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Report extends Evaluation { <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> public Report ( String q 3 , String o 6 ) { <CR> super ( q 3 , o 6 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Student { <CR> private String id , name , score , prop ; <CR> public Student ( String A 1 , String U 0 , String w 4 , String Q 5 ) { <CR> id = A 1 ; <CR> name = U 0 ; <CR> score = w 4 ; <CR> prop = Q 5 ; <CR> } <CR> public void print ( ) { <CR> System . out . println ( <STRING> + id ) ; <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + score ) ; <CR> System . out . println ( <STRING> + prop ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] t 9 ) { <CR> Scanner U 8 = new Scanner ( System . in ) ; <CR> boolean v 5 = <STRING> ; <CR> while ( v 5 ) { <CR> System . out . println ( <STRING> ) ; <CR> String A 8 = U 8 . nextLine ( ) ; <CR> if ( A 8 . equals ( <STRING> ) ) { <CR> v 5 = <STRING> ; <CR> break ; <CR> } <CR> System . out . println ( <STRING> ) ; <CR> String t = U 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String E 9 = U 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String f 0 = U 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String U 7 = U 8 . nextLine ( ) ; <CR> Student u 0 = new Student ( t , E 9 , f 0 , U 7 ) ; <CR> Evaluation E 1 = new Evaluation ( A 8 ) ; <CR> Evaluation N 8 = <STRING> ; <CR> String D 0 , o 5 ; <CR> if ( A 8 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> D 0 = U 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> o 5 = U 8 . nextLine ( ) ; <CR> N 8 = new Exam ( D 0 , o 5 ) ; <CR> } <CR> else if ( A 8 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> D 0 = U 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> o 5 = U 8 . nextLine ( ) ; <CR> N 8 = new HomeWork ( D 0 , o 5 ) ; <CR> } <CR> else if ( A 8 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> D 0 = U 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> o 5 = U 8 . nextLine ( ) ; <CR> N 8 = new Report ( D 0 , o 5 ) ; <CR> } <CR> System . out . println ( <STRING> ) ; <CR> if ( N 8 ! = <STRING> ) { <CR> E 1 . print ( ) ; <CR> u 0 . print ( ) ; <CR> N 8 . ask ( ) ; <CR> } <CR> System . out . print ( <STRING> ) ; <CR> } <CR> } <CR> } <CR> <EOC>