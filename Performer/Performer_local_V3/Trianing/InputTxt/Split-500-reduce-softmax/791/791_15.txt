<BOC> abstract public class Evaluation { <CR> abstract public void printa ( ) ; <CR> protected double grade , gradepc ; <CR> public void print ( ) { <CR> System . out . println ( <STRING> + type ) ; <CR> System . out . println ( <STRING> + sid ) ; <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + grade ) ; <CR> System . out . println ( <STRING> + gradepc ) ; <CR> } <CR> private String sid , name , type ; <CR> public Evaluation ( String Z 3 , String Y 4 , String q 7 , double h , double i 3 ) { <CR> sid = Z 3 ; <CR> name = Y 4 ; <CR> type = q 7 ; <CR> this . grade = h ; <CR> this . gradepc = i 3 ; <CR> } <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> public void printa ( ) { <CR> System . out . println ( <STRING> + date ) ; <CR> System . out . println ( <STRING> + range ) ; <CR> } <CR> String date ; <CR> public Exam ( String g 1 , String c 4 , String U 0 , double w 1 , double D ) { <CR> super ( g 1 , c 4 , U 0 , w 1 , D ) ; <CR> } <CR> String range ; <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] D 8 ) { <CR> Scanner d 4 = new Scanner ( System . in ) ; <CR> System . out . println ( <STRING> ) ; <CR> int S 3 = <STRING> ; <CR> do <CR> { <CR> S 3 = d 4 . nextInt ( ) ; <CR> } <CR> while ( S 3 > <STRING> || S 3 < <STRING> ) ; <CR> return mapEvaluation ( S 3 ) ; <CR> } <CR> static Evaluation mapEvaluation ( int S 3 ) { <CR> Evaluation u 7 = <STRING> ; <CR> switch ( S 3 ) { <CR> case <STRING> : <CR> u 7 = new Exam ( <STRING> ) ; <CR> break ; <CR> } <CR> } <CR> } <CR> <EOC>