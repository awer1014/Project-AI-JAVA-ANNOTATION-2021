<BOC> public class Homework extends require { <CR> public Homework ( student s , String j 1 , String n 1 , String L 2 ) { <CR> super ( s , j 1 , n 1 , L 2 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Quiz extends require { <CR> public Quiz ( student o 4 , String z 7 , String Q 7 , String g 7 ) { <CR> super ( o 4 , z 7 , Q 7 , g 7 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Report extends require { <CR> public Report ( student Z 7 , String z , String E 2 , String X 9 ) { <CR> super ( Z 7 , z , E 2 , X 9 ) ; <CR> } <CR> } <CR> <EOC> <BOC> abstract public class require { <CR> public void display ( ) { <CR> if ( id . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> + id ) ; <CR> System . out . println ( <STRING> + date ) ; <CR> System . out . println ( <STRING> + type ) ; <CR> } <CR> else if ( id . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> + id ) ; <CR> System . out . println ( <STRING> + date ) ; <CR> System . out . println ( <STRING> + type ) ; <CR> } <CR> else if ( id . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> + id ) ; <CR> System . out . println ( <STRING> + date ) ; <CR> System . out . println ( <STRING> + type ) ; <CR> } <CR> } <CR> private String id , date , type ; <CR> private student student ; <CR> public require ( student l 9 , String C 5 , String D 1 , String f 2 ) { <CR> student = l 9 ; <CR> id = C 5 ; <CR> date = D 1 ; <CR> type = f 2 ; <CR> } <CR> } <CR> <EOC> <BOC> public class student { <CR> student ( String x 9 , String x 3 , double r , double j 9 ) { <CR> id = x 9 ; <CR> name = x 3 ; <CR> grade = r ; <CR> gradepp = j 9 ; <CR> } <CR> private String id , name ; <CR> private double grade , gradepp ; <CR> public void display ( ) { <CR> System . out . println ( <STRING> + id ) ; <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + grade ) ; <CR> System . out . println ( <STRING> + gradepp ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] T 6 ) { <CR> Scanner Q = new Scanner ( System . in ) ; <CR> boolean k 6 = <STRING> ; <CR> while ( k 6 ) { <CR> System . out . print ( <STRING> ) ; <CR> String H = Q . nextLine ( ) ; <CR> if ( H . equals ( <STRING> ) ) { <CR> k 6 = <STRING> ; <CR> break ; <CR> } <CR> System . out . print ( <STRING> ) ; <CR> String V 5 = Q . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String K 7 = Q . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> double E 4 = Q . nextDouble ( ) ; <CR> Q . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> double u 9 = Q . nextDouble ( ) ; <CR> Q . nextLine ( ) ; <CR> String I 1 , h 1 ; <CR> student I 2 = new student ( V 5 , K 7 , E 4 , u 9 ) ; <CR> require D = <STRING> ; <CR> if ( H . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> I 1 = Q . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> h 1 = Q . nextLine ( ) ; <CR> D = new Quiz ( I 2 , H , I 1 , h 1 ) ; <CR> } <CR> else if ( H . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> I 1 = Q . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> h 1 = Q . nextLine ( ) ; <CR> D = new Homework ( I 2 , H , I 1 , h 1 ) ; <CR> } <CR> else if ( H . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> I 1 = Q . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> h 1 = Q . nextLine ( ) ; <CR> D = new Report ( I 2 , H , I 1 , h 1 ) ; <CR> } <CR> System . out . print ( <STRING> ) ; <CR> System . out . println ( <STRING> ) ; <CR> if ( D ! = <STRING> ) { <CR> I 2 . display ( ) ; <CR> D . display ( ) ; <CR> } <CR> System . out . print ( <STRING> ) ; <CR> } <CR> } <CR> } <CR> <EOC>