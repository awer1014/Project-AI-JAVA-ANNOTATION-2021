<BOC> import java . util . Scanner ; <CR> public class Keeper { <CR> String id ; <CR> void display ( ) { <CR> System . out . println ( <STRING> + id ) ; <CR> System . out . println ( <STRING> + tel ) ; <CR> } <CR> void Keeper ( String W 7 , String z ) { <CR> this . id = W 7 ; <CR> this . tel = z ; <CR> } <CR> public static void main ( String [ ] t 8 ) { <CR> String W 7 ; <CR> String z ; <CR> Scanner Y 2 = new Scanner ( System . in ) ; <CR> System . out . println ( <STRING> ) ; <CR> W 7 = Y 2 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> z = Y 2 . nextLine ( ) ; <CR> Keeper c 1 = new Keeper ( W 7 , z ) ; <CR> } <CR> String tel ; <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class pet { <CR> void Pet ( String Z 5 , String a 2 , String n , Keeper U ) { <CR> count ++ ; <CR> this . pid = Z 5 ; <CR> this . name = a 2 ; <CR> this . type = n ; <CR> this . keeper = U ; <CR> } <CR> static int count ; <CR> Keeper keeper ; <CR> String name ; <CR> String pid ; <CR> String Speak ( ) { <CR> if ( pid . equals ( <STRING> ) ) { <CR> return <STRING> ; <CR> } <CR> else if ( pid . equals ( <STRING> ) ) { <CR> return <STRING> ; <CR> } <CR> } <CR> void display ( ) { <CR> System . out . println ( <STRING> + pid ) ; <CR> System . out . println ( <STRING> + type ) ; <CR> System . out . println ( <STRING> + name ) ; <CR> keeper . display ( ) ; <CR> } <CR> String type ; <CR> public static void main ( String [ ] u ) { <CR> String Z 5 ; <CR> String a 2 ; <CR> String n ; <CR> String p 6 ; <CR> String r 7 ; <CR> Scanner E 7 = new Scanner ( System . in ) ; <CR> System . out . println ( <STRING> ) ; <CR> p 6 = E 7 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> r 7 = E 7 . nextLine ( ) ; <CR> Keeper s 9 = new Keeper ( p 6 , r 7 ) ; <CR> Scanner E 7 = new Scanner ( System . in ) ; <CR> System . out . println ( <STRING> ) ; <CR> Z 5 = E 7 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> n = E 7 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> a 2 = E 7 . nextLine ( ) ; <CR> pet T 5 = new pet ( Z 5 , a 2 , n , s 9 ) ; <CR> String e 7 = T 5 . Speak ( ) ; <CR> System . out . println ( <STRING> + e 7 ) ; <CR> } <CR> } <CR> <EOC>