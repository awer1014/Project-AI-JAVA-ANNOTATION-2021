<BOC> import java . util . Scanner ; <CR> public class Keeper { <CR> String id ; <CR> void Keeper ( String f , String S 7 ) { <CR> this . id = f ; <CR> this . tel = S 7 ; <CR> } <CR> String tel ; <CR> public static void main ( String [ ] L 9 ) { <CR> String f ; <CR> String S 7 ; <CR> Scanner K 9 = new Scanner ( System . in ) ; <CR> System . out . println ( <STRING> ) ; <CR> f = K 9 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> S 7 = K 9 . nextLine ( ) ; <CR> Keeper o 8 = new Keeper ( f , S 7 ) ; <CR> } <CR> void display ( ) { <CR> System . out . println ( <STRING> + id ) ; <CR> System . out . println ( <STRING> + tel ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class pet { <CR> String Speak ( ) { <CR> if ( pid . equals ( <STRING> ) ) { <CR> return <STRING> ; <CR> } <CR> else if ( pid . equals ( <STRING> ) ) { <CR> return <STRING> ; <CR> } <CR> } <CR> void Pet ( String B 8 , String I , String j 2 , Keeper J ) { <CR> count ++ ; <CR> this . pid = B 8 ; <CR> this . name = I ; <CR> this . type = j 2 ; <CR> this . keeper = J ; <CR> } <CR> Keeper keeper ; <CR> public static void main ( String [ ] I 5 ) { <CR> String B 8 ; <CR> String I ; <CR> String j 2 ; <CR> String n 0 ; <CR> String N 4 ; <CR> Scanner g 3 = new Scanner ( System . in ) ; <CR> System . out . println ( <STRING> ) ; <CR> n 0 = g 3 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> N 4 = g 3 . nextLine ( ) ; <CR> Keeper Y 7 = new Keeper ( n 0 , N 4 ) ; <CR> Scanner g 3 = new Scanner ( System . in ) ; <CR> System . out . println ( <STRING> ) ; <CR> B 8 = g 3 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> j 2 = g 3 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> I = g 3 . nextLine ( ) ; <CR> pet w 7 = new pet ( B 8 , I , j 2 , Y 7 ) ; <CR> String q 7 = w 7 . Speak ( ) ; <CR> System . out . println ( <STRING> + q 7 ) ; <CR> } <CR> String name ; <CR> String pid ; <CR> String type ; <CR> void display ( ) { <CR> System . out . println ( <STRING> + pid ) ; <CR> System . out . println ( <STRING> + type ) ; <CR> System . out . println ( <STRING> + name ) ; <CR> keeper . display ( ) ; <CR> } <CR> static int count ; <CR> } <CR> <EOC>