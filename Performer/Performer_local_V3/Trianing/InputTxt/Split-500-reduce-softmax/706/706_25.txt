<BOC> import java . util . Scanner ; <CR> public class Keeper { <CR> void Keeper ( String K 7 , String V 4 ) { <CR> this . id = K 7 ; <CR> this . tel = V 4 ; <CR> } <CR> public static void main ( String [ ] p 1 ) { <CR> String K 7 ; <CR> String V 4 ; <CR> Scanner c 7 = new Scanner ( System . in ) ; <CR> System . out . println ( <STRING> ) ; <CR> K 7 = c 7 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> V 4 = c 7 . nextLine ( ) ; <CR> Keeper U 6 = new Keeper ( K 7 , V 4 ) ; <CR> } <CR> void display ( ) { <CR> System . out . println ( <STRING> + id ) ; <CR> System . out . println ( <STRING> + tel ) ; <CR> } <CR> String tel ; <CR> String id ; <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class pet { <CR> String type ; <CR> static int count ; <CR> String pid ; <CR> public static void main ( String [ ] X 7 ) { <CR> String t 1 ; <CR> String s ; <CR> String S 4 ; <CR> String j 0 ; <CR> String Y 1 ; <CR> Scanner L = new Scanner ( System . in ) ; <CR> System . out . println ( <STRING> ) ; <CR> j 0 = L . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> Y 1 = L . nextLine ( ) ; <CR> Keeper j 4 = new Keeper ( j 0 , Y 1 ) ; <CR> Scanner L = new Scanner ( System . in ) ; <CR> System . out . println ( <STRING> ) ; <CR> t 1 = L . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> S 4 = L . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> s = L . nextLine ( ) ; <CR> pet j 2 = new pet ( t 1 , s , S 4 , j 4 ) ; <CR> String O 5 = j 2 . Speak ( ) ; <CR> System . out . println ( <STRING> + O 5 ) ; <CR> } <CR> Keeper keeper ; <CR> void Pet ( String t 1 , String s , String S 4 , Keeper f 0 ) { <CR> count ++ ; <CR> this . pid = t 1 ; <CR> this . name = s ; <CR> this . type = S 4 ; <CR> this . keeper = f 0 ; <CR> } <CR> String name ; <CR> String Speak ( ) { <CR> if ( pid . equals ( <STRING> ) ) { <CR> return <STRING> ; <CR> } <CR> else if ( pid . equals ( <STRING> ) ) { <CR> return <STRING> ; <CR> } <CR> } <CR> void display ( ) { <CR> System . out . println ( <STRING> + pid ) ; <CR> System . out . println ( <STRING> + type ) ; <CR> System . out . println ( <STRING> + name ) ; <CR> keeper . display ( ) ; <CR> } <CR> } <CR> <EOC>