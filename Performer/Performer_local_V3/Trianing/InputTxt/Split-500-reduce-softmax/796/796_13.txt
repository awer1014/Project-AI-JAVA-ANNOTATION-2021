<BOC> abstract public class Evaluation { <CR> protected Keeper keeper ; <CR> public static int getcount ( ) { <CR> return count ; <CR> } <CR> protected String pid , name , type ; <CR> public Evaluation ( String z 3 , String U 3 , String z 2 , Keeper s 1 ) { <CR> pid = z 3 ; <CR> name = U 3 ; <CR> type = z 2 ; <CR> count ++ ; <CR> keeper = s 1 ; <CR> } <CR> private static int count ; <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> public Exam ( String p 7 , String X , String F 2 , Keeper Z 3 ) { <CR> super ( p 7 , X , F 2 , Z 3 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class HomeWork extends Evaluation { <CR> public HomeWork ( String w 1 , String x , String O 1 , Keeper o 9 ) { <CR> super ( w 1 , x , O 1 , o 9 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Keeper { <CR> public void display ( ) { <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + id ) ; <CR> System . out . println ( <STRING> + tel ) ; <CR> } <CR> private String id , tel , name ; <CR> public Keeper ( String o 5 , String I 9 , String Y 2 ) { <CR> id = I 9 ; <CR> tel = Y 2 ; <CR> name = o 5 ; <CR> } <CR> } <CR> <EOC> <BOC> public class Report extends Evaluation { <CR> public Report ( String t 6 , String S 4 , String X 0 , Keeper o 7 ) { <CR> super ( t 6 , S 4 , X 0 , o 7 ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] O 9 ) { <CR> Scanner V 8 = new Scanner ( System . in ) ; <CR> boolean q 5 = <STRING> ; <CR> while ( q 5 ) { <CR> System . out . print ( <STRING> ) ; <CR> String T 9 = V 8 . nextLine ( ) ; <CR> if ( T 9 . equals ( <STRING> ) ) { <CR> q 5 = <STRING> ; <CR> break ; <CR> } <CR> System . out . print ( <STRING> ) ; <CR> String H 8 = V 8 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String p 8 = V 8 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String R 8 = V 8 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String k = V 8 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String E 7 = V 8 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String c 8 = V 8 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> Keeper r 5 = new Keeper ( R 8 , k , E 7 ) ; <CR> Evaluation D 5 ; <CR> if ( T 9 . equals ( <STRING> ) ) <CR> D 5 = new Exam ( H 8 , p 8 , T 9 , r 5 ) ; <CR> else if ( T 9 . equals ( <STRING> ) ) <CR> D 5 = new HomeWork ( H 8 , p 8 , T 9 , r 5 ) ; <CR> else <CR> D 5 = new Report ( H 8 , p 8 , T 9 , r 5 ) ; <CR> System . out . println ( <STRING> ) ; <CR> } <CR> } <CR> } <CR> <EOC>