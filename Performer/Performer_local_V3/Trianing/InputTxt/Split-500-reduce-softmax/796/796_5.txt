<BOC> abstract public class Evaluation { <CR> public Evaluation ( String M 3 , String L 3 , String w 2 , Keeper G 3 ) { <CR> pid = M 3 ; <CR> name = L 3 ; <CR> type = w 2 ; <CR> count ++ ; <CR> keeper = G 3 ; <CR> } <CR> protected String pid , name , type ; <CR> private static int count ; <CR> protected Keeper keeper ; <CR> public static int getcount ( ) { <CR> return count ; <CR> } <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> public Exam ( String F 3 , String J 1 , String Q 4 , Keeper h 2 ) { <CR> super ( F 3 , J 1 , Q 4 , h 2 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class HomeWork extends Evaluation { <CR> public HomeWork ( String X 5 , String b 4 , String X 4 , Keeper a 3 ) { <CR> super ( X 5 , b 4 , X 4 , a 3 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Keeper { <CR> public void display ( ) { <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + id ) ; <CR> System . out . println ( <STRING> + tel ) ; <CR> } <CR> public Keeper ( String G , String D 7 , String B 2 ) { <CR> id = D 7 ; <CR> tel = B 2 ; <CR> name = G ; <CR> } <CR> private String id , tel , name ; <CR> } <CR> <EOC> <BOC> public class Report extends Evaluation { <CR> public Report ( String R 0 , String G 5 , String b 9 , Keeper m ) { <CR> super ( R 0 , G 5 , b 9 , m ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] d 3 ) { <CR> Scanner H 1 = new Scanner ( System . in ) ; <CR> boolean T 3 = <STRING> ; <CR> while ( T 3 ) { <CR> System . out . print ( <STRING> ) ; <CR> String e 9 = H 1 . nextLine ( ) ; <CR> if ( e 9 . equals ( <STRING> ) ) { <CR> T 3 = <STRING> ; <CR> break ; <CR> } <CR> System . out . print ( <STRING> ) ; <CR> String T 0 = H 1 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String p 6 = H 1 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String x 6 = H 1 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String o 4 = H 1 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String s 1 = H 1 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String R 3 = H 1 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> Keeper C 5 = new Keeper ( x 6 , o 4 , s 1 ) ; <CR> Evaluation o ; <CR> if ( e 9 . equals ( <STRING> ) ) <CR> o = new Exam ( T 0 , p 6 , e 9 , C 5 ) ; <CR> else if ( e 9 . equals ( <STRING> ) ) <CR> o = new HomeWork ( T 0 , p 6 , e 9 , C 5 ) ; <CR> else <CR> o = new Report ( T 0 , p 6 , e 9 , C 5 ) ; <CR> System . out . println ( <STRING> ) ; <CR> } <CR> } <CR> } <CR> <EOC>