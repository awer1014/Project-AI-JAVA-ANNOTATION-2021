<BOC> abstract public class Evaluation { <CR> private static int count ; <CR> protected String pid , name , type ; <CR> public static int getcount ( ) { <CR> return count ; <CR> } <CR> protected Keeper keeper ; <CR> public Evaluation ( String t 0 , String E 2 , String C , Keeper a 5 ) { <CR> pid = t 0 ; <CR> name = E 2 ; <CR> type = C ; <CR> count ++ ; <CR> keeper = a 5 ; <CR> } <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> public Exam ( String w 9 , String U 1 , String H 2 , Keeper i 7 ) { <CR> super ( w 9 , U 1 , H 2 , i 7 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class HomeWork extends Evaluation { <CR> public HomeWork ( String Y 6 , String D 0 , String m 6 , Keeper Y ) { <CR> super ( Y 6 , D 0 , m 6 , Y ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Keeper { <CR> public void display ( ) { <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + id ) ; <CR> System . out . println ( <STRING> + tel ) ; <CR> } <CR> public Keeper ( String d 2 , String C 6 , String H 2 ) { <CR> id = C 6 ; <CR> tel = H 2 ; <CR> name = d 2 ; <CR> } <CR> private String id , tel , name ; <CR> } <CR> <EOC> <BOC> public class Report extends Evaluation { <CR> public Report ( String X 8 , String j 7 , String m 3 , Keeper x ) { <CR> super ( X 8 , j 7 , m 3 , x ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] o 6 ) { <CR> Scanner S 7 = new Scanner ( System . in ) ; <CR> boolean D 5 = <STRING> ; <CR> while ( D 5 ) { <CR> System . out . print ( <STRING> ) ; <CR> String E 5 = S 7 . nextLine ( ) ; <CR> if ( E 5 . equals ( <STRING> ) ) { <CR> D 5 = <STRING> ; <CR> break ; <CR> } <CR> System . out . print ( <STRING> ) ; <CR> String A 5 = S 7 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String p 0 = S 7 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String Y 6 = S 7 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String w 9 = S 7 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String C = S 7 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String X 0 = S 7 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> Keeper s = new Keeper ( Y 6 , w 9 , C ) ; <CR> Evaluation c 2 ; <CR> if ( E 5 . equals ( <STRING> ) ) <CR> c 2 = new Exam ( A 5 , p 0 , E 5 , s ) ; <CR> else if ( E 5 . equals ( <STRING> ) ) <CR> c 2 = new HomeWork ( A 5 , p 0 , E 5 , s ) ; <CR> else <CR> c 2 = new Report ( A 5 , p 0 , E 5 , s ) ; <CR> System . out . println ( <STRING> ) ; <CR> } <CR> } <CR> } <CR> <EOC>