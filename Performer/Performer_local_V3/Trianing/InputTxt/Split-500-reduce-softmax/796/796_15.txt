<BOC> abstract public class Evaluation { <CR> public static int getcount ( ) { <CR> return count ; <CR> } <CR> protected Keeper keeper ; <CR> public Evaluation ( String W 8 , String H 7 , String H 1 , Keeper t 1 ) { <CR> pid = W 8 ; <CR> name = H 7 ; <CR> type = H 1 ; <CR> count ++ ; <CR> keeper = t 1 ; <CR> } <CR> protected String pid , name , type ; <CR> private static int count ; <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> public Exam ( String M 8 , String t 2 , String l 0 , Keeper N ) { <CR> super ( M 8 , t 2 , l 0 , N ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class HomeWork extends Evaluation { <CR> public HomeWork ( String M 2 , String E 5 , String x 3 , Keeper k 7 ) { <CR> super ( M 2 , E 5 , x 3 , k 7 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Keeper { <CR> public Keeper ( String y 2 , String B 5 , String F 6 ) { <CR> id = B 5 ; <CR> tel = F 6 ; <CR> name = y 2 ; <CR> } <CR> public void display ( ) { <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + id ) ; <CR> System . out . println ( <STRING> + tel ) ; <CR> } <CR> private String id , tel , name ; <CR> } <CR> <EOC> <BOC> public class Report extends Evaluation { <CR> public Report ( String T 3 , String A 9 , String l 8 , Keeper w 4 ) { <CR> super ( T 3 , A 9 , l 8 , w 4 ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] W 3 ) { <CR> Scanner W 1 = new Scanner ( System . in ) ; <CR> boolean w 2 = <STRING> ; <CR> while ( w 2 ) { <CR> System . out . print ( <STRING> ) ; <CR> String P 2 = W 1 . nextLine ( ) ; <CR> if ( P 2 . equals ( <STRING> ) ) { <CR> w 2 = <STRING> ; <CR> break ; <CR> } <CR> System . out . print ( <STRING> ) ; <CR> String l 3 = W 1 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String B 6 = W 1 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String D 6 = W 1 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String I 8 = W 1 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String T 6 = W 1 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String c 2 = W 1 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> Keeper t = new Keeper ( D 6 , I 8 , T 6 ) ; <CR> Evaluation V ; <CR> if ( P 2 . equals ( <STRING> ) ) <CR> V = new Exam ( l 3 , B 6 , P 2 , t ) ; <CR> else if ( P 2 . equals ( <STRING> ) ) <CR> V = new HomeWork ( l 3 , B 6 , P 2 , t ) ; <CR> else <CR> V = new Report ( l 3 , B 6 , P 2 , t ) ; <CR> System . out . println ( <STRING> ) ; <CR> } <CR> } <CR> } <CR> <EOC>