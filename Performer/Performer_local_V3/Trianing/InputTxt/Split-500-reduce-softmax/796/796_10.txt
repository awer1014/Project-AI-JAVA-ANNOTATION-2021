<BOC> abstract public class Evaluation { <CR> private static int count ; <CR> public Evaluation ( String W 3 , String h 3 , String b 6 , Keeper Z 5 ) { <CR> pid = W 3 ; <CR> name = h 3 ; <CR> type = b 6 ; <CR> count ++ ; <CR> keeper = Z 5 ; <CR> } <CR> protected Keeper keeper ; <CR> public static int getcount ( ) { <CR> return count ; <CR> } <CR> protected String pid , name , type ; <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> public Exam ( String y , String v 1 , String l 1 , Keeper b 9 ) { <CR> super ( y , v 1 , l 1 , b 9 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class HomeWork extends Evaluation { <CR> public HomeWork ( String w 1 , String G 4 , String X 8 , Keeper T 1 ) { <CR> super ( w 1 , G 4 , X 8 , T 1 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Keeper { <CR> private String id , tel , name ; <CR> public Keeper ( String w 4 , String b 8 , String Y 1 ) { <CR> id = b 8 ; <CR> tel = Y 1 ; <CR> name = w 4 ; <CR> } <CR> public void display ( ) { <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + id ) ; <CR> System . out . println ( <STRING> + tel ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Report extends Evaluation { <CR> public Report ( String P 8 , String L 5 , String a 3 , Keeper f 2 ) { <CR> super ( P 8 , L 5 , a 3 , f 2 ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] Q 7 ) { <CR> Scanner e 3 = new Scanner ( System . in ) ; <CR> boolean y 9 = <STRING> ; <CR> while ( y 9 ) { <CR> System . out . print ( <STRING> ) ; <CR> String Z 3 = e 3 . nextLine ( ) ; <CR> if ( Z 3 . equals ( <STRING> ) ) { <CR> y 9 = <STRING> ; <CR> break ; <CR> } <CR> System . out . print ( <STRING> ) ; <CR> String x 8 = e 3 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String p 6 = e 3 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String g 4 = e 3 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String r 9 = e 3 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String F = e 3 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> String d = e 3 . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> Keeper U 0 = new Keeper ( g 4 , r 9 , F ) ; <CR> Evaluation P 8 ; <CR> if ( Z 3 . equals ( <STRING> ) ) <CR> P 8 = new Exam ( x 8 , p 6 , Z 3 , U 0 ) ; <CR> else if ( Z 3 . equals ( <STRING> ) ) <CR> P 8 = new HomeWork ( x 8 , p 6 , Z 3 , U 0 ) ; <CR> else <CR> P 8 = new Report ( x 8 , p 6 , Z 3 , U 0 ) ; <CR> System . out . println ( <STRING> ) ; <CR> } <CR> } <CR> } <CR> <EOC>