<BOC> public class Exam extends Test { <CR> public Exam ( String T 5 , String d 1 , double G 3 , double f 8 ) { <CR> super ( T 5 , d 1 , G 3 , f 8 ) ; <CR> } <CR> public void print ( ) { <CR> System . out . println ( <STRING> ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class HomeWork extends Test { <CR> public void print ( ) { <CR> System . out . println ( <STRING> ) ; <CR> } <CR> public HomeWork ( String m 9 , String L 9 , double p 1 , double C 6 ) { <CR> super ( m 9 , L 9 , p 1 , C 6 ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Main { <CR> public static void main ( String [ ] C 9 ) { <CR> Scanner a 5 = new Scanner ( System . in ) ; <CR> boolean Q = <STRING> ; <CR> while ( Q ) { <CR> System . out . println ( <STRING> ) ; <CR> String p 5 = a 5 . nextLine ( ) ; <CR> if ( p 5 . equals ( <STRING> ) ) { <CR> Q = <STRING> ; <CR> break ; <CR> } <CR> if ( p 5 . equals ( <STRING> ) || p 5 . equals ( <STRING> ) || p 5 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> String q 8 = a 5 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String A 8 = a 5 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> double G 9 = Double . parseDouble ( a 5 . nextLine ( ) ) ; <CR> System . out . println ( <STRING> ) ; <CR> double m 0 = Double . parseDouble ( a 5 . nextLine ( ) ) ; <CR> String u 2 = <STRING> ; <CR> String B 0 = <STRING> ; <CR> String r 5 = <STRING> ; <CR> String u 7 = <STRING> ; <CR> String M = <STRING> ; <CR> String v 9 = <STRING> ; <CR> if ( p 5 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> r 5 = a 5 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> u 7 = a 5 . nextLine ( ) ; <CR> } <CR> if ( p 5 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> u 2 = a 5 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> B 0 = a 5 . nextLine ( ) ; <CR> } <CR> if ( p 5 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> M = a 5 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> v 9 = a 5 . nextLine ( ) ; <CR> } <CR> System . out . println ( <STRING> ) ; <CR> Test M 9 = <STRING> ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( <STRING> ) ; <CR> if ( p 5 . equals ( <STRING> ) ) <CR> M 9 = new Exam ( q 8 , A 8 , G 9 , m 0 ) ; <CR> else if ( p 5 . equals ( <STRING> ) ) <CR> M 9 = new HomeWork ( q 8 , A 8 , G 9 , m 0 ) ; <CR> else if ( p 5 . equals ( <STRING> ) ) <CR> M 9 = new Report ( q 8 , A 8 , G 9 , m 0 ) ; <CR> if ( M 9 ! = <STRING> ) { <CR> M 9 . print ( ) ; <CR> if ( p 5 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> + r 5 ) ; <CR> System . out . println ( <STRING> + u 7 ) ; <CR> } <CR> else if ( p 5 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> + u 2 ) ; <CR> System . out . println ( <STRING> + B 0 ) ; <CR> } <CR> else if ( p 5 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> + M ) ; <CR> System . out . println ( <STRING> + v 9 ) ; <CR> } <CR> System . out . println ( <STRING> ) ; <CR> M 9 . display ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> } <CR> } <CR> } <CR> } <CR> } <CR> <EOC> <BOC> public class Report extends Test { <CR> public Report ( String C , String C 4 , double R 1 , double O 8 ) { <CR> super ( C , C 4 , R 1 , O 8 ) ; <CR> } <CR> public void print ( ) { <CR> System . out . println ( <STRING> ) ; <CR> } <CR> } <CR> <EOC> <BOC> abstract public class Test { <CR> private double propotation ; <CR> public Test ( String n 9 , String Z 4 , double X 7 , double z 6 ) { <CR> number = n 9 ; <CR> name = Z 4 ; <CR> score = X 7 ; <CR> propotation = z 6 ; <CR> } <CR> private String time , range , end_time , description ; <CR> private String name ; <CR> public void display ( ) { <CR> System . out . println ( <STRING> + number ) ; <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + score ) ; <CR> System . out . println ( <STRING> + propotation ) ; <CR> } <CR> String info ; <CR> private double score ; <CR> String info_description ; <CR> private String number ; <CR> abstract public void print ( ) ; <CR> } <CR> <EOC>