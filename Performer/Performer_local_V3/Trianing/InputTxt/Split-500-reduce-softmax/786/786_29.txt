<BOC> public class Exam extends Test { <CR> public void print ( ) { <CR> System . out . println ( <STRING> ) ; <CR> } <CR> public Exam ( String D 6 , String o 9 , double z 3 , double h 9 ) { <CR> super ( D 6 , o 9 , z 3 , h 9 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class HomeWork extends Test { <CR> public void print ( ) { <CR> System . out . println ( <STRING> ) ; <CR> } <CR> public HomeWork ( String N 1 , String T 3 , double R 0 , double R ) { <CR> super ( N 1 , T 3 , R 0 , R ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Main { <CR> public static void main ( String [ ] I 2 ) { <CR> Scanner N = new Scanner ( System . in ) ; <CR> boolean G 6 = <STRING> ; <CR> while ( G 6 ) { <CR> System . out . println ( <STRING> ) ; <CR> String J 1 = N . nextLine ( ) ; <CR> if ( J 1 . equals ( <STRING> ) ) { <CR> G 6 = <STRING> ; <CR> break ; <CR> } <CR> if ( J 1 . equals ( <STRING> ) || J 1 . equals ( <STRING> ) || J 1 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> String I = N . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String w 8 = N . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> double o 3 = Double . parseDouble ( N . nextLine ( ) ) ; <CR> System . out . println ( <STRING> ) ; <CR> double L 2 = Double . parseDouble ( N . nextLine ( ) ) ; <CR> String h 9 = <STRING> ; <CR> String W 8 = <STRING> ; <CR> String P 9 = <STRING> ; <CR> String V 1 = <STRING> ; <CR> String L 6 = <STRING> ; <CR> String J = <STRING> ; <CR> if ( J 1 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> P 9 = N . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> V 1 = N . nextLine ( ) ; <CR> } <CR> if ( J 1 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> h 9 = N . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> W 8 = N . nextLine ( ) ; <CR> } <CR> if ( J 1 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> L 6 = N . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> J = N . nextLine ( ) ; <CR> } <CR> System . out . println ( <STRING> ) ; <CR> Test y 7 = <STRING> ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( <STRING> ) ; <CR> if ( J 1 . equals ( <STRING> ) ) <CR> y 7 = new Exam ( I , w 8 , o 3 , L 2 ) ; <CR> else if ( J 1 . equals ( <STRING> ) ) <CR> y 7 = new HomeWork ( I , w 8 , o 3 , L 2 ) ; <CR> else if ( J 1 . equals ( <STRING> ) ) <CR> y 7 = new Report ( I , w 8 , o 3 , L 2 ) ; <CR> if ( y 7 ! = <STRING> ) { <CR> y 7 . print ( ) ; <CR> if ( J 1 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> + P 9 ) ; <CR> System . out . println ( <STRING> + V 1 ) ; <CR> } <CR> else if ( J 1 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> + h 9 ) ; <CR> System . out . println ( <STRING> + W 8 ) ; <CR> } <CR> else if ( J 1 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> + L 6 ) ; <CR> System . out . println ( <STRING> + J ) ; <CR> } <CR> System . out . println ( <STRING> ) ; <CR> y 7 . display ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> } <CR> } <CR> } <CR> } <CR> } <CR> <EOC> <BOC> public class Report extends Test { <CR> public Report ( String I 8 , String s 4 , double n 1 , double U 2 ) { <CR> super ( I 8 , s 4 , n 1 , U 2 ) ; <CR> } <CR> public void print ( ) { <CR> System . out . println ( <STRING> ) ; <CR> } <CR> } <CR> <EOC> <BOC> abstract public class Test { <CR> private double score ; <CR> public void display ( ) { <CR> System . out . println ( <STRING> + number ) ; <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + score ) ; <CR> System . out . println ( <STRING> + propotation ) ; <CR> } <CR> public Test ( String m 3 , String W 5 , double Q 4 , double t 2 ) { <CR> number = m 3 ; <CR> name = W 5 ; <CR> score = Q 4 ; <CR> propotation = t 2 ; <CR> } <CR> private String number ; <CR> String info_description ; <CR> String info ; <CR> private String name ; <CR> abstract public void print ( ) ; <CR> private String time , range , end_time , description ; <CR> private double propotation ; <CR> } <CR> <EOC>