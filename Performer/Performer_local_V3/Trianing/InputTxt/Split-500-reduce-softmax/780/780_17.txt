<BOC> import java . util . Scanner ; <CR> abstract public class Evaluation { <CR> protected String sName ; <CR> protected String sNumber ; <CR> protected double sProportion ; <CR> void print ( ) { <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( <STRING> + sNumber ) ; <CR> System . out . println ( <STRING> + sName ) ; <CR> System . out . println ( <STRING> + sGrade ) ; <CR> System . out . println ( <STRING> + sProportion ) ; <CR> } <CR> Evaluation ( String U , String O 7 , double N 0 , double P 2 ) { <CR> this . sNumber = U ; <CR> this . sName = O 7 ; <CR> this . sGrade = N 0 ; <CR> this . sProportion = P 2 ; <CR> } <CR> protected double sGrade ; <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> public Exam ( String d 9 , String k 1 , double p 7 , double X 9 , String Y 7 , String g 1 ) { <CR> super ( d 9 , k 1 , p 7 , X 9 ) ; <CR> this . date = Y 7 ; <CR> this . range = g 1 ; <CR> } <CR> protected String range ; <CR> protected String date ; <CR> } <CR> <EOC> <BOC> public class Homework extends Evaluation { <CR> protected String description ; <CR> public Homework ( String V 6 , String m 2 , double C 1 , double r 4 , String I 3 , String X 1 ) { <CR> super ( V 6 , m 2 , C 1 , r 4 ) ; <CR> this . deadline = I 3 ; <CR> this . description = X 1 ; <CR> } <CR> protected String deadline ; <CR> } <CR> <EOC> <BOC> public class Report extends Evaluation { <CR> public Report ( String N 5 , String v , double H 2 , double I 7 , String X 0 , String F 6 ) { <CR> super ( N 5 , v , H 2 , I 7 ) ; <CR> this . content = X 0 ; <CR> this . references = F 6 ; <CR> } <CR> protected String content ; <CR> protected String references ; <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> static Evaluation choice ( int T 9 ) { <CR> switch ( T 9 ) { <CR> case <STRING> : <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( <STRING> ) ; <CR> break ; <CR> case <STRING> : <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( <STRING> ) ; <CR> break ; <CR> case <STRING> : <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( <STRING> ) ; <CR> break ; <CR> } <CR> return ev ; <CR> } <CR> static Scanner keyboard = new Scanner ( System . in ) ; <CR> private static Evaluation choose ( ) { <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( <STRING> ) ; <CR> int T 9 = <STRING> ; <CR> do <CR> { <CR> T 9 = keyboard . nextInt ( ) ; <CR> } <CR> while ( T 9 > <STRING> || T 9 < <STRING> ) ; <CR> return choice ( T 9 ) ; <CR> } <CR> } <CR> <EOC>