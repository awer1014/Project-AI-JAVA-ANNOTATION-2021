 <BOC> public class ChineseLetter extends Evaluation {  <CR> public ChineseLetter ( String G4 , String n , String e , String B2 , String z6 ) {  <CR> super ( G4 , n , e , B2 , z6 ) ;  <CR> }  <CR> public void Display ( ) {  <CR> System . out . println ( getReceiver ( ) + " " + title + ", 您好" ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( getSender ( ) + " 敬上" ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class EnglishLetter extends Evaluation {  <CR> public EnglishLetter ( String p3 , String g8 , String V5 , String S3 , String q2 ) {  <CR> super ( p3 , g8 , V5 , S3 , q2 ) ;  <CR> }  <CR> public void Display ( ) {  <CR> System . out . println ( "Dear " + title + " " + getReceiver ( ) + "," ) ;  <CR> System . out . println ( content ) ;  <CR> System . out . println ( "Sincerely" ) ;  <CR> System . out . println ( getSender ( ) ) ;  <CR> System . out . println ( getDate ( ) ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Envelop {  <CR> public Envelop ( String N1 , String E9 , Evaluation z9 ) {  <CR> this . senderAddr = N1 ;  <CR> this . receiverAddr = E9 ;  <CR> this . letter = z9 ;  <CR> }  <CR> void display ( ) {  <CR> System . out . println ( "From: " + senderAddr ) ;  <CR> System . out . println ( "To: " + receiverAddr ) ;  <CR> letter . Display ( ) ;  <CR> }  <CR> String senderAddr , receiverAddr ;  <CR> Evaluation letter ;  <CR> public static void main ( String [ ] i6 ) {  <CR> Evaluation h8 = new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) ;  <CR> Envelop I6 = new Envelop ( "Taipei" , "Kaohsiung" , h8 ) ;  <CR> I6 . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> abstract public class Evaluation {  <CR> public String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> protected String title , receiver , content , sender , date ;  <CR> public String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> public Evaluation ( String x , String X1 , String W9 , String d5 , String I8 ) {  <CR> this . title = x ;  <CR> this . receiver = X1 ;  <CR> this . content = W9 ;  <CR> this . sender = d5 ;  <CR> this . date = I8 ;  <CR> }  <CR> abstract protected void Display ( ) ;  <CR> public String getDate ( ) {  <CR> return date ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> public class Letter implements Comparable {  <CR> public static Evaluation [ ] list = { new ChineseLetter ( "教授" , "朱" , "很高興跟您連絡" , "豐緒" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> public void display ( int t4 ) {  <CR> list [ t4 ] . Display ( ) ;  <CR> }  <CR> Letter ( int Z7 ) {  <CR> this . x = Z7 ;  <CR> }  <CR> private int x ;  <CR> public static void main ( String [ ] z7 ) {  <CR> int t4 ;  <CR> for ( t4 = list . length - 1 ; t4 >= 0 ; t4 -- ) {  <CR> int U5 = t4 ;  <CR> Letter k5 = new Letter ( t4 ) ;  <CR> Letter N8 = new Letter ( U5 - 1 ) ;  <CR> if ( k5 . compareTo ( N8 ) == 1 )  <CR> k5 . display ( t4 ) ;  <CR> }  <CR> }  <CR> public int compareTo ( Object g8 ) {  <CR> Letter T4 = ( Letter ) g8 ;  <CR> if ( this . x > T4 . x ) return 1 ;  <CR> else return - 1 ;  <CR> }  <CR> }  <CR>  <EOC> 