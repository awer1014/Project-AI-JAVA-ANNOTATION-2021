 <BOC> public class ChineseLetter extends Letter {  <CR> public void display ( ) {  <CR> System . out . print ( receiver + title + " " + "您好" + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( sender + " " + "敬上" + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> ChineseLetter ( String g8 , String w0 , String g2 , String u1 , String a5 ) {  <CR> super ( g8 , w0 , g2 , u1 , a5 ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class EnglishLetter extends Letter {  <CR> EnglishLetter ( String r6 , String E1 , String U1 , String S9 , String j4 ) {  <CR> super ( r6 , E1 , U1 , S9 , j4 ) ;  <CR> }  <CR> public void display ( ) {  <CR> System . out . print ( "Dear" + " " + title + " " + receiver + "\r\n" ) ;  <CR> System . out . print ( content + "\r\n" ) ;  <CR> System . out . print ( "Sincerely" + "\r\n" ) ;  <CR> System . out . print ( sender + "\r\n" ) ;  <CR> System . out . print ( date + "\r\n" ) ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> public class Envelop {  <CR> void display ( ) {  <CR> System . out . print ( "From:" + senderAddr + "," + " " + letter . sender + "\r\n" ) ;  <CR> System . out . print ( "To:" + " " + receiverAddr + " " + letter . receiver + " " + letter . title + " " + "\r\n" ) ;  <CR> System . out . print ( "信件內容:" + "\r\n" ) ;  <CR> letter . display ( ) ;  <CR> }  <CR> Envelop ( String P9 , String H3 , Letter m1 ) {  <CR> this . senderAddr = P9 ;  <CR> this . receiverAddr = H3 ;  <CR> this . letter = m1 ;  <CR> }  <CR> String receiverAddr ;  <CR> String senderAddr ;  <CR> Letter letter ;  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> abstract public class Letter implements Comparable {  <CR> int valueOf ( String b5 ) {  <CR> int Z0 = 0 ;  <CR> for ( int a8 = 0 ; a8 < b5 . length ( ) ; a8 ++ ) {  <CR> char K = b5 . charAt ( a8 ) ;  <CR> Z0 = Z0 * 10 + K - '0' ;  <CR> }  <CR> return Z0 ;  <CR> }  <CR> abstract protected void display ( ) ;  <CR> public int compareTo ( Object b2 ) {  <CR> Letter j0 = ( Letter ) b2 ;  <CR> same = false ;  <CR> if ( valueOf ( this . date . substring ( 0 , 10 ) ) > valueOf ( o . date . substring ( 0 , 10 ) ) ) return 1 ;  <CR> else if ( valueOf ( this . date . substring ( 0 , 10 ) ) == valueOf ( o . date . substring ( 0 , 10 ) ) ) {  <CR> return 0 ;  <CR> }  <CR> else return - 1 ;  <CR> }  <CR> Letter ( String E8 , String r1 , String H8 , String R8 , String a1 ) {  <CR> this . title = E8 ;  <CR> this . receiver = r1 ;  <CR> this . content = H8 ;  <CR> this . sender = R8 ;  <CR> this . date = a1 ;  <CR> }  <CR> String getDate ( ) {  <CR> return date ;  <CR> }  <CR> boolean same ;  <CR> String getSender ( ) {  <CR> return sender ;  <CR> }  <CR> String title , receiver , content , sender , date ;  <CR> String getReceiver ( ) {  <CR> return receiver ;  <CR> }  <CR> }  <CR>  <EOC>  <BOC> import java . util . * ;  <CR> import java . util . Arrays ;  <CR> public class test {  <CR> public static void main ( String [ ] M7 ) {  <CR> Letter [ ] v4 = { new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2018/11/01" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "2018/07/05" ) } ;  <CR> Arrays . sort ( v4 ) ;  <CR> for ( int n9 = 0 ; n9 < 3 ; n9 ++ )  <CR> v4 [ n9 ] . display ( ) ;  <CR> }  <CR> }  <CR>  <EOC> 