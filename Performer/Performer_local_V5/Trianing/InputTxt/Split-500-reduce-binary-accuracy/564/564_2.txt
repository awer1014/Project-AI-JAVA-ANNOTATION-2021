<BOC> public class ChineseLetter extends Evaluation { <CR> public void Display ( ) { <CR> System . out . println ( getReceiver ( ) + <STRING> + title + <STRING> ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( getSender ( ) + <STRING> ) ; <CR> System . out . println ( getDate ( ) ) ; <CR> } <CR> public ChineseLetter ( String v 7 , String m 7 , String x 3 , String a 3 , String R 3 ) { <CR> super ( v 7 , m 7 , x 3 , a 3 , R 3 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class EnglishLetter extends Evaluation { <CR> public void Display ( ) { <CR> System . out . println ( <STRING> + title + <STRING> + getReceiver ( ) + <STRING> ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( getSender ( ) ) ; <CR> System . out . println ( getDate ( ) ) ; <CR> } <CR> public EnglishLetter ( String I 7 , String T 1 , String j 3 , String O 2 , String c 5 ) { <CR> super ( I 7 , T 1 , j 3 , O 2 , c 5 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Envelop { <CR> void display ( ) { <CR> System . out . println ( <STRING> + senderAddr ) ; <CR> System . out . println ( <STRING> + receiverAddr ) ; <CR> letter . Display ( ) ; <CR> } <CR> String senderAddr , receiverAddr ; <CR> Evaluation letter ; <CR> public Envelop ( String L 1 , String u 1 , Evaluation C 1 ) { <CR> this . senderAddr = L 1 ; <CR> this . receiverAddr = u 1 ; <CR> this . letter = C 1 ; <CR> } <CR> public static void main ( String [ ] b 9 ) { <CR> Evaluation w 8 = new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Envelop Q 9 = new Envelop ( <STRING> , <STRING> , w 8 ) ; <CR> Q 9 . display ( ) ; <CR> } <CR> } <CR> <EOC> <BOC> abstract public class Evaluation { <CR> abstract protected void Display ( ) ; <CR> public Evaluation ( String X 4 , String O 1 , String z 0 , String r 0 , String P 5 ) { <CR> this . title = X 4 ; <CR> this . receiver = O 1 ; <CR> this . content = z 0 ; <CR> this . sender = r 0 ; <CR> this . date = P 5 ; <CR> } <CR> public String getSender ( ) { <CR> return sender ; <CR> } <CR> protected String title , receiver , content , sender , date ; <CR> public String getDate ( ) { <CR> return date ; <CR> } <CR> public String getReceiver ( ) { <CR> return receiver ; <CR> } <CR> } <CR> <EOC> <BOC> public class Letter implements Comparable { <CR> public static Evaluation [ ] list = { new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) , new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) , new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) } ; <CR> public void display ( int N 1 ) { <CR> list [ N 1 ] . Display ( ) ; <CR> } <CR> public int compareTo ( Object R ) { <CR> Letter w 2 = ( Letter ) R ; <CR> if ( this . x > w 2 . x ) <CR> return <NUM_INT> ; <CR> else <CR> return - <NUM_INT> ; <CR> } <CR> private int x ; <CR> Letter ( int x 2 ) { <CR> this . x = x 2 ; <CR> } <CR> public static void main ( String [ ] Z 6 ) { <CR> int N 1 ; <CR> for ( N 1 = list . length - <NUM_INT> ; N 1 > = <NUM_INT> ; N 1 -- ) { <CR> int l 9 = N 1 ; <CR> Letter j 3 = new Letter ( N 1 ) ; <CR> Letter E 0 = new Letter ( l 9 - <NUM_INT> ) ; <CR> if ( j 3 . compareTo ( E 0 ) == <NUM_INT> ) <CR> j 3 . display ( N 1 ) ; <CR> } <CR> } <CR> } <CR> <EOC>