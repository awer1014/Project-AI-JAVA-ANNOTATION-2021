<BOC> public class ChineseLetter extends Evaluation { <CR> public ChineseLetter ( String G 4 , String n , String e , String B 2 , String z 6 ) { <CR> super ( G 4 , n , e , B 2 , z 6 ) ; <CR> } <CR> public void Display ( ) { <CR> System . out . println ( getReceiver ( ) + <STRING> + title + <STRING> ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( getSender ( ) + <STRING> ) ; <CR> System . out . println ( getDate ( ) ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class EnglishLetter extends Evaluation { <CR> public EnglishLetter ( String p 3 , String g 8 , String V 5 , String S 3 , String q 2 ) { <CR> super ( p 3 , g 8 , V 5 , S 3 , q 2 ) ; <CR> } <CR> public void Display ( ) { <CR> System . out . println ( <STRING> + title + <STRING> + getReceiver ( ) + <STRING> ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( getSender ( ) ) ; <CR> System . out . println ( getDate ( ) ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Envelop { <CR> public Envelop ( String N 1 , String E 9 , Evaluation z 9 ) { <CR> this . senderAddr = N 1 ; <CR> this . receiverAddr = E 9 ; <CR> this . letter = z 9 ; <CR> } <CR> void display ( ) { <CR> System . out . println ( <STRING> + senderAddr ) ; <CR> System . out . println ( <STRING> + receiverAddr ) ; <CR> letter . Display ( ) ; <CR> } <CR> String senderAddr , receiverAddr ; <CR> Evaluation letter ; <CR> public static void main ( String [ ] i 6 ) { <CR> Evaluation h 8 = new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Envelop I 6 = new Envelop ( <STRING> , <STRING> , h 8 ) ; <CR> I 6 . display ( ) ; <CR> } <CR> } <CR> <EOC> <BOC> abstract public class Evaluation { <CR> public String getSender ( ) { <CR> return sender ; <CR> } <CR> protected String title , receiver , content , sender , date ; <CR> public String getReceiver ( ) { <CR> return receiver ; <CR> } <CR> public Evaluation ( String x , String X 1 , String W 9 , String d 5 , String I 8 ) { <CR> this . title = x ; <CR> this . receiver = X 1 ; <CR> this . content = W 9 ; <CR> this . sender = d 5 ; <CR> this . date = I 8 ; <CR> } <CR> abstract protected void Display ( ) ; <CR> public String getDate ( ) { <CR> return date ; <CR> } <CR> } <CR> <EOC> <BOC> public class Letter implements Comparable { <CR> public static Evaluation [ ] list = { new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) , new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) , new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) } ; <CR> public void display ( int t 4 ) { <CR> list [ t 4 ] . Display ( ) ; <CR> } <CR> Letter ( int Z 7 ) { <CR> this . x = Z 7 ; <CR> } <CR> private int x ; <CR> public static void main ( String [ ] z 7 ) { <CR> int t 4 ; <CR> for ( t 4 = list . length - <NUM_INT> ; t 4 > = <NUM_INT> ; t 4 -- ) { <CR> int U 5 = t 4 ; <CR> Letter k 5 = new Letter ( t 4 ) ; <CR> Letter N 8 = new Letter ( U 5 - <NUM_INT> ) ; <CR> if ( k 5 . compareTo ( N 8 ) == <NUM_INT> ) <CR> k 5 . display ( t 4 ) ; <CR> } <CR> } <CR> public int compareTo ( Object g 8 ) { <CR> Letter T 4 = ( Letter ) g 8 ; <CR> if ( this . x > T 4 . x ) <CR> return <NUM_INT> ; <CR> else <CR> return - <NUM_INT> ; <CR> } <CR> } <CR> <EOC>