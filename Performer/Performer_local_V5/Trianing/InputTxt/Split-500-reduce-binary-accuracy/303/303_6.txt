<BOC> import java . util . * ; <CR> class Vote { <CR> static double sum = <NUM_INT> ; <CR> String name ; <CR> String setname ( ) { <CR> return name ; <CR> } <CR> static int Data ; <CR> Vote ( ) { <CR> this . name = name ; <CR> this . n = n ; <CR> } <CR> double n ; <CR> public static void main ( String [ ] N 4 ) { <CR> System . out . println ( <STRING> ) ; <CR> Scanner T 9 = new Scanner ( System . in ) ; <CR> Data = T 9 . nextInt ( ) ; <CR> Vote [ ] d 3 = new Vote [ <NUM_INT> ] ; <CR> for ( int X = <NUM_INT> ; X < <NUM_INT> ; X ++ ) { <CR> d 3 [ X ] = new Vote ( ) ; <CR> } <CR> Scanner Z = new Scanner ( System . in ) ; <CR> for ( int X 7 = <NUM_INT> ; X 7 < Data ; X 7 ++ ) { <CR> System . out . println ( <STRING> + X 7 + <NUM_INT> + <STRING> ) ; <CR> d 3 [ X 7 ] . name = Z . next ( ) ; <CR> d 3 [ X 7 ] . n = Z . nextInt ( ) ; <CR> } <CR> for ( int j 5 = <NUM_INT> ; j 5 < Data ; j 5 ++ ) { <CR> sum = sum + d 3 [ j 5 ] . setn ( ) ; <CR> } <CR> System . out . println ( <STRING> ) ; <CR> for ( int m 0 = <NUM_INT> ; m 0 < Data ; m 0 ++ ) { <CR> System . out . println ( d 3 [ m 0 ] . setname ( ) + <STRING> + d 3 [ m 0 ] . setn ( ) + <STRING> + d 3 [ m 0 ] . setn ( ) / sum * <NUM_INT> + <STRING> ) ; <CR> } <CR> if ( d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) ) { <CR> System . out . println ( d 3 [ <NUM_INT> ] . setname ( ) + <STRING> + d 3 [ <NUM_INT> ] . setn ( ) + <STRING> + d 3 [ <NUM_INT> ] . setn ( ) / sum * <NUM_INT> + <STRING> ) ; <CR> } <CR> if ( d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) ) { <CR> System . out . println ( d 3 [ <NUM_INT> ] . setname ( ) + <STRING> + d 3 [ <NUM_INT> ] . setn ( ) + <STRING> + d 3 [ <NUM_INT> ] . setn ( ) / sum * <NUM_INT> + <STRING> ) ; <CR> } <CR> if ( d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) ) { <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( d 3 [ <NUM_INT> ] . setname ( ) + <STRING> + d 3 [ <NUM_INT> ] . setn ( ) + <STRING> + d 3 [ <NUM_INT> ] . setn ( ) / sum * <NUM_INT> + <STRING> ) ; <CR> } <CR> if ( d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) ) { <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( d 3 [ <NUM_INT> ] . setname ( ) + <STRING> + d 3 [ <NUM_INT> ] . setn ( ) + <STRING> + d 3 [ <NUM_INT> ] . setn ( ) / sum * <NUM_INT> + <STRING> ) ; <CR> } <CR> if ( d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) ) { <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( d 3 [ <NUM_INT> ] . setname ( ) + <STRING> + d 3 [ <NUM_INT> ] . setn ( ) + <STRING> + d 3 [ <NUM_INT> ] . setn ( ) / sum * <NUM_INT> + <STRING> ) ; <CR> } <CR> if ( d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) ) { <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( d 3 [ <NUM_INT> ] . setname ( ) + <STRING> + d 3 [ <NUM_INT> ] . setn ( ) + <STRING> + d 3 [ <NUM_INT> ] . setn ( ) / sum * <NUM_INT> + <STRING> ) ; <CR> } <CR> if ( d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) ) { <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( d 3 [ <NUM_INT> ] . setname ( ) + <STRING> + d 3 [ <NUM_INT> ] . setn ( ) + <STRING> + d 3 [ <NUM_INT> ] . setn ( ) / sum * <NUM_INT> + <STRING> ) ; <CR> } <CR> if ( d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) ) { <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( d 3 [ <NUM_INT> ] . setname ( ) + <STRING> + d 3 [ <NUM_INT> ] . setn ( ) + <STRING> + d 3 [ <NUM_INT> ] . setn ( ) / sum * <NUM_INT> + <STRING> ) ; <CR> } <CR> if ( d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) ) { <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( d 3 [ <NUM_INT> ] . setname ( ) + <STRING> + d 3 [ <NUM_INT> ] . setn ( ) + <STRING> + d 3 [ <NUM_INT> ] . setn ( ) / sum * <NUM_INT> + <STRING> ) ; <CR> } <CR> if ( d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) & & d 3 [ <NUM_INT> ] . setn ( ) > d 3 [ <NUM_INT> ] . setn ( ) ) { <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( d 3 [ <NUM_INT> ] . setname ( ) + <STRING> + d 3 [ <NUM_INT> ] . setn ( ) + <STRING> + d 3 [ <NUM_INT> ] . setn ( ) / sum * <NUM_INT> + <STRING> ) ; <CR> } <CR> } <CR> double setn ( ) { <CR> return n ; <CR> } <CR> } <CR> <EOC>