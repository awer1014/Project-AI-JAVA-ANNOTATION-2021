<BOC> abstract public class Evaluation { <CR> double getRate ( ) { <CR> return rate ; <CR> } <CR> double getScore ( ) { <CR> return score ; <CR> } <CR> protected String stuno ; <CR> protected String name ; <CR> protected double score , rate ; <CR> public Evaluation ( String p , String n 8 , double F 6 , double w 0 , String H 0 , String Y ) { <CR> this . stuno = p ; <CR> this . name = n 8 ; <CR> this . score = F 6 ; <CR> this . rate = w 0 ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Exam extends Evaluation { <CR> void print ( ) { <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( <STRING> + stuno ) ; <CR> } <CR> public Exam ( String K , String p 6 , double x 3 , double T 8 , String m 0 , String V 8 ) { <CR> super ( K , p 6 , x 3 , T 8 , m 0 , V 8 ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Homework extends Evaluation { <CR> public Homework ( String t 4 , String R 4 , double D 0 , double c 3 , String E 3 , String W 3 ) { <CR> super ( t 4 , R 4 , D 0 , c 3 , E 3 , W 3 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Report extends Evaluation { <CR> public Report ( String J 9 , String n 9 , double K 0 , double d 6 , String l 7 , String f 7 ) { <CR> super ( J 9 , n 9 , K 0 , d 6 , l 7 , f 7 ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Test { <CR> public static void main ( String [ ] C ) { <CR> int V 3 = <NUM_INT> ; <CR> String e 2 , I 8 ; <CR> double n , X 9 ; <CR> System . out . print ( <STRING> ) ; <CR> V 3 = scanner . nextInt ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> I 8 = scanner . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> e 2 = scanner . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> n = scanner . nextDouble ( ) ; <CR> scanner . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> X 9 = scanner . nextDouble ( ) ; <CR> scanner . nextLine ( ) ; <CR> if ( V 3 == <NUM_INT> ) { <CR> String C 1 , I 3 ; <CR> System . out . print ( <STRING> ) ; <CR> C 1 = scanner . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> I 3 = scanner . nextLine ( ) ; <CR> Evaluation r 7 = new Exam ( I 8 , e 2 , n , X 9 , C 1 , I 3 ) ; <CR> } <CR> if ( V 3 == <NUM_INT> ) { <CR> String R 3 , n 4 ; <CR> System . out . print ( <STRING> ) ; <CR> R 3 = scanner . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> n 4 = scanner . nextLine ( ) ; <CR> Evaluation r 7 = new Homework ( I 8 , e 2 , n , X 9 , R 3 , n 4 ) ; <CR> } <CR> if ( V 3 == <NUM_INT> ) { <CR> String s 8 , H 7 ; <CR> System . out . print ( <STRING> ) ; <CR> s 8 = scanner . nextLine ( ) ; <CR> System . out . print ( <STRING> ) ; <CR> H 7 = scanner . nextLine ( ) ; <CR> Evaluation r 7 = new Report ( I 8 , e 2 , n , X 9 , s 8 , H 7 ) ; <CR> } <CR> } <CR> static Scanner scanner = new Scanner ( System . in ) ; <CR> } <CR> <EOC>