<BOC> public class ChineseLetter extends Letter { <CR> ChineseLetter ( String s 7 , String y , String l 7 , String k 0 , String w 8 ) { <CR> super ( s 7 , y , l 7 , k 0 , w 8 ) ; <CR> } <CR> void display ( ) { <CR> System . out . println ( receiver + <STRING> + title + <STRING> ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( sender + <STRING> ) ; <CR> System . out . println ( date ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class EnglishLetter extends Letter { <CR> void display ( ) { <CR> System . out . println ( <STRING> + receiver + <STRING> + title ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( sender ) ; <CR> System . out . println ( date ) ; <CR> } <CR> EnglishLetter ( String q 7 , String U 7 , String z 7 , String J , String e 3 ) { <CR> super ( q 7 , U 7 , z 7 , J , e 3 ) ; <CR> } <CR> } <CR> <EOC> <BOC> abstract public class Letter implements Comparable { <CR> public int compareTo ( Object k 6 ) { <CR> Letter I 3 = ( Letter ) k 6 ; <CR> if ( this . getDate ( ) . compareTo ( I 3 . getDate ( ) ) < <NUM_INT> ) { <CR> return <NUM_INT> ; <CR> } <CR> else if ( this . getDate ( ) . compareTo ( I 3 . getDate ( ) ) > <NUM_INT> ) { <CR> return - <NUM_INT> ; <CR> } <CR> else { <CR> return <NUM_INT> ; <CR> } <CR> } <CR> abstract void display ( ) ; <CR> String title , receiver , content , sender , date ; <CR> String getSender ( ) { <CR> return sender ; <CR> } <CR> String getReceiver ( ) { <CR> return receiver ; <CR> } <CR> String getDate ( ) { <CR> return date ; <CR> } <CR> Letter ( String i 4 , String f , String h 7 , String l 2 , String d 9 ) { <CR> this . title = i 4 ; <CR> this . receiver = f ; <CR> this . content = h 7 ; <CR> this . sender = l 2 ; <CR> this . date = d 9 ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Test { <CR> public static void main ( String [ ] Y 6 ) { <CR> Letter o 6 = new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter g 0 = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter C 1 = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> ArrayList s 8 = { o 6 , g 0 , C 1 } ; <CR> for ( Letter K 9 : s 8 ) <CR> K 9 . display ( ) ; <CR> } <CR> } <CR> <EOC>