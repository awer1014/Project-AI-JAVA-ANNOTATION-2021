<BOC> public class ChineseLetter extends Letter { <CR> void display ( ) { <CR> System . out . println ( receiver + <STRING> + title + <STRING> ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( sender + <STRING> ) ; <CR> System . out . println ( date ) ; <CR> } <CR> ChineseLetter ( String m , String Z 5 , String i 0 , String h 7 , String X 7 ) { <CR> super ( m , Z 5 , i 0 , h 7 , X 7 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class EnglishLetter extends Letter { <CR> EnglishLetter ( String G 3 , String w , String R 4 , String X 2 , String b 8 ) { <CR> super ( G 3 , w , R 4 , X 2 , b 8 ) ; <CR> } <CR> void display ( ) { <CR> System . out . println ( <STRING> + receiver + <STRING> + title ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( sender ) ; <CR> System . out . println ( date ) ; <CR> } <CR> } <CR> <EOC> <BOC> abstract public class Letter implements Comparable { <CR> String title , receiver , content , sender , date ; <CR> abstract void display ( ) ; <CR> String getSender ( ) { <CR> return sender ; <CR> } <CR> String getReceiver ( ) { <CR> return receiver ; <CR> } <CR> String getDate ( ) { <CR> return date ; <CR> } <CR> Letter ( String I 8 , String q 1 , String O 7 , String h , String K 9 ) { <CR> this . title = I 8 ; <CR> this . receiver = q 1 ; <CR> this . content = O 7 ; <CR> this . sender = h ; <CR> this . date = K 9 ; <CR> } <CR> public int compareTo ( Object N 5 ) { <CR> Letter i = ( Letter ) N 5 ; <CR> if ( this . getDate ( ) . compareTo ( i . getDate ( ) ) < <NUM_INT> ) { <CR> return <NUM_INT> ; <CR> } <CR> else if ( this . getDate ( ) . compareTo ( i . getDate ( ) ) > <NUM_INT> ) { <CR> return - <NUM_INT> ; <CR> } <CR> else { <CR> return <NUM_INT> ; <CR> } <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Test { <CR> public static void main ( String [ ] M 0 ) { <CR> Letter X 1 = new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter v 7 = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter x 8 = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> ArrayList Z 7 = { X 1 , v 7 , x 8 } ; <CR> for ( Letter C 6 : Z 7 ) <CR> C 6 . display ( ) ; <CR> } <CR> } <CR> <EOC>