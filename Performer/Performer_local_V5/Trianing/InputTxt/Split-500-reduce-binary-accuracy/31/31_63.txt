<BOC> public class ChineseLetter extends Letter { <CR> void display ( ) { <CR> System . out . println ( receiver + <STRING> + title + <STRING> ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( sender + <STRING> ) ; <CR> System . out . println ( date ) ; <CR> } <CR> ChineseLetter ( String H 0 , String G 7 , String L 5 , String v 0 , String c 1 ) { <CR> super ( H 0 , G 7 , L 5 , v 0 , c 1 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class EnglishLetter extends Letter { <CR> EnglishLetter ( String b , String z 5 , String C 7 , String G 9 , String Y 4 ) { <CR> super ( b , z 5 , C 7 , G 9 , Y 4 ) ; <CR> } <CR> void display ( ) { <CR> System . out . println ( <STRING> + receiver + <STRING> + title ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( sender ) ; <CR> System . out . println ( date ) ; <CR> } <CR> } <CR> <EOC> <BOC> abstract public class Letter implements Comparable { <CR> abstract void display ( ) ; <CR> String getSender ( ) { <CR> return sender ; <CR> } <CR> String title , receiver , content , sender , date ; <CR> public int compareTo ( Object y 1 ) { <CR> Letter t 9 = ( Letter ) y 1 ; <CR> if ( this . getDate ( ) . compareTo ( t 9 . getDate ( ) ) < <NUM_INT> ) { <CR> return <NUM_INT> ; <CR> } <CR> else if ( this . getDate ( ) . compareTo ( t 9 . getDate ( ) ) > <NUM_INT> ) { <CR> return - <NUM_INT> ; <CR> } <CR> else { <CR> return <NUM_INT> ; <CR> } <CR> } <CR> String getReceiver ( ) { <CR> return receiver ; <CR> } <CR> Letter ( String P , String n 4 , String T 7 , String R 4 , String C ) { <CR> this . title = P ; <CR> this . receiver = n 4 ; <CR> this . content = T 7 ; <CR> this . sender = R 4 ; <CR> this . date = C ; <CR> } <CR> String getDate ( ) { <CR> return date ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Test { <CR> public static void main ( String [ ] G 6 ) { <CR> Letter c 8 = new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter h 0 = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter O 8 = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> ArrayList D 8 = { c 8 , h 0 , O 8 } ; <CR> for ( Letter l : D 8 ) <CR> l . display ( ) ; <CR> } <CR> } <CR> <EOC>