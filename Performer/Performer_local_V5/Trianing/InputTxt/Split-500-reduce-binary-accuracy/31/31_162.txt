<BOC> public class ChineseLetter extends Letter { <CR> ChineseLetter ( String n 2 , String Z 0 , String O 4 , String e 1 , String j 7 ) { <CR> super ( n 2 , Z 0 , O 4 , e 1 , j 7 ) ; <CR> } <CR> void display ( ) { <CR> System . out . println ( receiver + <STRING> + title + <STRING> ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( sender + <STRING> ) ; <CR> System . out . println ( date ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class EnglishLetter extends Letter { <CR> void display ( ) { <CR> System . out . println ( <STRING> + receiver + <STRING> + title ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( sender ) ; <CR> System . out . println ( date ) ; <CR> } <CR> EnglishLetter ( String G 7 , String M 5 , String E , String G , String q ) { <CR> super ( G 7 , M 5 , E , G , q ) ; <CR> } <CR> } <CR> <EOC> <BOC> abstract public class Letter implements Comparable { <CR> Letter ( String R 5 , String l 0 , String p 3 , String Y 4 , String N 6 ) { <CR> this . title = R 5 ; <CR> this . receiver = l 0 ; <CR> this . content = p 3 ; <CR> this . sender = Y 4 ; <CR> this . date = N 6 ; <CR> } <CR> String getDate ( ) { <CR> return date ; <CR> } <CR> public int compareTo ( Object D 4 ) { <CR> Letter t 3 = ( Letter ) D 4 ; <CR> if ( this . getDate ( ) . compareTo ( t 3 . getDate ( ) ) < <NUM_INT> ) { <CR> return <NUM_INT> ; <CR> } <CR> else if ( this . getDate ( ) . compareTo ( t 3 . getDate ( ) ) > <NUM_INT> ) { <CR> return - <NUM_INT> ; <CR> } <CR> else { <CR> return <NUM_INT> ; <CR> } <CR> } <CR> String title , receiver , content , sender , date ; <CR> String getSender ( ) { <CR> return sender ; <CR> } <CR> abstract void display ( ) ; <CR> String getReceiver ( ) { <CR> return receiver ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Test { <CR> public static void main ( String [ ] c 9 ) { <CR> Letter J 2 = new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter v 8 = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter N = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> ArrayList k 8 = { J 2 , v 8 , N } ; <CR> for ( Letter q 2 : k 8 ) <CR> q 2 . display ( ) ; <CR> } <CR> } <CR> <EOC>