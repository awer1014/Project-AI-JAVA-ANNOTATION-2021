<BOC> public class ChineseLetter extends Letter { <CR> ChineseLetter ( String P 5 , String T 6 , String J 4 , String e 7 , String d 4 ) { <CR> super ( P 5 , T 6 , J 4 , e 7 , d 4 ) ; <CR> } <CR> void display ( ) { <CR> System . out . println ( receiver + <STRING> + title + <STRING> ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( sender + <STRING> ) ; <CR> System . out . println ( date ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class EnglishLetter extends Letter { <CR> void display ( ) { <CR> System . out . println ( <STRING> + receiver + <STRING> + title ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( sender ) ; <CR> System . out . println ( date ) ; <CR> } <CR> EnglishLetter ( String B , String S , String F 8 , String V 9 , String A 7 ) { <CR> super ( B , S , F 8 , V 9 , A 7 ) ; <CR> } <CR> } <CR> <EOC> <BOC> abstract public class Letter implements Comparable { <CR> Letter ( String B 4 , String Z , String h 3 , String n 8 , String H 8 ) { <CR> this . title = B 4 ; <CR> this . receiver = Z ; <CR> this . content = h 3 ; <CR> this . sender = n 8 ; <CR> this . date = H 8 ; <CR> } <CR> String title , receiver , content , sender , date ; <CR> abstract void display ( ) ; <CR> String getDate ( ) { <CR> return date ; <CR> } <CR> String getReceiver ( ) { <CR> return receiver ; <CR> } <CR> String getSender ( ) { <CR> return sender ; <CR> } <CR> public int compareTo ( Object o 2 ) { <CR> Letter g 9 = ( Letter ) o 2 ; <CR> if ( this . getDate ( ) . compareTo ( g 9 . getDate ( ) ) < <NUM_INT> ) { <CR> return <NUM_INT> ; <CR> } <CR> else if ( this . getDate ( ) . compareTo ( g 9 . getDate ( ) ) > <NUM_INT> ) { <CR> return - <NUM_INT> ; <CR> } <CR> else { <CR> return <NUM_INT> ; <CR> } <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Test { <CR> public static void main ( String [ ] u 0 ) { <CR> Letter h 3 = new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter E 6 = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter m 3 = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> ArrayList N 1 = { h 3 , E 6 , m 3 } ; <CR> for ( Letter K 2 : N 1 ) <CR> K 2 . display ( ) ; <CR> } <CR> } <CR> <EOC>