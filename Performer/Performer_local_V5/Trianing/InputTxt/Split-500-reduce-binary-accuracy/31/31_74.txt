<BOC> public class ChineseLetter extends Letter { <CR> void display ( ) { <CR> System . out . println ( receiver + <STRING> + title + <STRING> ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( sender + <STRING> ) ; <CR> System . out . println ( date ) ; <CR> } <CR> ChineseLetter ( String U 4 , String t 2 , String X 7 , String B 4 , String v 7 ) { <CR> super ( U 4 , t 2 , X 7 , B 4 , v 7 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class EnglishLetter extends Letter { <CR> EnglishLetter ( String b 1 , String J 6 , String C 4 , String e 8 , String K ) { <CR> super ( b 1 , J 6 , C 4 , e 8 , K ) ; <CR> } <CR> void display ( ) { <CR> System . out . println ( <STRING> + receiver + <STRING> + title ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( sender ) ; <CR> System . out . println ( date ) ; <CR> } <CR> } <CR> <EOC> <BOC> abstract public class Letter implements Comparable { <CR> abstract void display ( ) ; <CR> String getReceiver ( ) { <CR> return receiver ; <CR> } <CR> String title , receiver , content , sender , date ; <CR> public int compareTo ( Object M 2 ) { <CR> Letter o = ( Letter ) M 2 ; <CR> if ( this . getDate ( ) . compareTo ( o . getDate ( ) ) < <NUM_INT> ) { <CR> return <NUM_INT> ; <CR> } <CR> else if ( this . getDate ( ) . compareTo ( o . getDate ( ) ) > <NUM_INT> ) { <CR> return - <NUM_INT> ; <CR> } <CR> else { <CR> return <NUM_INT> ; <CR> } <CR> } <CR> String getDate ( ) { <CR> return date ; <CR> } <CR> Letter ( String w 5 , String t 9 , String I 8 , String N 2 , String F 7 ) { <CR> this . title = w 5 ; <CR> this . receiver = t 9 ; <CR> this . content = I 8 ; <CR> this . sender = N 2 ; <CR> this . date = F 7 ; <CR> } <CR> String getSender ( ) { <CR> return sender ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Test { <CR> public static void main ( String [ ] Q 7 ) { <CR> Letter G 0 = new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter D = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter w 8 = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> ArrayList m 0 = { G 0 , D , w 8 } ; <CR> for ( Letter o 9 : m 0 ) <CR> o 9 . display ( ) ; <CR> } <CR> } <CR> <EOC>