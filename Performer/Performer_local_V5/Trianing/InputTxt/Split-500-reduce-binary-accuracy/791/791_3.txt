<BOC> abstract public class Evaluation { <CR> protected double grade , gradepc ; <CR> public Evaluation ( String Z 8 , String S 4 , String G 3 , double J 8 , double D 8 ) { <CR> sid = Z 8 ; <CR> name = S 4 ; <CR> type = G 3 ; <CR> this . grade = J 8 ; <CR> this . gradepc = D 8 ; <CR> } <CR> private String sid , name , type ; <CR> abstract public void printa ( ) ; <CR> public void print ( ) { <CR> System . out . println ( <STRING> + type ) ; <CR> System . out . println ( <STRING> + sid ) ; <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + grade ) ; <CR> System . out . println ( <STRING> + gradepc ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> String date ; <CR> public void printa ( ) { <CR> System . out . println ( <STRING> + date ) ; <CR> System . out . println ( <STRING> + range ) ; <CR> } <CR> public Exam ( String u 9 , String i 0 , String D 6 , double N 2 , double M 8 ) { <CR> super ( u 9 , i 0 , D 6 , N 2 , M 8 ) ; <CR> } <CR> String range ; <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] c 4 ) { <CR> Scanner y 5 = new Scanner ( System . in ) ; <CR> System . out . println ( <STRING> ) ; <CR> int D 1 = <NUM_INT> ; <CR> do { <CR> D 1 = y 5 . nextInt ( ) ; <CR> } <CR> while ( D 1 > <NUM_INT> || D 1 < <NUM_INT> ) ; <CR> return mapEvaluation ( D 1 ) ; <CR> } <CR> static Evaluation mapEvaluation ( int D 1 ) { <CR> Evaluation N 7 = <STRING> ; <CR> switch ( D 1 ) { <CR> case <NUM_INT> : <CR> N 7 = new Exam ( <STRING> ) ; <CR> break ; <CR> } <CR> } <CR> } <CR> <EOC>