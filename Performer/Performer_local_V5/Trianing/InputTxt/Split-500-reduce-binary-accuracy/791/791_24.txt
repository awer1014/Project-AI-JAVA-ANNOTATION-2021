<BOC> abstract public class Evaluation { <CR> abstract public void printa ( ) ; <CR> public void print ( ) { <CR> System . out . println ( <STRING> + type ) ; <CR> System . out . println ( <STRING> + sid ) ; <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + grade ) ; <CR> System . out . println ( <STRING> + gradepc ) ; <CR> } <CR> protected double grade , gradepc ; <CR> private String sid , name , type ; <CR> public Evaluation ( String X 6 , String g 8 , String i 7 , double l 8 , double W 0 ) { <CR> sid = X 6 ; <CR> name = g 8 ; <CR> type = i 7 ; <CR> this . grade = l 8 ; <CR> this . gradepc = W 0 ; <CR> } <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> public void printa ( ) { <CR> System . out . println ( <STRING> + date ) ; <CR> System . out . println ( <STRING> + range ) ; <CR> } <CR> String range ; <CR> public Exam ( String q 1 , String h , String i 4 , double K 7 , double U 6 ) { <CR> super ( q 1 , h , i 4 , K 7 , U 6 ) ; <CR> } <CR> String date ; <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] L 8 ) { <CR> Scanner s 2 = new Scanner ( System . in ) ; <CR> System . out . println ( <STRING> ) ; <CR> int u 7 = <NUM_INT> ; <CR> do { <CR> u 7 = s 2 . nextInt ( ) ; <CR> } <CR> while ( u 7 > <NUM_INT> || u 7 < <NUM_INT> ) ; <CR> return mapEvaluation ( u 7 ) ; <CR> } <CR> static Evaluation mapEvaluation ( int u 7 ) { <CR> Evaluation N 8 = <STRING> ; <CR> switch ( u 7 ) { <CR> case <NUM_INT> : <CR> N 8 = new Exam ( <STRING> ) ; <CR> break ; <CR> } <CR> } <CR> } <CR> <EOC>