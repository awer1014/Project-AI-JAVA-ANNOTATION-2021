<BOC> abstract public class Evaluation { <CR> public Evaluation ( String c 1 ) { <CR> kind = c 1 ; <CR> } <CR> public void print ( ) { <CR> String U 3 = <STRING> ; <CR> if ( kind . equals ( <STRING> ) ) <CR> U 3 += <STRING> ; <CR> else if ( kind . equals ( <STRING> ) ) <CR> U 3 += <STRING> ; <CR> else if ( kind . equals ( <STRING> ) ) <CR> U 3 += <STRING> ; <CR> System . out . println ( <STRING> + U 3 ) ; <CR> } <CR> private String kind ; <CR> abstract public void ask ( ) ; <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> public Exam ( String v 7 , String U ) { <CR> super ( v 7 , U ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class HomeWork extends Evaluation { <CR> public HomeWork ( String l 3 , String V 6 ) { <CR> super ( l 3 , V 6 ) ; <CR> } <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Report extends Evaluation { <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> public Report ( String D 2 , String Z 3 ) { <CR> super ( D 2 , Z 3 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Student { <CR> public void print ( ) { <CR> System . out . println ( <STRING> + id ) ; <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + score ) ; <CR> System . out . println ( <STRING> + prop ) ; <CR> } <CR> public Student ( String B 7 , String Y 0 , String q 4 , String E 7 ) { <CR> id = B 7 ; <CR> name = Y 0 ; <CR> score = q 4 ; <CR> prop = E 7 ; <CR> } <CR> private String id , name , score , prop ; <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] E 5 ) { <CR> Scanner s 6 = new Scanner ( System . in ) ; <CR> boolean E 4 = <STRING> ; <CR> while ( E 4 ) { <CR> System . out . println ( <STRING> ) ; <CR> String A 0 = s 6 . nextLine ( ) ; <CR> if ( A 0 . equals ( <STRING> ) ) { <CR> E 4 = <STRING> ; <CR> break ; <CR> } <CR> System . out . println ( <STRING> ) ; <CR> String x 8 = s 6 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String H 1 = s 6 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String a 6 = s 6 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String Q 1 = s 6 . nextLine ( ) ; <CR> Student L 9 = new Student ( x 8 , H 1 , a 6 , Q 1 ) ; <CR> Evaluation e 3 = new Evaluation ( A 0 ) ; <CR> Evaluation j 4 = <STRING> ; <CR> String h 6 , w 9 ; <CR> if ( A 0 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> h 6 = s 6 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> w 9 = s 6 . nextLine ( ) ; <CR> j 4 = new Exam ( h 6 , w 9 ) ; <CR> } <CR> else if ( A 0 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> h 6 = s 6 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> w 9 = s 6 . nextLine ( ) ; <CR> j 4 = new HomeWork ( h 6 , w 9 ) ; <CR> } <CR> else if ( A 0 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> h 6 = s 6 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> w 9 = s 6 . nextLine ( ) ; <CR> j 4 = new Report ( h 6 , w 9 ) ; <CR> } <CR> System . out . println ( <STRING> ) ; <CR> if ( j 4 ! = <STRING> ) { <CR> e 3 . print ( ) ; <CR> L 9 . print ( ) ; <CR> j 4 . ask ( ) ; <CR> } <CR> System . out . print ( <STRING> ) ; <CR> } <CR> } <CR> } <CR> <EOC>