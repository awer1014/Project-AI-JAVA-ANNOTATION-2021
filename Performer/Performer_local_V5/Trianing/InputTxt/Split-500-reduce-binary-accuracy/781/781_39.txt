<BOC> abstract public class Evaluation { <CR> public void print ( ) { <CR> String J 9 = <STRING> ; <CR> if ( kind . equals ( <STRING> ) ) <CR> J 9 += <STRING> ; <CR> else if ( kind . equals ( <STRING> ) ) <CR> J 9 += <STRING> ; <CR> else if ( kind . equals ( <STRING> ) ) <CR> J 9 += <STRING> ; <CR> System . out . println ( <STRING> + J 9 ) ; <CR> } <CR> private String kind ; <CR> abstract public void ask ( ) ; <CR> public Evaluation ( String V 1 ) { <CR> kind = V 1 ; <CR> } <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> public Exam ( String h 5 , String U 1 ) { <CR> super ( h 5 , U 1 ) ; <CR> } <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class HomeWork extends Evaluation { <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> public HomeWork ( String Z 4 , String x 7 ) { <CR> super ( Z 4 , x 7 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Report extends Evaluation { <CR> public void ask ( ) { <CR> System . out . println ( <STRING> + ask 1 ) ; <CR> System . out . println ( <STRING> + ask 2 ) ; <CR> } <CR> public Report ( String O 2 , String x 7 ) { <CR> super ( O 2 , x 7 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class Student { <CR> public Student ( String h 5 , String i 1 , String q , String C 5 ) { <CR> id = h 5 ; <CR> name = i 1 ; <CR> score = q ; <CR> prop = C 5 ; <CR> } <CR> public void print ( ) { <CR> System . out . println ( <STRING> + id ) ; <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + score ) ; <CR> System . out . println ( <STRING> + prop ) ; <CR> } <CR> private String id , name , score , prop ; <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] t 6 ) { <CR> Scanner B 8 = new Scanner ( System . in ) ; <CR> boolean N 4 = <STRING> ; <CR> while ( N 4 ) { <CR> System . out . println ( <STRING> ) ; <CR> String B 1 = B 8 . nextLine ( ) ; <CR> if ( B 1 . equals ( <STRING> ) ) { <CR> N 4 = <STRING> ; <CR> break ; <CR> } <CR> System . out . println ( <STRING> ) ; <CR> String W 4 = B 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String b 3 = B 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String l 2 = B 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> String A 5 = B 8 . nextLine ( ) ; <CR> Student U 4 = new Student ( W 4 , b 3 , l 2 , A 5 ) ; <CR> Evaluation w 7 = new Evaluation ( B 1 ) ; <CR> Evaluation K = <STRING> ; <CR> String y 1 , k 7 ; <CR> if ( B 1 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> y 1 = B 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> k 7 = B 8 . nextLine ( ) ; <CR> K = new Exam ( y 1 , k 7 ) ; <CR> } <CR> else if ( B 1 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> y 1 = B 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> k 7 = B 8 . nextLine ( ) ; <CR> K = new HomeWork ( y 1 , k 7 ) ; <CR> } <CR> else if ( B 1 . equals ( <STRING> ) ) { <CR> System . out . println ( <STRING> ) ; <CR> y 1 = B 8 . nextLine ( ) ; <CR> System . out . println ( <STRING> ) ; <CR> k 7 = B 8 . nextLine ( ) ; <CR> K = new Report ( y 1 , k 7 ) ; <CR> } <CR> System . out . println ( <STRING> ) ; <CR> if ( K ! = <STRING> ) { <CR> w 7 . print ( ) ; <CR> U 4 . print ( ) ; <CR> K . ask ( ) ; <CR> } <CR> System . out . print ( <STRING> ) ; <CR> } <CR> } <CR> } <CR> <EOC>