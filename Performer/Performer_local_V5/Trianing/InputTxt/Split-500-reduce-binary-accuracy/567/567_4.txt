<BOC> public class ChineseLetter extends Letter { <CR> public void display ( ) { <CR> System . out . print ( receiver + title + <STRING> + <STRING> + <STRING> ) ; <CR> System . out . print ( content + <STRING> ) ; <CR> System . out . print ( sender + <STRING> + <STRING> + <STRING> ) ; <CR> System . out . print ( date + <STRING> ) ; <CR> } <CR> ChineseLetter ( String g 8 , String w 0 , String g 2 , String u 1 , String a 5 ) { <CR> super ( g 8 , w 0 , g 2 , u 1 , a 5 ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class EnglishLetter extends Letter { <CR> EnglishLetter ( String r 6 , String E 1 , String U 1 , String S 9 , String j 4 ) { <CR> super ( r 6 , E 1 , U 1 , S 9 , j 4 ) ; <CR> } <CR> public void display ( ) { <CR> System . out . print ( <STRING> + <STRING> + title + <STRING> + receiver + <STRING> ) ; <CR> System . out . print ( content + <STRING> ) ; <CR> System . out . print ( <STRING> + <STRING> ) ; <CR> System . out . print ( sender + <STRING> ) ; <CR> System . out . print ( date + <STRING> ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Envelop { <CR> void display ( ) { <CR> System . out . print ( <STRING> + senderAddr + <STRING> + <STRING> + letter . sender + <STRING> ) ; <CR> System . out . print ( <STRING> + <STRING> + receiverAddr + <STRING> + letter . receiver + <STRING> + letter . title + <STRING> + <STRING> ) ; <CR> System . out . print ( <STRING> + <STRING> ) ; <CR> letter . display ( ) ; <CR> } <CR> Envelop ( String P 9 , String H 3 , Letter m 1 ) { <CR> this . senderAddr = P 9 ; <CR> this . receiverAddr = H 3 ; <CR> this . letter = m 1 ; <CR> } <CR> String receiverAddr ; <CR> String senderAddr ; <CR> Letter letter ; <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> abstract public class Letter implements Comparable { <CR> int valueOf ( String b 5 ) { <CR> int Z 0 = <NUM_INT> ; <CR> for ( int a 8 = <NUM_INT> ; a 8 < b 5 . length ( ) ; a 8 ++ ) { <CR> char K = b 5 . charAt ( a 8 ) ; <CR> Z 0 = Z 0 * <NUM_INT> + K - <STRING> ; <CR> } <CR> return Z 0 ; <CR> } <CR> abstract protected void display ( ) ; <CR> public int compareTo ( Object b 2 ) { <CR> Letter j 0 = ( Letter ) b 2 ; <CR> same = <STRING> ; <CR> if ( valueOf ( this . date . substring ( <NUM_INT> , <NUM_INT> ) ) > valueOf ( o . date . substring ( <NUM_INT> , <NUM_INT> ) ) ) <CR> return <NUM_INT> ; <CR> else if ( valueOf ( this . date . substring ( <NUM_INT> , <NUM_INT> ) ) == valueOf ( o . date . substring ( <NUM_INT> , <NUM_INT> ) ) ) { <CR> return <NUM_INT> ; <CR> } <CR> else <CR> return - <NUM_INT> ; <CR> } <CR> Letter ( String E 8 , String r 1 , String H 8 , String R 8 , String a 1 ) { <CR> this . title = E 8 ; <CR> this . receiver = r 1 ; <CR> this . content = H 8 ; <CR> this . sender = R 8 ; <CR> this . date = a 1 ; <CR> } <CR> String getDate ( ) { <CR> return date ; <CR> } <CR> boolean same ; <CR> String getSender ( ) { <CR> return sender ; <CR> } <CR> String title , receiver , content , sender , date ; <CR> String getReceiver ( ) { <CR> return receiver ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> import java . util . Arrays ; <CR> public class test { <CR> public static void main ( String [ ] M 7 ) { <CR> Letter [ ] v 4 = { new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) , new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) , new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) } ; <CR> Arrays . sort ( v 4 ) ; <CR> for ( int n 9 = <NUM_INT> ; n 9 < <NUM_INT> ; n 9 ++ ) <CR> v 4 [ n 9 ] . display ( ) ; <CR> } <CR> } <CR> <EOC>