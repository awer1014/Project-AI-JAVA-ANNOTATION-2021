<BOC> abstract public class Evaluation { <CR> protected double grade , gradepc ; <CR> abstract public void printa ( ) ; <CR> public void print ( ) { <CR> System . out . println ( <STRING> + type ) ; <CR> System . out . println ( <STRING> + sid ) ; <CR> System . out . println ( <STRING> + name ) ; <CR> System . out . println ( <STRING> + grade ) ; <CR> System . out . println ( <STRING> + gradepc ) ; <CR> } <CR> public Evaluation ( String n 2 , String W 2 , String R 4 , double Z 5 , double c ) { <CR> sid = n 2 ; <CR> name = W 2 ; <CR> type = R 4 ; <CR> this . grade = Z 5 ; <CR> this . gradepc = c ; <CR> } <CR> private String sid , name , type ; <CR> } <CR> <EOC> <BOC> public class Exam extends Evaluation { <CR> public void printa ( ) { <CR> System . out . println ( <STRING> + date ) ; <CR> System . out . println ( <STRING> + range ) ; <CR> } <CR> String range ; <CR> public Exam ( String Y 0 , String V 4 , String d 0 , double R 7 , double s 4 ) { <CR> super ( Y 0 , V 4 , d 0 , R 7 , s 4 ) ; <CR> } <CR> String date ; <CR> } <CR> <EOC> <BOC> import java . util . Scanner ; <CR> public class Test { <CR> public static void main ( String [ ] J ) { <CR> Scanner y 8 = new Scanner ( System . in ) ; <CR> System . out . println ( <STRING> ) ; <CR> int R 5 = <NUM_INT> ; <CR> do { <CR> R 5 = y 8 . nextInt ( ) ; <CR> } <CR> while ( R 5 > <NUM_INT> || R 5 < <NUM_INT> ) ; <CR> return mapEvaluation ( R 5 ) ; <CR> } <CR> static Evaluation mapEvaluation ( int R 5 ) { <CR> Evaluation o 8 = <STRING> ; <CR> switch ( R 5 ) { <CR> case <NUM_INT> : <CR> o 8 = new Exam ( <STRING> ) ; <CR> break ; <CR> } <CR> } <CR> } <CR> <EOC>