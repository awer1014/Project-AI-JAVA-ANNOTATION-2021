<BOC> public class ChineseLetter extends Letter { <CR> ChineseLetter ( String k 8 , String u 1 , String P 9 , String T 4 , String x 5 ) { <CR> super ( k 8 , u 1 , P 9 , T 4 , x 5 ) ; <CR> } <CR> public void display ( ) { <CR> System . out . print ( receiver + title + <STRING> + <STRING> + <STRING> ) ; <CR> System . out . print ( content + <STRING> ) ; <CR> System . out . print ( sender + <STRING> + <STRING> + <STRING> ) ; <CR> System . out . print ( date + <STRING> ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class EnglishLetter extends Letter { <CR> public void display ( ) { <CR> System . out . print ( <STRING> + <STRING> + title + <STRING> + receiver + <STRING> ) ; <CR> System . out . print ( content + <STRING> ) ; <CR> System . out . print ( <STRING> + <STRING> ) ; <CR> System . out . print ( sender + <STRING> ) ; <CR> System . out . print ( date + <STRING> ) ; <CR> } <CR> EnglishLetter ( String w 1 , String B 4 , String X 7 , String B 3 , String a 8 ) { <CR> super ( w 1 , B 4 , X 7 , B 3 , a 8 ) ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Envelop { <CR> String senderAddr ; <CR> void display ( ) { <CR> System . out . print ( <STRING> + senderAddr + <STRING> + <STRING> + letter . sender + <STRING> ) ; <CR> System . out . print ( <STRING> + <STRING> + receiverAddr + <STRING> + letter . receiver + <STRING> + letter . title + <STRING> + <STRING> ) ; <CR> System . out . print ( <STRING> + <STRING> ) ; <CR> letter . display ( ) ; <CR> } <CR> Letter letter ; <CR> Envelop ( String h 8 , String I 7 , Letter E 5 ) { <CR> this . senderAddr = h 8 ; <CR> this . receiverAddr = I 7 ; <CR> this . letter = E 5 ; <CR> } <CR> String receiverAddr ; <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> abstract public class Letter implements Comparable { <CR> String getDate ( ) { <CR> return date ; <CR> } <CR> public int compareTo ( Object Y 8 ) { <CR> Letter a 4 = ( Letter ) Y 8 ; <CR> same = <STRING> ; <CR> if ( valueOf ( this . date . substring ( <NUM_INT> , <NUM_INT> ) ) > valueOf ( o . date . substring ( <NUM_INT> , <NUM_INT> ) ) ) <CR> return <NUM_INT> ; <CR> else if ( valueOf ( this . date . substring ( <NUM_INT> , <NUM_INT> ) ) == valueOf ( o . date . substring ( <NUM_INT> , <NUM_INT> ) ) ) { <CR> return <NUM_INT> ; <CR> } <CR> else <CR> return - <NUM_INT> ; <CR> } <CR> String title , receiver , content , sender , date ; <CR> boolean same ; <CR> int valueOf ( String E 0 ) { <CR> int H 7 = <NUM_INT> ; <CR> for ( int z = <NUM_INT> ; z < E 0 . length ( ) ; z ++ ) { <CR> char v = E 0 . charAt ( z ) ; <CR> H 7 = H 7 * <NUM_INT> + v - <STRING> ; <CR> } <CR> return H 7 ; <CR> } <CR> abstract protected void display ( ) ; <CR> String getReceiver ( ) { <CR> return receiver ; <CR> } <CR> Letter ( String b 3 , String C 3 , String T 8 , String Y 6 , String s 4 ) { <CR> this . title = b 3 ; <CR> this . receiver = C 3 ; <CR> this . content = T 8 ; <CR> this . sender = Y 6 ; <CR> this . date = s 4 ; <CR> } <CR> String getSender ( ) { <CR> return sender ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> import java . util . Arrays ; <CR> public class test { <CR> public static void main ( String [ ] g 2 ) { <CR> Letter [ ] o 9 = { new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) , new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) , new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) } ; <CR> Arrays . sort ( o 9 ) ; <CR> for ( int H 2 = <NUM_INT> ; H 2 < <NUM_INT> ; H 2 ++ ) <CR> o 9 [ H 2 ] . display ( ) ; <CR> } <CR> } <CR> <EOC>