<BOC> public class ChineseLetter extends Letter { <CR> ChineseLetter ( String e 9 , String t 5 , String P , String m , String d 3 ) { <CR> super ( e 9 , t 5 , P , m , d 3 ) ; <CR> } <CR> void display ( ) { <CR> System . out . println ( receiver + <STRING> + title + <STRING> ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( sender + <STRING> ) ; <CR> System . out . println ( date ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class EnglishLetter extends Letter { <CR> void display ( ) { <CR> System . out . println ( <STRING> + receiver + <STRING> + title ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( sender ) ; <CR> System . out . println ( date ) ; <CR> } <CR> EnglishLetter ( String C 6 , String w 4 , String q , String F 9 , String v 5 ) { <CR> super ( C 6 , w 4 , q , F 9 , v 5 ) ; <CR> } <CR> } <CR> <EOC> <BOC> abstract public class Letter implements Comparable { <CR> String getReceiver ( ) { <CR> return receiver ; <CR> } <CR> abstract void display ( ) ; <CR> String getDate ( ) { <CR> return date ; <CR> } <CR> String title , receiver , content , sender , date ; <CR> public int compareTo ( Object n 3 ) { <CR> Letter R 0 = ( Letter ) n 3 ; <CR> if ( this . getDate ( ) . compareTo ( R 0 . getDate ( ) ) < <NUM_INT> ) { <CR> return <NUM_INT> ; <CR> } <CR> else if ( this . getDate ( ) . compareTo ( R 0 . getDate ( ) ) > <NUM_INT> ) { <CR> return - <NUM_INT> ; <CR> } <CR> else { <CR> return <NUM_INT> ; <CR> } <CR> } <CR> String getSender ( ) { <CR> return sender ; <CR> } <CR> Letter ( String M 8 , String A 5 , String U 3 , String N 2 , String Y 7 ) { <CR> this . title = M 8 ; <CR> this . receiver = A 5 ; <CR> this . content = U 3 ; <CR> this . sender = N 2 ; <CR> this . date = Y 7 ; <CR> } <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Test { <CR> public static void main ( String [ ] C 7 ) { <CR> Letter L 1 = new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter e 6 = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter y 0 = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> ArrayList g 6 = { L 1 , e 6 , y 0 } ; <CR> for ( Letter q 9 : g 6 ) <CR> q 9 . display ( ) ; <CR> } <CR> } <CR> <EOC>