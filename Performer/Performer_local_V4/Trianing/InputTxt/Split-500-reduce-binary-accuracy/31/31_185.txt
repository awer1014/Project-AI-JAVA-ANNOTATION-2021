<BOC> public class ChineseLetter extends Letter { <CR> ChineseLetter ( String r 1 , String C 8 , String W 2 , String z 8 , String w 6 ) { <CR> super ( r 1 , C 8 , W 2 , z 8 , w 6 ) ; <CR> } <CR> void display ( ) { <CR> System . out . println ( receiver + <STRING> + title + <STRING> ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( sender + <STRING> ) ; <CR> System . out . println ( date ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class EnglishLetter extends Letter { <CR> EnglishLetter ( String M , String L 5 , String y 2 , String A , String n 4 ) { <CR> super ( M , L 5 , y 2 , A , n 4 ) ; <CR> } <CR> void display ( ) { <CR> System . out . println ( <STRING> + receiver + <STRING> + title ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( sender ) ; <CR> System . out . println ( date ) ; <CR> } <CR> } <CR> <EOC> <BOC> abstract public class Letter implements Comparable { <CR> String getReceiver ( ) { <CR> return receiver ; <CR> } <CR> String getDate ( ) { <CR> return date ; <CR> } <CR> Letter ( String B , String A 2 , String u 8 , String P 2 , String C 3 ) { <CR> this . title = B ; <CR> this . receiver = A 2 ; <CR> this . content = u 8 ; <CR> this . sender = P 2 ; <CR> this . date = C 3 ; <CR> } <CR> public int compareTo ( Object Y 3 ) { <CR> Letter K 6 = ( Letter ) Y 3 ; <CR> if ( this . getDate ( ) . compareTo ( K 6 . getDate ( ) ) < <NUM_INT> ) { <CR> return <NUM_INT> ; <CR> } <CR> else if ( this . getDate ( ) . compareTo ( K 6 . getDate ( ) ) > <NUM_INT> ) { <CR> return - <NUM_INT> ; <CR> } <CR> else { <CR> return <NUM_INT> ; <CR> } <CR> } <CR> String getSender ( ) { <CR> return sender ; <CR> } <CR> abstract void display ( ) ; <CR> String title , receiver , content , sender , date ; <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Test { <CR> public static void main ( String [ ] p 7 ) { <CR> Letter O 0 = new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter S 3 = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter G = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> ArrayList u 6 = { O 0 , S 3 , G } ; <CR> for ( Letter w 1 : u 6 ) <CR> w 1 . display ( ) ; <CR> } <CR> } <CR> <EOC>