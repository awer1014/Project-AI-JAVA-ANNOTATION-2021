<BOC> public class ChineseLetter extends Letter { <CR> void display ( ) { <CR> System . out . println ( receiver + <STRING> + title + <STRING> ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( sender + <STRING> ) ; <CR> System . out . println ( date ) ; <CR> } <CR> ChineseLetter ( String X 1 , String Z 6 , String C 2 , String q , String W 2 ) { <CR> super ( X 1 , Z 6 , C 2 , q , W 2 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class EnglishLetter extends Letter { <CR> void display ( ) { <CR> System . out . println ( <STRING> + receiver + <STRING> + title ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( sender ) ; <CR> System . out . println ( date ) ; <CR> } <CR> EnglishLetter ( String N 4 , String m 9 , String d 4 , String V , String s 8 ) { <CR> super ( N 4 , m 9 , d 4 , V , s 8 ) ; <CR> } <CR> } <CR> <EOC> <BOC> abstract public class Letter implements Comparable { <CR> Letter ( String P 2 , String V 5 , String h 3 , String v 6 , String E ) { <CR> this . title = P 2 ; <CR> this . receiver = V 5 ; <CR> this . content = h 3 ; <CR> this . sender = v 6 ; <CR> this . date = E ; <CR> } <CR> String getDate ( ) { <CR> return date ; <CR> } <CR> String getSender ( ) { <CR> return sender ; <CR> } <CR> public int compareTo ( Object n 9 ) { <CR> Letter b 9 = ( Letter ) n 9 ; <CR> if ( this . getDate ( ) . compareTo ( b 9 . getDate ( ) ) < <NUM_INT> ) { <CR> return <NUM_INT> ; <CR> } <CR> else if ( this . getDate ( ) . compareTo ( b 9 . getDate ( ) ) > <NUM_INT> ) { <CR> return - <NUM_INT> ; <CR> } <CR> else { <CR> return <NUM_INT> ; <CR> } <CR> } <CR> String title , receiver , content , sender , date ; <CR> String getReceiver ( ) { <CR> return receiver ; <CR> } <CR> abstract void display ( ) ; <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Test { <CR> public static void main ( String [ ] i 3 ) { <CR> Letter A 2 = new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter z 0 = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter G = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> ArrayList t 2 = { A 2 , z 0 , G } ; <CR> for ( Letter D 4 : t 2 ) <CR> D 4 . display ( ) ; <CR> } <CR> } <CR> <EOC>