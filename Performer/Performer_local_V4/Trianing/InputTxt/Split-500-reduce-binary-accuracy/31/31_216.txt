<BOC> public class ChineseLetter extends Letter { <CR> void display ( ) { <CR> System . out . println ( receiver + <STRING> + title + <STRING> ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( sender + <STRING> ) ; <CR> System . out . println ( date ) ; <CR> } <CR> ChineseLetter ( String S 5 , String Q 3 , String I 4 , String r 9 , String F 1 ) { <CR> super ( S 5 , Q 3 , I 4 , r 9 , F 1 ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class EnglishLetter extends Letter { <CR> void display ( ) { <CR> System . out . println ( <STRING> + receiver + <STRING> + title ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( sender ) ; <CR> System . out . println ( date ) ; <CR> } <CR> EnglishLetter ( String x , String e 2 , String x 2 , String z 9 , String b 0 ) { <CR> super ( x , e 2 , x 2 , z 9 , b 0 ) ; <CR> } <CR> } <CR> <EOC> <BOC> abstract public class Letter implements Comparable { <CR> abstract void display ( ) ; <CR> String getReceiver ( ) { <CR> return receiver ; <CR> } <CR> String getDate ( ) { <CR> return date ; <CR> } <CR> public int compareTo ( Object E ) { <CR> Letter T 1 = ( Letter ) E ; <CR> if ( this . getDate ( ) . compareTo ( T 1 . getDate ( ) ) < <NUM_INT> ) { <CR> return <NUM_INT> ; <CR> } <CR> else if ( this . getDate ( ) . compareTo ( T 1 . getDate ( ) ) > <NUM_INT> ) { <CR> return - <NUM_INT> ; <CR> } <CR> else { <CR> return <NUM_INT> ; <CR> } <CR> } <CR> Letter ( String M 5 , String s , String Q 2 , String R 8 , String P 2 ) { <CR> this . title = M 5 ; <CR> this . receiver = s ; <CR> this . content = Q 2 ; <CR> this . sender = R 8 ; <CR> this . date = P 2 ; <CR> } <CR> String getSender ( ) { <CR> return sender ; <CR> } <CR> String title , receiver , content , sender , date ; <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Test { <CR> public static void main ( String [ ] Y 8 ) { <CR> Letter V 2 = new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter M 6 = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter v 3 = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> ArrayList A 9 = { V 2 , M 6 , v 3 } ; <CR> for ( Letter r 6 : A 9 ) <CR> r 6 . display ( ) ; <CR> } <CR> } <CR> <EOC>