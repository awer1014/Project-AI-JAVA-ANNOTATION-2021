<BOC> public class ChineseLetter extends Letter { <CR> ChineseLetter ( String z 2 , String g 2 , String c 7 , String Q 8 , String w 5 ) { <CR> super ( z 2 , g 2 , c 7 , Q 8 , w 5 ) ; <CR> } <CR> void display ( ) { <CR> System . out . println ( receiver + <STRING> + title + <STRING> ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( sender + <STRING> ) ; <CR> System . out . println ( date ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class EnglishLetter extends Letter { <CR> EnglishLetter ( String v 4 , String v 5 , String V , String X 2 , String t 5 ) { <CR> super ( v 4 , v 5 , V , X 2 , t 5 ) ; <CR> } <CR> void display ( ) { <CR> System . out . println ( <STRING> + receiver + <STRING> + title ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( sender ) ; <CR> System . out . println ( date ) ; <CR> } <CR> } <CR> <EOC> <BOC> abstract public class Letter implements Comparable { <CR> String getReceiver ( ) { <CR> return receiver ; <CR> } <CR> String getDate ( ) { <CR> return date ; <CR> } <CR> String title , receiver , content , sender , date ; <CR> public int compareTo ( Object Z ) { <CR> Letter l 6 = ( Letter ) Z ; <CR> if ( this . getDate ( ) . compareTo ( l 6 . getDate ( ) ) < <NUM_INT> ) { <CR> return <NUM_INT> ; <CR> } <CR> else if ( this . getDate ( ) . compareTo ( l 6 . getDate ( ) ) > <NUM_INT> ) { <CR> return - <NUM_INT> ; <CR> } <CR> else { <CR> return <NUM_INT> ; <CR> } <CR> } <CR> Letter ( String Q 9 , String I 4 , String t 4 , String f 5 , String r ) { <CR> this . title = Q 9 ; <CR> this . receiver = I 4 ; <CR> this . content = t 4 ; <CR> this . sender = f 5 ; <CR> this . date = r ; <CR> } <CR> String getSender ( ) { <CR> return sender ; <CR> } <CR> abstract void display ( ) ; <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Test { <CR> public static void main ( String [ ] C 3 ) { <CR> Letter E 8 = new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter v 6 = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter H = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> ArrayList Z = { E 8 , v 6 , H } ; <CR> for ( Letter I 7 : Z ) <CR> I 7 . display ( ) ; <CR> } <CR> } <CR> <EOC>