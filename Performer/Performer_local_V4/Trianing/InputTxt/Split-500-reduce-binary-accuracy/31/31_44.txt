<BOC> public class ChineseLetter extends Letter { <CR> ChineseLetter ( String e 8 , String Z , String C 1 , String U 9 , String d 2 ) { <CR> super ( e 8 , Z , C 1 , U 9 , d 2 ) ; <CR> } <CR> void display ( ) { <CR> System . out . println ( receiver + <STRING> + title + <STRING> ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( sender + <STRING> ) ; <CR> System . out . println ( date ) ; <CR> } <CR> } <CR> <EOC> <BOC> public class EnglishLetter extends Letter { <CR> EnglishLetter ( String m 0 , String Y , String s 1 , String o 7 , String O 0 ) { <CR> super ( m 0 , Y , s 1 , o 7 , O 0 ) ; <CR> } <CR> void display ( ) { <CR> System . out . println ( <STRING> + receiver + <STRING> + title ) ; <CR> System . out . println ( content ) ; <CR> System . out . println ( <STRING> ) ; <CR> System . out . println ( sender ) ; <CR> System . out . println ( date ) ; <CR> } <CR> } <CR> <EOC> <BOC> abstract public class Letter implements Comparable { <CR> abstract void display ( ) ; <CR> public int compareTo ( Object u 6 ) { <CR> Letter B 6 = ( Letter ) u 6 ; <CR> if ( this . getDate ( ) . compareTo ( B 6 . getDate ( ) ) < <NUM_INT> ) { <CR> return <NUM_INT> ; <CR> } <CR> else if ( this . getDate ( ) . compareTo ( B 6 . getDate ( ) ) > <NUM_INT> ) { <CR> return - <NUM_INT> ; <CR> } <CR> else { <CR> return <NUM_INT> ; <CR> } <CR> } <CR> String getReceiver ( ) { <CR> return receiver ; <CR> } <CR> String getDate ( ) { <CR> return date ; <CR> } <CR> String getSender ( ) { <CR> return sender ; <CR> } <CR> Letter ( String u 5 , String q 0 , String b 7 , String R 4 , String w ) { <CR> this . title = u 5 ; <CR> this . receiver = q 0 ; <CR> this . content = b 7 ; <CR> this . sender = R 4 ; <CR> this . date = w ; <CR> } <CR> String title , receiver , content , sender , date ; <CR> } <CR> <EOC> <BOC> import java . util . * ; <CR> public class Test { <CR> public static void main ( String [ ] p 5 ) { <CR> Letter U 0 = new ChineseLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter I 8 = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> Letter J 3 = new EnglishLetter ( <STRING> , <STRING> , <STRING> , <STRING> , <STRING> ) ; <CR> ArrayList k 8 = { U 0 , I 8 , J 3 } ; <CR> for ( Letter z 8 : k 8 ) <CR> z 8 . display ( ) ; <CR> } <CR> } <CR> <EOC>