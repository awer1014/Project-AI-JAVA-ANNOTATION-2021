<?xml version="1.0" encoding="UTF-8" standalone="no"?><ErrorList id="C:\Users\USER\Desktop\手機待儲存\專研程式碼標記錯誤\XML_Error\1.12\JavaAnnotationXMLProgram\code(正規化)\期末考題三\43\43.xml">
	
<SourceCode_List><SourceCode lines="33" name="ChineseLetter.java"><![CDATA[public class ChineseLetter extends Letter { 
private static String title , receiver , content , sender , date ; 
public static String getSender ( ) { 
return sender ; 
} 
public static String getReceiver ( ) { 
return receiver ; 
} 
public static String getDate ( ) { 
return date ; 
} 
public static String getTitle ( ) { 
return title ; 
} 
ChineseLetter ( String t , String r , String c , String s , String d ) { 
title = t ; 
receiver = r ; 
content = c ; 
sender = s ; 
date = d ; 
} 
public void display ( ) { 
System . out . println ( getReceiver ( ) + " " + getTitle ( ) + ", 您好" ) ; 
System . out . println ( this . content ) ; 
System . out . println ( getSender ( ) + " 敬上" ) ; 
System . out . println ( getDate ( ) ) ; 
} 
public static void main ( String [ ] args ) { 
Letter lt = new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) ; 
lt . display ( ) ; 
} 
} 
]]></SourceCode><SourceCode lines="34" name="EnglishLetter.java"><![CDATA[public class EnglishLetter extends Letter { 
private static String title , receiver , content , sender , date ; 
public static String getSender ( ) { 
return sender ; 
} 
public static String getReceiver ( ) { 
return receiver ; 
} 
public static String getDate ( ) { 
return date ; 
} 
public static String getTitle ( ) { 
return title ; 
} 
EnglishLetter ( String t , String r , String c , String s , String d ) { 
title = t ; 
receiver = r ; 
content = c ; 
sender = s ; 
date = d ; 
} 
public void display ( ) { 
System . out . println ( "Dear " + getTitle ( ) + " " + getReceiver ( ) + "," ) ; 
System . out . println ( this . content ) ; 
System . out . println ( "Sincerely" ) ; 
System . out . println ( getSender ( ) ) ; 
System . out . println ( getDate ( ) ) ; 
} 
public static void main ( String [ ] args ) { 
Letter lt = new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) ; 
lt . display ( ) ; 
} 
} 
]]></SourceCode><SourceCode lines="24" name="Envelop.java"><![CDATA[public class Envelop { 
private static String senderAddr , receiverAddr ; 
private static Letter letter ; 
public static Letter getLetter ( ) { 
return letter ; 
} 
Envelop ( String s , String r , Letter l ) { 
senderAddr = s ; 
receiverAddr = r ; 
letter = l ; 
} 
public static void main ( String [ ] args ) { 
Letter lt = new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) ; 
Envelop env = new Envelop ( "Taipei" , "Kaohsiung" , lt ) ; 
env . display ( ) ; 
} 
public void display ( ) { 
System . out . println ( "From:" + this . senderAddr + ", " + ChineseLetter . getSender ( ) ) ; 
System . out . println ( "To: " + this . receiverAddr + ", " + ChineseLetter . getReceiver ( ) + " " + ChineseLetter . getTitle ( ) ) ; 
System . out . println ( "信件內容 :" ) ; 
getLetter ( ) . display ( ) ; 
} 
} 
]]></SourceCode><SourceCode lines="4" name="Letter.java"><![CDATA[abstract public class Letter { 
abstract public void display ( ) ; 
} 
]]></SourceCode></SourceCode_List><Errors><Error tpye="抽象:不會分離變跟不變的部分"><Message><![CDATA[物件資料是可以被子類別繼承的,只需在Letter宣告一次即可
public abstract class Letter 
{
public String title,receiver,content,sender,date;
Letter(String title, String receiver, String content, String sender, String date)
{
this.title= title;
this.receiver=receiver;
this.content=content;
this.sender=sender;
this.date=date;
}
}
子類別的建構子再利用super做資料傳遞給上一層
public class EnglishLetter extends Letter
{
public EnglishLetter(String title, String receiver, String content, String sender, String date)
{
super(title,receiver,content,sender,date);
}
}

public class ChineseLetter extends Letter
{
public ChineseLetter(String title, String receiver, String content, String sender, String date)
{
super(title,receiver,content,sender,date);
}
}
另一方面,將共同物件寫在父類別,
宣告成public供所有類別做使用,
子類別就不用再宣告一次物件動作
public abstract class Letter 
{
public String getTitle()
{
return title;
}
public String getReceiver()
{
return receiver;
}
public String getContent()
{
return content;
}
public String getSender()
{
return sender;
}
public String getDate()
{
return date;
}
}]]></Message><Linelist><line Begin="2" End="2" src="ChineseLetter"/><line Begin="3" End="14" src="ChineseLetter"/><line Begin="15" End="21" src="ChineseLetter"/><line Begin="2" End="2" src="EnglishLetter"/><line Begin="3" End="14" src="EnglishLetter"/><line Begin="15" End="21" src="EnglishLetter"/></Linelist></Error><Error tpye="物件:不會使用物件之間的關係"><Message><![CDATA[在Envelop類別已宣告Letter類別的letter物件
如下列:
private Letter letter ; 
所以不用編寫一個類別動作來回傳letter物件
Envelop類別第4~6行是不必要的。

Envelop類別第21行使用已宣告的letter物件中的display ( )物件動作
如下列:
letter . display ( ) ;]]></Message><Linelist><line Begin="4" End="6" src="Envelop"/><line Begin="21" End="21" src="Envelop"/></Linelist></Error><Error tpye="物件:不會使用物件資料"><Message><![CDATA[ChineseLetter所新宣告的 Letter物件資料
Letter lt = new ChineseLetter ("教授", "王", "很高興跟您連絡", "銘哥", "2019/01/05");
EnglishLetter所新宣告的 Letter物件資料
Letter lt = new EnglishLetter("Professor", "Wang", "I am glad to write to you!", "J. J. Lin", "2019/01/05");
這兩列程式碼應當宣告在Letter類別,
因為Letter屬於父類別,才能在Letter宣告一個有著ChineseLetter/EnglishLetter建構子的物件
並且寫在main函式當中
public abstract class Letter 
{
public static void main (String[] args)
{
Letter lt;
Letter lt = new ChineseLetter ("教授", "王", "很高興跟您連絡", "銘哥", "2019/01/05");
lt.display(); 
Letter lt = new EnglishLetter("Professor", "Wang", "I am glad to write to you!", "J. J. Lin", "2019/01/05");
lt.display();
}	
}]]></Message><Linelist><line Begin="29" End="30" src="ChineseLetter"/><line Begin="30" End="31" src="EnglishLetter"/></Linelist></Error><Error tpye="物件:無法分辨物件&amp;類別的資料/動作"><Message><![CDATA[此處不需要被宣告成類別資料/動作,
當資料宣告成static靜態後就變唯一值。

按照資料封裝的原則,
在宣告一個類別的物件應加上private
表示letter物件資料是被保護在Envelop類別裡面的
例:private Letter letter;

而senderAddr,receiverAddr是Envelop類別自己所擁有的
應在變數前面加上private
例:private String senderAddr , receiverAddr;

Envelop的getLetter ( )物件動作
會呼叫到Letter類別的letter物件中的物件動作,
所以宣告成public
public Letter getLetter ( )
]]></Message><Linelist><line Begin="2" End="3" src="Envelop"/><line Begin="4" End="6" src="Envelop"/></Linelist></Error><Error tpye="物件:物件資料/物件動作概念"><Message><![CDATA[當共同物件寫在父類別,子類別在覆寫抽象動作的時候,
即可利用共同物件來呼叫參數
如下列:
System.out.print(getContent());]]></Message><Linelist><line Begin="24" End="24" src="ChineseLetter"/><line Begin="24" End="24" src="EnglishLetter"/></Linelist></Error></Errors></ErrorList>