<?xml version="1.0" encoding="UTF-8" standalone="no"?><ErrorList id="C:\Users\USER\Desktop\手機待儲存\專研程式碼標記錯誤\XML_Error\1.12\JavaAnnotationXMLProgram\code(正規化)\期末考題四\38(x)\38.xml">
	
<SourceCode_List><SourceCode lines="35" name="ChineseLetter.java"><![CDATA[public class ChineseLetter extends Letter
{
    String ChineseLetter;
    Letter lt = new ChineseLetter ("教授", "王", "很高興跟您連絡", "銘哥", "2019/01/05");
    Envelop env = new Envelop("Taipei", "Kaohsiung", lt);
    String getTitle();
    env.display()
    {
        System.out.println("From: Taipei");
        System.out.println("To: Kaohsiung, 王 教授");
        System.out.println("信件內容:");
        System.out.println("王 教授, 您好");
        System.out.println("王 教授, 您好");
        System.out.println("很高興跟您連絡");
        System.out.println("很高興跟您連絡");
        System.out.println("銘哥 敬上");
        System.out.println("2019/01/05");
    }
    void display()
    {
        System.out.println("王 教授, 您好");
        System.out.println("很高興跟您連絡");
        System.out.println("銘哥 敬上");
        System.out.println("2019/01/05");
    }
    lt.display();
    public ChineseLetter(String ChineseLetter)
    {
        this.ChineseLetter=ChineseLetter;
    }
    public  String LT()
    {
        return;
    }
}]]></SourceCode><SourceCode lines="15" name="Comparable.java"><![CDATA[import java.util.Arrays;
public class Comparable
{
    Letter[] list={
    new ChineseLetter {"教授", "王", "很高興跟您連絡", "銘哥", "2019/01/05"}; 
    new Letter{"Professor", "Wang", "I am glad to write to you!", "J. J. Lin", "2018/11/01"};  
    new EnglishLetter{"Professor", "Liu", "I am sorry!", "K. Ming", "2018/07/05"};
    } 
    Arrays.sort(list);
    @Override
   public int compareTo(Object o){
       Comparable obj=(Comparable) o;
  }
}
]]></SourceCode><SourceCode lines="37" name="EnglishLetter.java"><![CDATA[public class EnglishLetter extends Letter
{
    String EnglishLetter;
    Letter lt = new EnglishLetter("Professor", "Wang", "I am glad to write to you!", "J. J. Lin", "2019/01/05");
    Envelop env = new Envelop("Taipei", "Kaohsiung", lt);
    String getTitle();
    env.display()
    {
        System.out.println("From: Taipei");
        System.out.println("To: Kaohsiung, 王 教授");
        System.out.println("信件內容:");
        System.out.println("王 教授, 您好");
        System.out.println("王 教授, 您好");
        System.out.println("很高興跟您連絡");
        System.out.println("很高興跟您連絡");
        System.out.println("銘哥 敬上");
        System.out.println("2019/01/05");
    }
    void display()
    {
        System.out.println("Dear Professor Wang, ");
        System.out.println("I am glad to write to you!");
        System.out.println("Sincerely");
        System.out.println("J. J. Lin");
        System.out.println("2019/01/05");
    }
    lt.display();
    public EnglishLetter(String EnglishLetter)
    {
        this.EnglishLetter=EnglishLetter;
    }
    public  String LT()
    {
        return;
    }
}
]]></SourceCode><SourceCode lines="32" name="Letter.java"><![CDATA[abstract public class Letter { 
protected String title ; 
protected String receiver ; 
protected String content ; 
protected String sender ; 
protected String date ; 
public Letter ( ) { 
} 
public Letter ( String title , String receiver , String content , String sender , String date ) { 
this . title = title ; 
this . receiver = receiver ; 
this . content = content ; 
this . sender = sender ; 
this . date = date ; 
} 
public void display ( ) { 
} 
String getSender ( ) { 
return sender ; 
} 
String getReceiver ( ) { 
return receiver ; 
} 
String getDate ( ) { 
return date ; 
} 
public static void main ( String [ ] args ) { 
String receiver = args [ 0 ] ; 
} 
abstract protected String LT ( ) ; 
} 
]]></SourceCode></SourceCode_List><Errors><Error tpye="介面:Comparable介面"><Message><![CDATA[Comparable介面可以實做在Letter類別內
abstract public class Letter implements Comparable

因為物件資料都在Letter類別裡
而且需要用到comparable介面時
做的也只有一個物件動作
@Override public int compareTo (Object other){
Letter o = (Letter)other;
return date.compareTo(o.getDate());
}
先將原本宣告成Object的o強制轉換成Letter類別型態
這樣o就可以使用跟Letter有關的相關訊息。
如:Letter的物件資料、Letter的物件動作

因為Java的String類別也是有實作Comparable介面
也是依照原則return 1;return 0;return -1

呼叫letter.compareTo()的動作來實現比較大小
這樣才有達到依照日期排序的輸出結果
        for (Letter letter : list)
            letter.compareTo(letter);
        for (Letter letter : list)
            letter.display();]]></Message><Linelist><line Begin="-1" End="-1" src="Comparable"/></Linelist></Error><Error tpye="其他:不熟悉JAVA程式結構"><Message><![CDATA[在ChineseLetter/EnglishLetter裡宣告一個新的Letter/Envelop物件
但並沒有編寫Envelop類別
Letter lt = new ChineseLetter ("教授", "王", "很高興跟您連絡", "銘哥", "2019/01/05");
Envelop env = new Envelop("Taipei", "Kaohsiung", lt);
Letter lt = new EnglishLetter("Professor", "Wang", "I am glad to write to you!", "J. J. Lin", "2019/01/05");
Envelop env = new Envelop("Taipei", "Kaohsiung", lt);
且有關於ChineseLetter/EnglishLetter的建構子也是有誤的
上列ChineseLetter/EnglishLetter的建構子中,
總共有5個變數
    public ChineseLetter(String ChineseLetter)
    {
        this.ChineseLetter=ChineseLetter;
    }
    public EnglishLetter(String EnglishLetter)
    {
        this.EnglishLetter=EnglishLetter;
    }

所編寫的建構子只包含一個變數]]></Message><Linelist><line Begin="4" End="5" src="ChineseLetter"/><line Begin="27" End="30" src="ChineseLetter"/><line Begin="4" End="5" src="EnglishLetter"/><line Begin="28" End="31" src="EnglishLetter"/></Linelist></Error><Error tpye="抽象:抽象動作"><Message><![CDATA[在Letter宣告抽象動作,讓子類別去做覆寫
public abstract class Letter
{
public abstract void display();
}
public class ChineseLetter extends Letter
{
void display(){
System.out.print(getReceiver() + " " + getTitle() +",您好");
System.out.print(getContent());
System.out.print(getSender() +" 敬上");
System.out.print(getDate());
}
}
public class EnglishLetter extends Letter
{
void display(){
System.out.print("Dear "+getTitle()+getReceiver()+",");
System.out.print(getContent());
System.out.print("Sincerely");
System.out.print(getSender());
System.out.print(getDate());]]></Message><Linelist><line Begin="19" End="25" src="ChineseLetter"/><line Begin="19" End="26" src="EnglishLetter"/></Linelist></Error><Error tpye="物件:不會使用物件之間的關係"><Message><![CDATA[env.display(){
        System.out.println("From: Taipei");
        System.out.println("To: Kaohsiung, 王 教授");
        System.out.println("信件內容:");
        System.out.println("王 教授, 您好");
        System.out.println("王 教授, 您好");
        System.out.println("很高興跟您連絡");
        System.out.println("很高興跟您連絡");
        System.out.println("銘哥 敬上");
        System.out.println("2019/01/05");
    }
此寫法把輸出測資都寫固定,
且env.display()此物件動作應寫在Envelop類別
如下列:
public class Envelop{
private String senderAddr, receiverAddr;
//宣告一個Letter類別的letter物件,呼叫letter中的物件資料物件動作
private Letter letter;
public Envelop(String senderAddr,String receiverAddr,Letter letter){
this.senderAddr=senderAddr;
this.receiverAddr=receiverAddr;
this.letter=letter;
}
public void display(){
System.out.println( "From: "+ senderAddr +", "+ letter.getSender());
System.out.println( "To: "+ receiverAddr +", "+ letter.getReceiver() +" " + letter.getTitle());
System.out.println("信件內容");
letter.display();
}
}]]></Message><Linelist><line Begin="7" End="18" src="ChineseLetter"/><line Begin="7" End="18" src="EnglishLetter"/></Linelist></Error><Error tpye="物件:不會使用物件資料"><Message><![CDATA[題意所需的物件資料如下列:
public String title,receiver,content,sender,date;
此外物件資料是可以被子類別繼承的,所以宣告在Letter類別
在讓底下得子類別(ChineseLetter/EnglishLetter)繼承物件資料即可
如下列:
public abstract class Letter 
{
public String title,receiver,content,sender,date;
Letter(String title, String receiver, String content, String sender, String date)
{
this.title= title;
this.receiver=receiver;
this.content=content;
this.sender=sender;
this.date=date;
}
}]]></Message><Linelist><line Begin="3" End="3" src="ChineseLetter"/><line Begin="3" End="3" src="EnglishLetter"/></Linelist></Error><Error tpye="繼承:使用super產生繼承物件"><Message><![CDATA[ChineseLetter和EnglishLetter已繼承Letter,子類別的建構子可以使用super函式取得父類別的物件資料
所以ChineseLetter/EnglishLetter的建構子應修改成
如下列
public class EnglishLetter extends Letter{
public EnglishLetter(String title, String receiver, String content, String sender, String date){
super(title,receiver,content,sender,date)
}
}

public class ChineseLetter extends Letter{
public ChineseLetter(String title, String receiver, String content, String sender, String date){
super(title,receiver,content,sender,date)
}
}]]></Message><Linelist><line Begin="29" End="29" src="ChineseLetter"/><line Begin="30" End="30" src="EnglishLetter"/></Linelist></Error></Errors></ErrorList>