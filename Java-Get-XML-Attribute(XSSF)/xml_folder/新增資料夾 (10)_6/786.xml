<?xml version="1.0" encoding="UTF-8" standalone="no"?><ErrorList id="786">
	
<SourceCode_List><SourceCode lines="10" name="Exam.java"><![CDATA[public class Exam extends Test { 
public Exam ( String n , String N , double s , double p ) { 
super ( n , N , s , p ) ; 
} 
public void print ( ) { 
System . out . println ( "種類：測驗" ) ; 
} 
} 

]]></SourceCode><SourceCode lines="10" name="HomeWork.java"><![CDATA[public class HomeWork extends Test { 
public HomeWork ( String n , String N , double s , double p ) { 
super ( n , N , s , p ) ; 
} 
public void print ( ) { 
System . out . println ( "種類：作業" ) ; 
} 
} 

]]></SourceCode><SourceCode lines="77" name="Main.java"><![CDATA[import java . util . Scanner ; 
public class Main { 
public static void main ( String [ ] args ) { 
Scanner scan = new Scanner ( System . in ) ; 
boolean b = true ; 
while ( b ) 
{ 
System . out . println ( "請輸入種類,0為結束(測驗、作業、心得報告)：" ) ; 
String ptype = scan . nextLine ( ) ; 
if ( ptype . equals ( "0" ) ) { 
b = false ; 
break ; 
} 
if ( ptype . equals ( "測驗" ) || ptype . equals ( "作業" ) || ptype . equals ( "心得報告" ) ) { 
System . out . println ( "請輸入學生學號：" ) ; 
String pnum = scan . nextLine ( ) ; 
System . out . println ( "請輸入學生姓名：" ) ; 
String pname = scan . nextLine ( ) ; 
System . out . println ( "請輸入成績：" ) ; 
double ps = Double . parseDouble ( scan . nextLine ( ) ) ; 
System . out . println ( "請輸入成績比重：" ) ; 
double pp = Double . parseDouble ( scan . nextLine ( ) ) ; 
String pend = null ; 
String pdis = null ; 
String pt = null ; 
String pr = null ; 
String pinfo = null ; 
String pinfo_dis = null ; 
if ( ptype . equals ( "測驗" ) ) { 
System . out . println ( "請輸入考試日期：" ) ; 
pt = scan . nextLine ( ) ; 
System . out . println ( "請輸入考試範圍：" ) ; 
pr = scan . nextLine ( ) ; 
} 
if ( ptype . equals ( "作業" ) ) { 
System . out . println ( "請輸入截止日期：" ) ; 
pend = scan . nextLine ( ) ; 
System . out . println ( "請輸入作業描述：" ) ; 
pdis = scan . nextLine ( ) ; 
} 
if ( ptype . equals ( "心得報告" ) ) { 
System . out . println ( "請輸入報告內容：" ) ; 
pinfo = scan . nextLine ( ) ; 
System . out . println ( "請輸入參考文獻：" ) ; 
pinfo_dis = scan . nextLine ( ) ; 
} 
System . out . println ( "=============" ) ; 
Test t = null ; 
System . out . println ( "" ) ; 
System . out . println ( "您輸入的是：" ) ; 
if ( ptype . equals ( "測驗" ) ) t = new Exam ( pnum , pname , ps , pp ) ; 
else if ( ptype . equals ( "作業" ) ) t = new HomeWork ( pnum , pname , ps , pp ) ; 
else if ( ptype . equals ( "心得報告" ) ) t = new Report ( pnum , pname , ps , pp ) ; 
if ( t != null ) { 
t . print ( ) ; 
if ( ptype . equals ( "測驗" ) ) { 
System . out . println ( "考試日期：" + pt ) ; 
System . out . println ( "考試範圍：" + pr ) ; 
} 
else if ( ptype . equals ( "作業" ) ) { 
System . out . println ( "截止日期：" + pend ) ; 
System . out . println ( "作業描述：" + pdis ) ; 
} 
else if ( ptype . equals ( "心得報告" ) ) { 
System . out . println ( "報告內容：" + pinfo ) ; 
System . out . println ( "參考文獻：" + pinfo_dis ) ; 
} 
System . out . println ( "" ) ; 
t . display ( ) ; 
System . out . println ( "=============" ) ; 
} 
} 
} 
} 
} 

]]></SourceCode><SourceCode lines="10" name="Report.java"><![CDATA[public class Report extends Test { 
public Report ( String n , String N , double s , double p ) { 
super ( n , N , s , p ) ; 
} 
public void print ( ) { 
System . out . println ( "種類：心得報告" ) ; 
} 
} 

]]></SourceCode><SourceCode lines="24" name="Test.java"><![CDATA[abstract public class Test { 
private String time , range , end_time , description ; 
private String number ; 
private String name ; 
private double score ; 
private double propotation ; 
String info ; 
String info_description ; 
public Test ( String n , String N , double s , double p ) { 
number = n ; 
name = N ; 
score = s ; 
propotation = p ; 
} 
public void display ( ) { 
System . out . println ( "學生學號：" + number ) ; 
System . out . println ( "學生姓名：" + name ) ; 
System . out . println ( "成績：" + score ) ; 
System . out . println ( "成績比重：" + propotation ) ; 
} 
abstract public void print ( ) ; 
} 

]]></SourceCode></SourceCode_List><Errors><Error tpye="抽象:不會分離變跟不變的部分"><Message><![CDATA[Exam:2~4,
此為子類別因此須將此類別特有之物件資料進行宣告並更改建構子，依此類別為 date , range 。
將重複類型資料藉由super從父類別進行獲取。
protected String date , range ;
public Exam ( String n , String N , String s , String p , String date , String range ) {
super ( String n , String N , String s , String p ) ;
this . date = date ;
this . range = range ;
}

HomeWork:2~4,
此為子類別因此須將此類別特有之物件資料進行宣告並更改建構子，依此類別為 deadline , description 。
將重複類型資料藉由super從父類別進行獲取。
protected String deadline , description ;
public Exam ( String n , String N , String s , String p , String deadline , String description ) {
super ( String n , String N , String s , String p ) ;
this . deadline = deadline ;
this . description = description ;
}

Report:2~4
此為子類別因此須將此類別特有之物件資料進行宣告並更改建構子，依此類別為 content , literature 。
將重複類型資料藉由super從父類別進行獲取。
protected String content , literature ;
public Exam ( String n , String N , String s , String p , String content , String literature ) {
super ( String n , String N , String s , String p ) ;
this . content = content ;
this . literature = literature ;
}]]></Message><Linelist><line Begin="2" End="4" src="Exam"/><line Begin="2" End="4" src="HomeWork"/><line Begin="2" End="4" src="Report"/></Linelist></Error></Errors></ErrorList>