<?xml version="1.0" encoding="UTF-8" standalone="no"?><ErrorList id="C:\Users\USER\Desktop\手機待儲存\專研程式碼標記錯誤\XML_Error\1.12\JavaAnnotationXMLProgram\code(正規化)\期末考題三\28\28.xml">
	
<SourceCode_List><SourceCode lines="6" name="ChineseLetter.java"><![CDATA[public class ChineseLetter extends Letter { 
public ChineseLetter ( String title , String receiver , String content , String sender , String date ) { 
super ( title , receiver , content , sender , date ) ; 
} 
} 
]]></SourceCode><SourceCode lines="6" name="EnglishLetter.java"><![CDATA[public class EnglishLetter extends Letter { 
public EnglishLetter ( String title , String receiver , String content , String sender , String date ) { 
super ( title , receiver , content , sender , date ) ; 
} 
} 
]]></SourceCode><SourceCode lines="19" name="Envelop.java"><![CDATA[public class Envelop { 
String senderAddr ; 
String receiverAddr ; 
Letter letter ; 
Envelop ( String sA , String rA , Letter letter ) { 
senderAddr = sA ; 
receiverAddr = rA ; 
letter = letter ; 
} 
String Sender = Letter . getSender ( ) ; 
String Receiver = Letter . getReceiver ( ) ; 
String Title = Letter . getTitle ( ) ; 
public void display ( ) { 
System . out . println ( "From: " + senderAddr + ", " + Sender ) ; 
System . out . println ( "To: " + receiverAddr + ", " + Receiver + " " + Title ) ; 
System . out . println ( "信件內容:" ) ; 
} 
} 
]]></SourceCode><SourceCode lines="39" name="Letter.java"><![CDATA[abstract public class Letter { 
protected static String title ; 
protected static String receiver ; 
protected static String content ; 
protected static String sender ; 
protected static String date ; 
public Letter ( String t , String r , String c , String s , String d ) { 
title = t ; 
receiver = r ; 
content = c ; 
sender = s ; 
date = d ; 
} 
public static String getSender ( ) { 
return sender ; 
} 
public static String getReceiver ( ) { 
return receiver ; 
} 
public static String getTitle ( ) { 
return title ; 
} 
public void display ( int flag ) { 
if ( flag == 1 ) { 
System . out . println ( receiver + ' ' + title + ",您好" ) ; 
System . out . println ( content ) ; 
System . out . println ( sender + " 敬上" ) ; 
System . out . println ( date ) ; 
} 
else { 
System . out . println ( "Dear " + title + " " + receiver + ',' ) ; 
System . out . println ( content ) ; 
System . out . println ( "Sincerely" ) ; 
System . out . println ( sender ) ; 
System . out . println ( date ) ; 
} 
} 
} 
]]></SourceCode><SourceCode lines="13" name="Test.java"><![CDATA[public class Test { 
public static void main ( String [ ] args ) { 
ChineseLetter lt = new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) ; 
Envelop env = new Envelop ( "Taipei" , "Kaohsiung" , lt ) ; 
env . display ( ) ; 
lt . display ( 1 ) ; 
Letter lts = new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) ; 
Envelop envs = new Envelop ( "Taipei" , "Kaohsiung" , lt ) ; 
envs . display ( ) ; 
lts . display ( 2 ) ; 
} 
} 
]]></SourceCode></SourceCode_List><Errors><Error tpye="抽象:抽象動作"><Message><![CDATA[當宣告一個使用ChineseLetter/EnglishLetter的建構子的物件時,
即可使用ChineseLetter/EnglishLetter中所覆寫得的抽象動作,
而不是使用flag的方式來分別呼叫不同的輸出
public abstract class Letter{
public abstract void display();
}
public class ChineseLetter extends Letter{
void display(){
System.out.print(getReceiver() + " " + getTitle() +",您好");
System.out.print(getContent());
System.out.print(getSender() +" 敬上");
System.out.print(getDate());
}
}
public class EnglishLetter extends Letter{
void display(){
System.out.print("Dear "+getTitle()+getReceiver()+",");
System.out.print(getContent());
System.out.print("Sincerely");
System.out.print(getSender());
System.out.print(getDate());
}
}
public class Test { 
public static void main (String[] args){
Letter lt;
Letter lt = new ChineseLetter ("教授", "王", "很高興跟您連絡", "銘哥", "2019/01/05");
lt.display(); 
Letter lts = new EnglishLetter("Professor", "Wang", "I am glad to write to you!", "J. J. Lin", "2019/01/05");
lts . display () ;
}]]></Message><Linelist><line Begin="23" End="37" src="Letter"/><line Begin="6" End="6" src="Test"/><line Begin="10" End="10" src="Test"/></Linelist></Error><Error tpye="物件:不會使用物件之間的關係"><Message><![CDATA[因為Envelope擁有Letter的letter物件資料,
所以在呼叫letter的物件動作的時候,
應呼叫letter此宣告的物件資料而不是Letter類別
String Sender = letter . getSender ( ) ; 
String Receiver = letter . getReceiver ( ) ; 
String Title = letter . getTitle ( ) ; 
]]></Message><Linelist><line Begin="10" End="12" src="ChineseLetter"/></Linelist></Error><Error tpye="物件:無法分辨物件&amp;類別的資料/動作"><Message><![CDATA[此處不需要被宣告成類別資料/動作,
當資料宣告成static靜態後就變唯一值,
在這裡需要繼承給子類別被賦予不同的值
所以只需要宣告成protected讓子類別可做存取即可。
protected String title ; 
protected String receiver ; 
protected String content ; 
protected String sender ; 
protected String date ; 
將共同物件動作寫在父類別,
宣告成public供所有類別做使用,
public abstract class Letter 
{
public String getTitle()
{
return title;
}
public String getReceiver()
{
return receiver;
}
public String getContent()
{
return content;
}
public String getSender()
{
return sender;
}
public String getDate()
{
return date;
}
}]]></Message><Linelist><line Begin="2" End="6" src="Letter"/><line Begin="14" End="22" src="Letter"/></Linelist></Error><Error tpye="物件:物件動作概念(建構子)"><Message><![CDATA[利用this的函式來讓Envelop的建構子中的變數,
參照Envelop類別中所宣告的變數
public Envelop ( String sAddr , String rAddr , Letter lt ) { 
this . sA =  senderAddr; 
this . rA = receiverAddr ; 
this . letter = letter ; 
} 
需注意參照的之間的關係,切勿搞混]]></Message><Linelist><line Begin="6" End="8" src="Envelop"/></Linelist></Error><Error tpye="變數:不了解局部變數的概念"><Message><![CDATA[按照資料封裝的原則,
在宣告一個類別的物件應加上private
表示letter物件資料是被保護在Envelop類別裡面的
例:private Letter letter;

而senderAddr,receiverAddr是Envelop類別自己所擁有的
應在變數前面加上private
例:private String senderAddr , receiverAddr;

而Envelop的建構子希望供其他類別做使用,
所以宣告成public
例:public Envelop(String senderAddr , String receiverAddr ,  Letter letter);]]></Message><Linelist><line Begin="2" End="4" src="Envelop"/><line Begin="5" End="5" src="Envelop"/></Linelist></Error></Errors></ErrorList>