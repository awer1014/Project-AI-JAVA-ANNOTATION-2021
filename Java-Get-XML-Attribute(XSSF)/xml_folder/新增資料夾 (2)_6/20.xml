<?xml version="1.0" encoding="UTF-8" standalone="no"?><ErrorList id="C:\Users\USER\Desktop\手機待儲存\專研程式碼標記錯誤\XML_Error\1.12\JavaAnnotationXMLProgram\code(正規化)\期末考題四\20\20.xml">
	
<SourceCode_List><SourceCode lines="24" name="Card.java"><![CDATA[import java . util . Arrays ; 
public class Card implements Comparable { 
static Letter [ ] list = { 
new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "20190105" ) , new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "20181101" ) , new EnglishLetter ( "Professor" , "Liu" , "I am sorry!" , "K. Ming" , "20180705" ) } 
; 
private short lists ; 
Letter letter ; 
public static String listsAsString ( short r ) { 
return list [ r ] ; 
} 
Card ( Letter letter ) { 
this . letter = letter ; 
} 
public String getDate ( ) { 
return letter . date ; 
} 
public int compareTo ( Object o ) { 
Card obj = ( Card ) o ; 
int int1 = Integer . parseInt ( this . getDate ) ; 
int int2 = Integer . parseInt ( obj . getDate ) ; 
int result = int1 - int2 ; 
} 
} 
]]></SourceCode><SourceCode lines="6" name="ChineseLetter.java"><![CDATA[public class ChineseLetter extends Letter { 
ChineseLetter ( String title , String receiver , String content , String sender , String date ) { 
super ( title , receiver , content , sender , date ) ; 
} 
} 
]]></SourceCode><SourceCode lines="6" name="EnglishLetter.java"><![CDATA[public class EnglishLetter extends Letter { 
EnglishLetter ( String title , String receiver , String content , String sender , String date ) { 
super ( title , receiver , content , sender , date ) ; 
} 
} 
]]></SourceCode><SourceCode lines="14" name="Envelop.java"><![CDATA[public class Envelop { 
String senderAddr , receiverAddr ; 
Letter letter ; 
Envelop ( String senderAddr , String receiverAddr , Letter letter ) { 
this . senderAddr = senderAddr ; 
this . receiverAddr = receiverAddr ; 
this . letter = letter ; 
} 
void display ( ) { 
System . out . println ( "From: " + senderAddr + ", " + letter . sender ) ; 
System . out . println ( "To: " + receiverAddr + ", " + letter . receiver + " " + letter . title ) ; 
} 
} 
]]></SourceCode><SourceCode lines="35" name="Letter.java"><![CDATA[abstract public class Letter { 
String title , receiver , content , sender , date ; 
Letter ( String title , String receiver , String content , String sender , String date ) { 
this . title = title ; 
this . receiver = receiver ; 
this . content = content ; 
this . sender = sender ; 
this . date = date ; 
} 
String getSender ( ) { 
return sender ; 
} 
String getReceiver ( ) { 
return receiver ; 
} 
String getDate ( ) { 
return date ; 
} 
void display ( int flage ) { 
if ( flage == 1 ) { 
System . out . println ( receiver + " " + title + ", 您好" ) ; 
System . out . println ( content ) ; 
System . out . println ( sender + " 敬上" ) ; 
System . out . println ( date ) ; 
} 
else { 
System . out . println ( "Dear " + receiver + " " + title ) ; 
System . out . println ( content ) ; 
System . out . println ( "Sincerely" ) ; 
System . out . println ( sender ) ; 
System . out . println ( date ) ; 
} 
} 
} 
]]></SourceCode><SourceCode lines="9" name="Test.java"><![CDATA[public class Test { 
public static void main ( String [ ] args ) { 
Letter lt = new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) ; 
Envelop env = new Envelop ( "Taipei" , "Kaohsiung" , lt ) ; 
env . display ( ) ; 
lt . display ( 1 ) ; 
} 
} 
]]></SourceCode></SourceCode_List><Errors><Error tpye="介面:Comparable介面"><Message><![CDATA[Comparable介面可以實做在Letter類別內
abstract public class Letter implements Comparable

因為物件資料都在Letter類別裡
而且需要用到comparable介面時
做的也只有一個物件動作
@Override public int compareTo (Object other){
Letter o = (Letter)other;
return date.compareTo(o.getDate());
}
先將原本宣告成Object的o強制轉換成Letter類別型態
這樣o就可以使用跟Letter有關的相關訊息。
如:Letter的物件資料、Letter的物件動作

因為Java的String類別也是有實作Comparable介面
也是依照原則return 1;return 0;return -1]]></Message><Linelist><line Begin="-1" End="-1" src="Card"/></Linelist></Error><Error tpye="函數:函數概念不清楚"><Message><![CDATA[此處應呼叫letter中的物件動作來回傳值
例:letter.getSender();
而不是直接呼叫letter中的物件資料
System.out.println( "From: "+ senderAddr +", "+ letter.getSender());
System.out.println( "To: "+ receiverAddr +", "+ letter.getReceiver() +" " + letter.getTitle());]]></Message><Linelist><line Begin="10" End="11" src="Envelop"/></Linelist></Error><Error tpye="抽象:抽象動作"><Message><![CDATA[當Letter類別宣告為抽象類別時
可使用子類別中所覆寫得的抽象動作,
而不是使用flag的方式來分別呼叫不同的輸出
public abstract class Letter{
public abstract void display();
}
public class ChineseLetter extends Letter{
void display(){
System.out.print(getReceiver() + " " + getTitle() +",您好");
System.out.print(getContent());
System.out.print(getSender() +" 敬上");
System.out.print(getDate());
}
}
public class EnglishLetter extends Letter{
void display(){
System.out.print("Dear "+getTitle()+getReceiver()+",");
System.out.print(getContent());
System.out.print("Sincerely");
System.out.print(getSender());
System.out.print(getDate());
}
}
public class Test { 
public static void main (String[] args){
Letter lt = new ChineseLetter ("教授", "王", "很高興跟您連絡", "銘哥", "2019/01/05");
lt.display(); 
}	
}]]></Message><Linelist><line Begin="19" End="33" src="Letter"/><line Begin="6" End="6" src="Test"/></Linelist></Error></Errors></ErrorList>