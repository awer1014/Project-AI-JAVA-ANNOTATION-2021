<?xml version="1.0" encoding="UTF-8" standalone="no"?><ErrorList id="C:\Users\USER\Desktop\手機待儲存\專研程式碼標記錯誤\XML_Error\1.12\JavaAnnotationXMLProgram\code(正規化)\期末考題四\6(x)\6.xml">
	
<SourceCode_List><SourceCode lines="35" name="ChineseLetter.java"><![CDATA[public class ChineseLetter { 
String title ; 
String receiver ; 
String content ; 
String sender ; 
String date ; 
ChineseLetter ( ) { 
} 
ChineseLetter ( String title , String receiver , String content , String sender , String date ) { 
this . title = title ; 
this . receiver = receiver ; 
this . content = content ; 
this . sender = sender ; 
this . date = date ; 
} 
void display ( ) { 
System . out . println ( receiver + " " + title + ", " + "您好" ) ; 
System . out . println ( content ) ; 
System . out . println ( sender + "敬上" ) ; 
System . out . println ( date ) ; 
} 
public String getSender ( ) { 
return this . sender ; 
} 
public String getTitle ( ) { 
return this . title ; 
} 
public String getReceiver ( ) { 
return this . receiver ; 
} 
public String getDate ( ) { 
return this . date ; 
} 
} 
]]></SourceCode><SourceCode lines="22" name="EnglishLetter.java"><![CDATA[public class EnglishLetter { 
String title ; 
String receiver ; 
String content ; 
String sender ; 
String date ; 
EnglishLetter ( String title , String receiver , String content , String sender , String date ) { 
this . title = title ; 
this . receiver = receiver ; 
this . content = content ; 
this . sender = sender ; 
this . date = date ; 
} 
void display ( ) { 
System . out . print ( "Dear " + title + receiver + "," ) ; 
System . out . print ( content ) ; 
System . out . print ( "Sincerely" ) ; 
System . out . print ( sender ) ; 
System . out . print ( date ) ; 
} 
} 
]]></SourceCode><SourceCode lines="18" name="Envelop.java"><![CDATA[
public class Envelop extends {
    String senderAddr;
    String receiverAddr;
    Letter letter;

    Envelop(String senderAddr , String receiverAddr ,  Letter letter){
    this.senderAddr=senderAddr;
    this.receiverAddr=receiverAddr;
    this.letter=letter;
    }
    void display(){
    System.out.println( "From: "+ senderAddr +", "+ getSender());
    System.out.println( "To: "+ receiverAddr +", "+ getReceiver() +" " + getTitle());
    
    }
}
]]></SourceCode><SourceCode lines="6" name="Letter.java"><![CDATA[abstract public class Letter { 
Letter ( ) { 
} 
abstract public String getDate ( ) ; 
} 
]]></SourceCode><SourceCode lines="22" name="theForth.java"><![CDATA[import java . util . Arrays ; 
public class theForth implements Comparable { 
private String date ; 
Letter [ ] list ; 
public String getDate ( ) { 
return date ; 
} 
@ Override ; 
public int compareTo ( Object o ) { 
Letter obj = ( Letter ) o ; 
if ( this . getDate ( ) . compareTo ( obj . getDate ( ) ) < 0 ) { 
return 1 ; 
} 
else if ( this . getDate ( ) . compareTo ( obj . getDate ( ) ) < 0 ) { 
return - 1 ; 
} 
else { 
return 2 ; 
} 
} 
} 
]]></SourceCode></SourceCode_List><Errors><Error tpye="介面:Comparable介面"><Message><![CDATA[Comparable介面可以實做在Letter類別內
所以不需要多編寫一個類別去做compareTo
abstract public class Letter implements Comparable

因為物件資料都在Letter類別裡
而且需要用到comparable介面時
做的也只有一個物件動作
@Override public int compareTo (Object other){
Letter o = (Letter)other;
return date.compareTo(o.getDate());
}
先將原本宣告成Object的o強制轉換成Letter類別型態
這樣o就可以使用跟Letter有關的相關訊息。
如:Letter的物件資料、Letter的物件動作

因為Java的String類別也是有實作Comparable介面
也是依照原則return 1;return 0;return -1]]></Message><Linelist><line Begin="-1" End="-1" src="theForth"/></Linelist></Error><Error tpye="抽象:不會分離變跟不變的部分"><Message><![CDATA[物件資料是可以被子類別繼承的,只需在Letter宣告一次即可
public abstract class Letter 
{
public String title,receiver,content,sender,date;
Letter(String title, String receiver, String content, String sender, String date)
{
this.title= title;
this.receiver=receiver;
this.content=content;
this.sender=sender;
this.date=date;
}
}
子類別的建構子再利用super做資料傳遞給上一層
public class EnglishLetter extends Letter
{
public EnglishLetter(String title, String receiver, String content, String sender, String date)
{
super(title,receiver,content,sender,date);
}
}

public class ChineseLetter extends Letter
{
public ChineseLetter(String title, String receiver, String content, String sender, String date)
{
super(title,receiver,content,sender,date);
}
}
另一方面,將共同物件寫在父類別,
宣告成public供所有類別做使用,
子類別就不用再宣告一次物件動作
public abstract class Letter 
{
public String getTitle()
{
return title;
}
public String getReceiver()
{
return receiver;
}
public String getContent()
{
return content;
}
public String getSender()
{
return sender;
}
public String getDate()
{
return date;
}
}]]></Message><Linelist><line Begin="2" End="6" src="ChineseLetter"/><line Begin="9" End="15" src="ChineseLetter"/><line Begin="22" End="33" src="ChineseLetter"/><line Begin="2" End="6" src="EnglishLetter"/><line Begin="7" End="13" src="EnglishLetter"/></Linelist></Error><Error tpye="抽象:抽象動作"><Message><![CDATA[在Letter宣告抽象動作,讓子類別去做覆寫
public abstract class Letter
{
public abstract void display();
}
public class ChineseLetter extends Letter
{
void display(){
System.out.print(getReceiver() + " " + getTitle() +",您好");
System.out.print(getContent());
System.out.print(getSender() +" 敬上");
System.out.print(getDate());
}
}
public class EnglishLetter extends Letter
{
void display(){
System.out.print("Dear "+getTitle()+getReceiver()+",");
System.out.print(getContent());
System.out.print("Sincerely");
System.out.print(getSender());
System.out.print(getDate());
}
}]]></Message><Linelist><line Begin="16" End="21" src="ChineseLetter"/><line Begin="14" End="20" src="EnglishLetter"/></Linelist></Error><Error tpye="物件:不會使用物件之間的關係"><Message><![CDATA[因為Envelope擁有Letter的letter物件資料
所以在呼叫letter的物件動作的時候應加上
System.out.println( "From: "+ senderAddr +", "+ letter.getSender());
System.out.println( "To: "+ receiverAddr +", "+ letter.getReceiver() +" " + letter.getTitle());]]></Message><Linelist><line Begin="13" End="14" src="Envelop"/></Linelist></Error><Error tpye="繼承:使用繼承"><Message><![CDATA[ChineseLetter與EnglishLetter屬於子類別,
需繼承Letter父類別
public class ChineseLetter extends Letter

public class EnglishLetter extends Letter]]></Message><Linelist><line Begin="1" End="1" src="ChineseLetter"/><line Begin="1" End="1" src="EnglishLetter"/></Linelist></Error><Error tpye="變數:不了解局部變數的概念"><Message><![CDATA[按照資料封裝的原則,
在宣告一個類別的物件應加上private
表示letter物件資料是被保護在Envelop類別裡面的
例:private Letter letter;

而senderAddr,receiverAddr是Envelop類別自己所擁有的
應在變數前面加上private
例:private String senderAddr , receiverAddr;

Envelop的display()物件動作
會呼叫到Letter類別的letter物件中的物件動作,
所以宣告成public
例:public void display();]]></Message><Linelist><line Begin="3" End="5" src="Envelop"/><line Begin="12" End="12" src="Envelop"/></Linelist></Error></Errors></ErrorList>