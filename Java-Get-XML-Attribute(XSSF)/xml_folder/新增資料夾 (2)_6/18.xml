<?xml version="1.0" encoding="UTF-8" standalone="no"?><ErrorList id="C:\Users\USER\Desktop\手機待儲存\專研程式碼標記錯誤\XML_Error\1.12\JavaAnnotationXMLProgram\code(正規化)\期末考題三\18\18.xml">
	
<SourceCode_List><SourceCode lines="6" name="ChineseLetter.java"><![CDATA[public class ChineseLetter extends Letter { 
ChineseLetter ( String title , String receiver , String content , String sender , String date ) { 
super ( title , receiver , content , sender , date ) ; 
} 
} 
]]></SourceCode><SourceCode lines="6" name="EnglishLetter.java"><![CDATA[public class EnglishLetter extends Letter { 
EnglishLetter ( String title , String receiver , String content , String sender , String date ) { 
super ( title , receiver , content , sender , date ) ; 
} 
} 
]]></SourceCode><SourceCode lines="14" name="Envelop.java"><![CDATA[public class Envelop { 
String senderAddr , receiverAddr ; 
Letter letter ; 
Envelop ( String senderAddr , String receiverAddr , Letter letter ) { 
this . senderAddr = senderAddr ; 
this . receiverAddr = receiverAddr ; 
this . letter = letter ; 
} 
void display ( ) { 
System . out . println ( "From: " + senderAddr + ", " + letter . sender ) ; 
System . out . println ( "To: " + receiverAddr + ", " + letter . receiver + " " + letter . title ) ; 
} 
} 
]]></SourceCode><SourceCode lines="35" name="Letter.java"><![CDATA[abstract public class Letter { 
String title , receiver , content , sender , date ; 
Letter ( String title , String receiver , String content , String sender , String date ) { 
this . title = title ; 
this . receiver = receiver ; 
this . content = content ; 
this . sender = sender ; 
this . date = date ; 
} 
String getSender ( ) { 
return sender ; 
} 
String getReceiver ( ) { 
return receiver ; 
} 
String getDate ( ) { 
return date ; 
} 
void display ( int flage ) { 
if ( flage == 1 ) { 
System . out . println ( receiver + " " + title + ", 您好" ) ; 
System . out . println ( content ) ; 
System . out . println ( sender + " 敬上" ) ; 
System . out . println ( date ) ; 
} 
else { 
System . out . println ( "Dear " + receiver + " " + title ) ; 
System . out . println ( content ) ; 
System . out . println ( "Sincerely" ) ; 
System . out . println ( sender ) ; 
System . out . println ( date ) ; 
} 
} 
} 
]]></SourceCode><SourceCode lines="9" name="Test.java"><![CDATA[public class Test { 
public static void main ( String [ ] args ) { 
Letter lt = new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) ; 
Envelop env = new Envelop ( "Taipei" , "Kaohsiung" , lt ) ; 
env . display ( ) ; 
lt . display ( 1 ) ; 
} 
} 
]]></SourceCode></SourceCode_List><Errors><Error tpye="抽象:抽象動作"><Message><![CDATA[當宣告一個使用ChineseLetter/EnglishLetter的建構子的物件時,
即可使用ChineseLetter/EnglishLetter中所覆寫得的抽象動作,
而不是使用flag的方式來分別呼叫不同的輸出
public abstract class Letter{
public abstract void display();
}
public class ChineseLetter extends Letter{
void display(){
System.out.print(getReceiver() + " " + getTitle() +",您好");
System.out.print(getContent());
System.out.print(getSender() +" 敬上");
System.out.print(getDate());
}
}
public class EnglishLetter extends Letter{
void display(){
System.out.print("Dear "+getTitle()+getReceiver()+",");
System.out.print(getContent());
System.out.print("Sincerely");
System.out.print(getSender());
System.out.print(getDate());
}
}
public class Test { 
public static void main (String[] args){
Letter lt;
Letter lt = new ChineseLetter ("教授", "王", "很高興跟您連絡", "銘哥", "2019/01/05");
lt.display(); 
Letter lt = new EnglishLetter("Professor", "Wang", "I am glad to write to you!", "J. J. Lin", "2019/01/05");
lt.display();
}	
}]]></Message><Linelist><line Begin="19" End="33" src="Letter"/><line Begin="6" End="6" src="Test"/></Linelist></Error><Error tpye="物件:不會使用物件之間的關係"><Message><![CDATA[Envelope擁有Letter的letter物件資料,
所以是在呼叫letter的物件動作回傳參數,
而不是呼叫letter的物件資料
System.out.println( "From: "+ senderAddr +", "+ letter.getSender());
System.out.println( "To: "+ receiverAddr +", "+ letter.getReceiver() +" " + letter.getTitle());]]></Message><Linelist><line Begin="10" End="11" src="Envelop"/></Linelist></Error><Error tpye="物件:物件資料/物件動作概念"><Message><![CDATA[將共同物件寫在父類別,
宣告成public供所有類別做使用,
子類別就不用再宣告一次物件動作
public abstract class Letter 
{
public String getTitle()
{
return title;
}
public String getReceiver()
{
return receiver;
}
public String getContent()
{
return content;
}
public String getSender()
{
return sender;
}
public String getDate()
{
return date;
}
}]]></Message><Linelist><line Begin="10" End="18" src="Letter"/></Linelist></Error><Error tpye="變數:不了解局部變數的概念"><Message><![CDATA[按照資料封裝的原則,
在宣告一個類別的物件應加上private
表示letter物件資料是被保護在Envelop類別裡面的
例:private Letter letter;

而senderAddr,receiverAddr是Envelop類別自己所擁有的
應在變數前面加上private
例:private String senderAddr , receiverAddr;

Letter父類別中的title,receiver,content,sender,date
供子類別使用所以應宣告成public
例:public String title , receiver , content , sender , date ;

而ChineseLetter/Envelop的建構子希望供其他類別做使用,
所以宣告成public
例:
public ChineseLetter ( String title , String receiver , String content , String sender , String date ) ; 
public EnglishLetter ( String title , String receiver , String content , String sender , String date ) ;
public Envelop(String senderAddr , String receiverAddr ,  Letter letter);

Envelop的display()物件動作
會呼叫到Letter類別的letter物件中的物件動作,
所以宣告成public
例:public void display();]]></Message><Linelist><line Begin="2" End="2" src="ChineseLetter"/><line Begin="2" End="2" src="EnglishLetter"/><line Begin="2" End="4" src="Envelop"/><line Begin="9" End="9" src="Envelop"/><line Begin="2" End="4" src="Letter"/></Linelist></Error></Errors></ErrorList>