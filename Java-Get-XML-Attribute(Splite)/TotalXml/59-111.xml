<ErrorList id="C:\Users\user\Desktop\XML_Error_1.1\new\59\59.xml">
	
<SourceCode_List><SourceCode lines="30" name="ChineseLetter.java">public class ChineseLetter extends Letter { 
protected String title ; 
protected String receiver ; 
protected String content ; 
protected String sender ; 
protected String date ; 
public void getSender ( ) { 
this . sender = sender ; 
} 
public void getReceiver ( ) { 
this . receiver = receiver ; 
} 
public void getDate ( ) { 
this . date = date ; 
} 
ChineseLetter ( String title , String receiver , String content , String sender , String date ) { 
this . title = title ; 
this . receiver = receiver ; 
this . sender = sender ; 
this . content = content ; 
this . date = date ; 
} 
void display ( ) { 
System . out . println ( receiver + "  " + title + "  您好!!" ) ; 
System . out . println ( content ) ; 
System . out . println ( sender + "      敬上!!" ) ; 
System . out . println ( date ) ; 
} 
} 
</SourceCode><SourceCode lines="24" name="EnglishLetter.java">public class EnglishLetter extends Letter { 
protected String title ; 
protected String receiver ; 
protected String content ; 
protected String sender ; 
protected String date ; 
public void getSender ( ) { 
this . sender = sender ; 
} 
public void getReceiver ( ) { 
this . receiver = receiver ; 
} 
public void getDate ( ) { 
this . date = date ; 
} 
EnglishLetter ( String title , String receiver , String content , String sender , String date ) { 
this . title = title ; 
this . receiver = receiver ; 
this . sender = sender ; 
this . content = content ; 
this . date = date ; 
} 
} 
</SourceCode><SourceCode lines="9" name="Letter.java">public abstract class Letter { 
public static void main ( String [ ] args ) { 
Letter lt = new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) ; 
Letter lte = new EnglishLetter ( "Professor" , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) ; 
ChineseLetter . display ( ) ; 
EnglishLetter . display ( ) ; 
} 
} 
</SourceCode></SourceCode_List><Errors><Error tpye="抽象:不會分離變跟不變的部分"><Message>共同的物件資料/動作是可以被子類別繼承的，只需在父類別宣告一次即可。各自不同的物件資料/動作則由各子類別宣告即可。
例如，
ChineseLetter和EnglishLetter類別的
共同資料，如title，receiver，...可放到父類別
Letter中，並宣告為protected。</Message><Linelist><line Begin="24" End="28" src="ChineseLetter" /><line Begin="2" End="2" src="EnglishLetter" /><line Begin="10" End="11" src="EnglishLetter" /><line Begin="18" End="19" src="EnglishLetter" /><line Begin="2" End="4" src="ChineseLetter" /><line Begin="11" End="16" src="ChineseLetter" /><line Begin="12" End="17" src="EnglishLetter" /><line Begin="20" End="22" src="EnglishLetter" /><line Begin="3" End="9" src="EnglishLetter" /><line Begin="17" End="23" src="ChineseLetter" /></Linelist></Error><Error tpye="抽象:抽象動作"><Message>抽象動作是抽象類別裡面的物件動作，只宣告函式名稱以及參數列型態，沒有實質的函式內容。實際的函式內容則由子類別來實踐並加以覆寫，進而完成物件動作的多型功能。

本程式Letter類別的display()動作應隨不同的的子類別(ChineseLetter和EnglishLetter)有不同的變化，因此，在Letter類別須宣告為抽象動作，
例如:
public abstract void display ( ) ;
而ChineseLetter類別和EnglishLetter類別則分別寫各自的display()函式。</Message><Linelist><line Begin="2" End="7" src="Letter" /></Linelist></Error></Errors></ErrorList>