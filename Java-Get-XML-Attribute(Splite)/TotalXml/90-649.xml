<ErrorList id="C:\Users\user\Desktop\XML_Error_1.1\new\90\90.xml">
	
<SourceCode_List><SourceCode lines="13" name="Chineseletter.java">public class Chineseletter extends letter { 
public Chineseletter ( String title , String receiver , String content , String sender , String data ) { 
super ( title , receiver , content , sender , data ) ; 
} 
public void display ( ) { 
System . out . println ( "title" + title ) ; 
System . out . println ( "receiver" + receiver ) ; 
System . out . println ( "content" + content ) ; 
System . out . println ( "sender" + sender ) ; 
System . out . println ( "data" + data ) ; 
} 
} 
</SourceCode><SourceCode lines="13" name="Englishletter.java">public class Englishletter extends letter { 
public Englishletter ( String title , String receiver , String content , String sender , String data ) { 
super ( title , receiver , content , sender , data ) ; 
} 
public void display ( ) { 
System . out . println ( "title" + title ) ; 
System . out . println ( "receiver" + receiver ) ; 
System . out . println ( "content" + content ) ; 
System . out . println ( "sender" + sender ) ; 
System . out . println ( "data" + data ) ; 
} 
} 
</SourceCode><SourceCode lines="48" name="letter.java">public abstract class letter { 
String title , receiver , content , sender , data ; 
public letter ( String title , String receiver , String content , String sender , String data ) { 
title = title ; 
receiver = receiver ; 
content = content ; 
sender = sender ; 
data = data ; 
} 
String getitle ( ) { 
return title ; 
} 
void setTitle ( ) { 
title = title ; 
} 
String getreceiver ( ) { 
return receiver ; 
} 
void setReceiver ( ) { 
receiver = receiver ; 
} 
String getcontent ( ) { 
return content ; 
} 
void setcontent ( ) { 
content = content ; 
} 
String getsender ( ) { 
return sender ; 
} 
void setsender ( ) { 
sender = sender ; 
} 
String getdata ( ) { 
return data ; 
} 
void setdata ( ) { 
data = data ; 
} 
public void display ( ) { 
System . out . println ( "title" + title ) ; 
System . out . println ( "receiver" + receiver ) ; 
System . out . println ( "content" + content ) ; 
System . out . println ( "sender" + sender ) ; 
System . out . println ( "data" + data ) ; 
} 
} 
</SourceCode></SourceCode_List><Errors><Error tpye="抽象:抽象動作"><Message>抽象動作是抽象類別裡面的物件動作，只宣告函式名稱以及參數列型態，沒有實質的函式內容。實際的函式內容則由子類別來實踐並加以覆寫，進而完成物件動作的多型功能。

本程式Letter類別的display()動作應隨不同的的子類別(ChineseLetter和EnglishLetter)有不同的變化，因此，在Letter類別須宣告為抽象動作，
例如:
public abstract void display ( ) ;
而ChineseLetter類別和EnglishLetter類別則分別寫各自的display()函式。</Message><Linelist><line Begin="11" End="17" src="letter" /></Linelist></Error></Errors></ErrorList>