<ErrorList id="F:\個人資料夾\專研\debug\死去\NormalizedCODES\790\790.xml">
	
<SourceCode_List><SourceCode lines="18" name="Evaluation.java">abstract public class Evaluation { 
protected String stuno ; 
protected String name ; 
protected double score , rate ; 
public Evaluation ( String stuno , String name , double score , double rate , String x , String y ) { 
this . stuno = stuno ; 
this . name = name ; 
this . score = score ; 
this . rate = rate ; 
} 
double getScore ( ) { 
return score ; 
} 
double getRate ( ) { 
return rate ; 
} 
} 
</SourceCode><SourceCode lines="12" name="Exam.java">import java . util . * ; 
public class Exam extends Evaluation { 
public Exam ( String stuno , String name , double score , double rate , String date , String range ) { 
super ( stuno , name , score , rate , date , range ) ; 
} 
void print ( ) { 
System . out . println ( "您輸入的是:" ) ; 
System . out . println ( "種類:測驗" ) ; 
System . out . println ( "學生學號:" + stuno ) ; 
} 
} 
</SourceCode><SourceCode lines="7" name="Homework.java">import java . util . * ; 
public class Homework extends Evaluation { 
public Homework ( String stuno , String name , double score , double rate , String endtime , String work ) { 
super ( stuno , name , score , rate , endtime , work ) ; 
} 
} 
</SourceCode><SourceCode lines="6" name="Report.java">public class Report extends Evaluation { 
public Report ( String stuno , String name , double score , double rate , String content , String book ) { 
super ( stuno , name , score , rate , content , book ) ; 
} 
} 
</SourceCode><SourceCode lines="46" name="Test.java">import java . util . * ; 
public class Test { 
static Scanner scanner = new Scanner ( System . in ) ; 
public static void main ( String [ ] args ) { 
int c = 0 ; 
String sname , sstuno ; 
double sscore , srate ; 
System . out . print ( "請輸入種類 1(測驗),2(作業),3(心得報告):" ) ; 
c = scanner . nextInt ( ) ; 
System . out . print ( "請輸入學生學號:" ) ; 
sstuno = scanner . nextLine ( ) ; 
System . out . print ( "請輸入學生姓名:" ) ; 
sname = scanner . nextLine ( ) ; 
System . out . print ( "請輸入成績:" ) ; 
sscore = scanner . nextDouble ( ) ; 
scanner . nextLine ( ) ; 
System . out . print ( "請輸入成績比重:" ) ; 
srate = scanner . nextDouble ( ) ; 
scanner . nextLine ( ) ; 
if ( c == 1 ) { 
String ddate , rrange ; 
System . out . print ( "請輸入考試日期:" ) ; 
ddate = scanner . nextLine ( ) ; 
System . out . print ( "請輸入考試範圍:" ) ; 
rrange = scanner . nextLine ( ) ; 
Evaluation ev = new Exam ( sstuno , sname , sscore , srate , ddate , rrange ) ; 
} 
if ( c == 2 ) { 
String endtime , work ; 
System . out . print ( "請輸入截止日期:" ) ; 
endtime = scanner . nextLine ( ) ; 
System . out . print ( "請輸入作業描述:" ) ; 
work = scanner . nextLine ( ) ; 
Evaluation ev = new Homework ( sstuno , sname , sscore , srate , endtime , work ) ; 
} 
if ( c == 3 ) { 
String content , book ; 
System . out . print ( "請輸入報告內容:" ) ; 
content = scanner . nextLine ( ) ; 
System . out . print ( "請輸入參考文獻:" ) ; 
book = scanner . nextLine ( ) ; 
Evaluation ev = new Report ( sstuno , sname , sscore , srate , content , book ) ; 
} 
} 
} 
</SourceCode></SourceCode_List><Errors><Error tpye="抽象:不會分離變跟不變的部分"><Message>共同的物件資料/動作是可以被子類別繼承的，只需在父類別宣告一次即可。各自不同的物件資料/動作則由各子類別宣告即可。
例如:
stuno, name, score, date為Evaluation父類別的物件資料。

共同的物件資料/動作是可以被子類別繼承的，只需在父類別宣告一次即可。各自不同的物件資料/動作則由各子類別宣告即可。
例如:
range, date為Exam子類別的物件資料。

共同的物件資料/動作是可以被子類別繼承的，只需在父類別宣告一次即可。各自不同的物件資料/動作則由各子類別宣告即可。
例如:
endtime, work為Homework子類別的物件資料。

共同的物件資料/動作是可以被子類別繼承的，只需在父類別宣告一次即可。各自不同的物件資料/動作則由各子類別宣告即可。
例如:
content, book為Report子類別的物件資料。</Message><Linelist><line Begin="2" End="7" src="Evaluation" /><line Begin="3" End="5" src="Exam" /><line Begin="3" End="5" src="Homework" /><line Begin="3" End="5" src="Report" /></Linelist></Error><Error tpye="抽象:抽象動作"><Message>抽象動作是抽象類別裡面的物件動作，只宣告函式名稱以及參數列型態，沒有實質的函式內容。
實際的函式內容則由子類別來實踐並加以覆寫，進而完成物件動作的多型功能。
本程式的getScore( ), getRate( )動作應隨不同的的子類別有不同的變化，因此須宣告為抽象動作，例如:
abstract double getScore ( ) ;</Message><Linelist><line Begin="8" End="10" src="Evaluation" /><line Begin="12" End="14" src="Evaluation" /></Linelist></Error></Errors></ErrorList>