<ErrorList id="D:\Users\楊子霆\Desktop\Lesson\專題\擴增 修改版\正規化\8\8.xml">
	
<SourceCode_List><SourceCode lines="12" name="ChineseLetter.java">public class ChineseLetter extends Letter { 
public ChineseLetter ( String t , String r , String c , String s , String d ) { 
super ( t , r , c , s , d ) ; 
} 
public void display ( ) { 
System . out . println ( receiver + title + ", 您好" ) ; 
System . out . println ( content ) ; 
System . out . println ( sender ) ; 
System . out . println ( date ) ; 
} 
} 
</SourceCode><SourceCode lines="13" name="EnglishLetter.java">public class EnglishLetter extends Letter { 
public EnglishLetter ( String r , String t , String c , String s , String d ) { 
super ( r , t , c , s , d ) ; 
} 
public void display ( ) { 
System . out . println ( "Dear " + title + receiver + "," ) ; 
System . out . println ( content ) ; 
System . out . println ( "Sincerely" ) ; 
System . out . println ( sender ) ; 
System . out . println ( date ) ; 
} 
} 
</SourceCode><SourceCode lines="15" name="Envelop.java">public class Envelop { 
String senderAddr , receiverAddr , sender , receiver , title ; 
Letter letter ; 
public Envelop ( String sAddr , String rAddr , Letter lt ) { 
senderAddr = sAddr ; 
receiverAddr = rAddr ; 
letter = lt ; 
} 
public void Envelopdisplay ( ) { 
System . out . println ( "From: " + senderAddr + sender ) ; 
System . out . println ( "To: " + receiverAddr + receiver ) ; 
System . out . println ( "信件內容:" ) ; 
} 
} 
</SourceCode><SourceCode lines="18" name="Letter.java">abstract public class Letter { 
protected String title , receiver , content , sender , date ; 
public Letter ( String t , String r , String c , String s , String d ) { 
title = t ; 
receiver = r ; 
content = c ; 
sender = s ; 
date = d ; 
} 
public void display ( ) { 
System . out . println ( "Dear " + title + receiver + "," ) ; 
System . out . println ( content ) ; 
System . out . println ( "Sincerely" ) ; 
System . out . println ( sender ) ; 
System . out . println ( date ) ; 
} 
} 
</SourceCode><SourceCode lines="16" name="main.java">public class main { 
public static void main ( String [ ] args ) { 
Letter itChinese , itEnglish ; 
itChinese = new ChineseLetter ( "教授" , "王" , "很高興跟您連絡" , "銘哥" , "2019/01/05" ) ; 
itEnglish = new EnglishLetter ( "Professor " , "Wang" , "I am glad to write to you!" , "J. J. Lin" , "2019/01/05" ) ; 
Envelop env = new Envelop ( "Taipei" , "Kaohsiung" , itChinese ) ; 
System . out . println ( "==================以下為第三題和第一題" ) ; 
env . Envelopdisplay ( ) ; 
itChinese . display ( ) ; 
System . out . println ( "==================以下為第二題" ) ; 
itChinese . display ( ) ; 
System . out . println ( "" ) ; 
itEnglish . display ( ) ; 
} 
} 
</SourceCode></SourceCode_List><Errors><Error tpye="抽象:抽象動作"><Message>抽象動作是抽象類別裡面的物件動作，只宣告函式名稱以及參數列型態，沒有實質的函式內容。實際的函式內容則由子類別來實踐並加以覆寫，進而完成物件動作的多型功能。</Message><Linelist><line Begin="2" End="7" src="ChineseLetter" /><line Begin="5" End="11" src="EnglishLetter" /><line Begin="2" End="8" src="Letter" /></Linelist></Error><Error tpye="物件:不會使用物件之間的關係"><Message>兩物件之間的關係經常可利用一物件擁有另一物件來實踐。
因為Envelope擁有Letter的letter物件資料，所以不用宣告letter物件中的String sender , receiver , title;，而在呼叫letter的物件動作的時候應加上:
System.out.println( "From: "+ senderAddr +", "+ letter.getSender());
System.out.println( "To: "+ receiverAddr +", "+ letter.getReceiver() +" " + letter.getTitle());</Message><Linelist><line Begin="8" End="8" src="Envelop" /><line Begin="4" End="5" src="Envelop" /></Linelist></Error></Errors></ErrorList>