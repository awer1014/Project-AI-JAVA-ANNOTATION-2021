<ErrorList id="C:\Users\a2744\Desktop\專研\專研JAVA\工具\標註程式 NI99A Extreme Version\NormalizedCODES\778\778.xml">
	
<SourceCode_List><SourceCode lines="21" name="Evaluation.java">import java . util . * ; 
public class Evaluation { 
protected String type , num , name ; 
protected double grade , pgrade ; 
Evaluation ( String stype , String Snum , String Sname , double Sgrade , double Spgrade ) { 
type = stype ; 
num = Snum ; 
name = Sname ; 
grade = Sgrade ; 
pgrade = Spgrade ; 
} 
void print ( ) { 
System . out . println ( "您輸入的是：" ) ; 
System . out . println ( "種類：" + type ) ; 
System . out . println ( "學生學號：" + num ) ; 
System . out . println ( "學生姓名：" + name ) ; 
System . out . println ( "成績：" + grade ) ; 
System . out . println ( "成績比重：" + pgrade ) ; 
} 
} 
</SourceCode><SourceCode lines="11" name="Exam.java">public class Exam extends Evaluation { 
public Exam ( String stype , String Snum , String Sname , double Sgrade , double Spgrade ) { 
super ( stype , Snum , Sname , Sgrade , Spgrade ) ; 
} 
String tdate , trange ; 
void Eprint ( ) { 
System . out . println ( "考試日期: " + tdate ) ; 
System . out . println ( "考試範圍: " + trange ) ; 
} 
} 
</SourceCode><SourceCode lines="11" name="HomeWork.java">public class HomeWork extends Evaluation { 
public HomeWork ( String stype , String Snum , String Sname , double Sgrade , double Spgrade ) { 
super ( stype , Snum , Sname , Sgrade , Spgrade ) ; 
} 
String odate , des ; 
void Hprint ( ) { 
System . out . println ( "截止日期: " + odate ) ; 
System . out . println ( "作業描述: " + des ) ; 
} 
} 
</SourceCode><SourceCode lines="11" name="Report.java">public class Report extends Evaluation { 
public Report ( String stype , String Snum , String Sname , double Sgrade , double Spgrade ) { 
super ( stype , Snum , Sname , Sgrade , Spgrade ) ; 
} 
String rep , bok ; 
void Rprint ( ) { 
System . out . println ( "報告內容: " + rep ) ; 
System . out . println ( "參考文獻: " + bok ) ; 
} 
} 
</SourceCode><SourceCode lines="48" name="test.java">import java . util . * ; 
public class test { 
public static void main ( String [ ] args ) { 
Scanner sc = new Scanner ( System . in ) ; 
String type , Snum , Sname ; 
double Sgrade , Spgrade ; 
System . out . print ( "請輸入種類 1(測驗), 2(作業), 3(心得報告): " ) ; 
type = sc . nextLine ( ) ; 
System . out . print ( "請輸入學生學號: " ) ; 
Snum = sc . nextLine ( ) ; 
System . out . print ( "請輸入學生姓名: " ) ; 
Sname = sc . nextLine ( ) ; 
System . out . print ( "請輸入成績: " ) ; 
Sgrade = sc . nextDouble ( ) ; 
System . out . print ( "請輸入成績比重: " ) ; 
Spgrade = sc . nextDouble ( ) ; 
while ( true ) { 
String tdate , trange , odate , des , rep , bok ; 
if ( type . equals ( "1" ) ) { 
System . out . println ( "請輸入考試日期: " ) ; 
tdate = sc . nextLine ( ) ; 
System . out . println ( "請輸入考試範圍: " ) ; 
trange = sc . nextLine ( ) ; 
} 
else if ( type . equals ( "2" ) ) { 
System . out . println ( "請輸入截止日期: " ) ; 
odate = sc . nextLine ( ) ; 
System . out . println ( "請輸入作業描述: " ) ; 
des = sc . nextLine ( ) ; 
} 
else if ( type . equals ( "3" ) ) { 
System . out . println ( "請輸入報告內容: " ) ; 
rep = sc . nextLine ( ) ; 
System . out . println ( "請輸入參考文獻: " ) ; 
bok = sc . nextLine ( ) ; 
} 
} 
Evaluation eval = null ; 
if ( type . equals ( "1" ) ) 
eval = new Exam ( type , Snum , Sname , Sgrade , Spgrade ) ; 
else if ( type . equals ( "2" ) ) 
eval = new HomeWork ( type , Snum , Sname , Sgrade , Spgrade ) ; 
else if ( type . equals ( "3" ) ) 
eval = new Report ( type , Snum , Sname , Sgrade , Spgrade ) ; 
eval . print ( ) ; 
} 
} 
</SourceCode></SourceCode_List><Errors><Error tpye="抽象:抽象動作"><Message>抽象動作是抽象類別裡面的物件動作，只宣告函式名稱以及參數列型態，沒有實質的函式內容。
實際的函式內容則由子類別來實踐並加以覆寫，進而完成物件動作的多型功能。
本程式的print()動作應隨不同的的子類別有不同的變化，因此須宣告為抽象動作，例如:
public abstract void print ( ) ;</Message><Linelist><line Begin="3" End="3" src="Evaluation" /></Linelist></Error><Error tpye="抽象:繼承資料或動作"><Message>抽象類別須加上abstract關鍵字宣告類別。就像一般的父類別，其資料與動作可以由子類別繼承。
抽象類別也扮演物件導向多型的重要角色，抽象類別變數可以承接不同的子類別物件，展現不同的行為。
例如，
public abstract class Evaluation {...}</Message><Linelist><line Begin="2" End="2" src="Evaluation" /></Linelist></Error><Error tpye="抽象:覆寫抽象動作"><Message>抽象動作實際的函式內容是由子類別來實踐並加以覆寫，進而完成物件動作的多型功能。
注意:子類別函式的存取權限層級不能小於父類別函式的存取權限層級。
例如:本程式中各子類別應該實作其print()函式內容，以覆寫父類別的print()抽象動作。不需要另寫 Eprint ( ) ， Hprint ( ) ，以及 Rprint ( ) 。</Message><Linelist><line Begin="5" End="8" src="Exam" /><line Begin="5" End="8" src="HomeWork" /><line Begin="2" End="5" src="Report" /></Linelist></Error></Errors></ErrorList>