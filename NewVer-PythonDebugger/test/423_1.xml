<ErrorList id="D:\Users\楊子霆\Desktop\Lesson\專題\擴增 修改版\正規化(淯雯)\423\423.xml">
	
<SourceCode_List><SourceCode lines="14" name="Keeper.java">import java . util . Scanner ; 
public class Keeper { 
String id ; 
String tel ; 
public Keeper ( String i , String t ) { 
this . id = i ; 
this . tel = t ; 
} 
public void display ( String i , String t ) { 
System . out . println ( "飼主名稱: " + i ) ; 
System . out . println ( "飼主電話: " + t ) ; 
} 
} 
</SourceCode><SourceCode lines="46" name="Pet.java">import java . util . Scanner ; 
public class Pet { 
static int count ; 
String pid ; 
String name ; 
String type ; 
public void speak ( String t ) { 
if ( t == "貓" ) 
System . out . println ( "喵喵!" ) ; 
else if ( t == "狗" ) 
System . out . println ( "汪汪!" ) ; 
} 
public void display ( String p , String n , String t ) { 
System . out . println ( "寵物編號: " + p ) ; 
System . out . println ( "寵物名稱: " + n ) ; 
System . out . println ( "寵物種類: " + t ) ; 
} 
public Pet ( String p , String n , String t ) { 
this . type = t ; 
this . pid = p ; 
this . name = n ; 
} 
public static void main ( String [ ] args ) { 
System . out . println ( "請輸入寵物種類: " ) ; 
Scanner q1 = new Scanner ( System . in ) ; 
String q = q1 . nextLine ( ) ; 
System . out . println ( "請輸入寵物編號: " ) ; 
Scanner w1 = new Scanner ( System . in ) ; 
String w = w1 . nextLine ( ) ; 
System . out . println ( "請輸入寵物名稱: " ) ; 
Scanner e1 = new Scanner ( System . in ) ; 
String e = e1 . nextLine ( ) ; 
System . out . println ( "請輸入飼主身分證字號: " ) ; 
Scanner r1 = new Scanner ( System . in ) ; 
String r = r1 . nextLine ( ) ; 
System . out . println ( "請輸入飼主電話: " ) ; 
Scanner t1 = new Scanner ( System . in ) ; 
String t = t1 . nextLine ( ) ; 
System . out . println ( "您的輸入是: " ) ; 
Pet p1 = new Pet ( w , e , q ) ; 
Keeper k1 = new Keeper ( r , t ) ; 
p1 . display ( w , e , q ) ; 
k1 . display ( r , t ) ; 
} 
} 
</SourceCode></SourceCode_List><Errors><Error tpye="io:重複宣告scanner物件"><Message>因為鍵盤只有一個，Scanner物件可以宣告一次即可，不需要針對每一次讀取鍵盤，宣告不同的scanner物件。</Message><Linelist><line Begin="24" End="24" src="Pet" /><line Begin="27" End="27" src="Pet" /><line Begin="30" End="30" src="Pet" /><line Begin="33" End="33" src="Pet" /><line Begin="36" End="36" src="Pet" /></Linelist></Error><Error tpye="物件:建立物件之間的關係"><Message>兩物件之間的關係經常可利用一物件擁有另一物件來實踐。例如，要描述寵物(Pet)與飼主(Keeper)的關係，可以在Pet物件內宣告一個物件資料，類型是Keeper，以表示該Pet物件的Keeper是誰。</Message><Linelist><line Begin="2" End="2" src="Keeper" /></Linelist></Error><Error tpye="物件:物件資料/物件動作概念"><Message>物件資料/動作是物件所擁有的資料/動作，每個物件有自己的資料/動作，與其他的物件無關。語法上，沒有加上static宣告的，就是物件資料與物件動作。你也可以宣告物件資料與物件動作的存取權限，例如，
private int 物件變數;
表示 物件變數資料 只能給該物件本身使用。</Message><Linelist><line Begin="9" End="9" src="Keeper" /><line Begin="39" End="42" src="Pet" /></Linelist></Error></Errors></ErrorList>